
003_Disco_Bare_But_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001035c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000179  00000000  00000000  00010386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ab  00000000  00000000  000104ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000105b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  000105f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f58  00000000  00000000  00010628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000458  00000000  00000000  00011580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003bf1  00000000  00000000  000119d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000155c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0001561c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800033c 	.word	0x0800033c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800033c 	.word	0x0800033c

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b089      	sub	sp, #36	; 0x24
 80001d8:	af00      	add	r7, sp, #0
	uint32_t *pClkCtrlReg=(uint32_t*)	(0x40021000+0x14);	//Table 2. //9.4.6 AHB peripheral clock enable register (RCC_AHBENR)
 80001da:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <main+0xbc>)
 80001dc:	617b      	str	r3, [r7, #20]
	uint32_t *pPortEModeReg=(uint32_t*)	(0x48001000+0x00);	//Table 2. //11.4.1 GPIO port mode register (GPIOx_MODER) (x =A..H)
 80001de:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <main+0xc0>)
 80001e0:	613b      	str	r3, [r7, #16]
	uint32_t *pPortEOutReg=(uint32_t*)	(0x48001000+0x14);	//Table 2. //11.4.6 GPIO port output data register (GPIOx_ODR) (x = A..H)
 80001e2:	4b2d      	ldr	r3, [pc, #180]	; (8000298 <main+0xc4>)
 80001e4:	60fb      	str	r3, [r7, #12]

	uint32_t *pPortAModeReg=(uint32_t*)	(0x48000000+0x00);	//
 80001e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ea:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortAInReg=(uint32_t*)	(0x48000000+0x10);	//11.4.5 GPIO port input data register (GPIOx_IDR) (x = A..H)
 80001ec:	4b2b      	ldr	r3, [pc, #172]	; (800029c <main+0xc8>)
 80001ee:	607b      	str	r3, [r7, #4]

	//Enable the Clock
//	*pClkCtrlReg |=0x200000;
	*pClkCtrlReg |= (1<<21);	//21th bit set in 1
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	601a      	str	r2, [r3, #0]
	*pClkCtrlReg |= (1<<17);	//enable Clock PORTA0.
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	601a      	str	r2, [r3, #0]

	//Configure the mode of the IO pin as output
//	*pPortEModeReg |=0xFFFFFFFF;	//просто проверка операции
//	*pPortEModeReg &=0xFFFCFFFF;
	*pPortEModeReg &=~(3<<16);
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	601a      	str	r2, [r3, #0]
//	*pPortEModeReg |=0x00010000;
	*pPortEModeReg |=(1<<16);
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	601a      	str	r2, [r3, #0]

	//Configure mode of PORTA
	 *pPortAModeReg &=~(3<<0);	//00: Input mode (reset state) 11.4.1 GPIO port mode register (GPIOx_MODER) (x =A..H)Input mode (reset state) По умолчанию он и так вход но для надежности очищаем
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f023 0203 	bic.w	r2, r3, #3
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	601a      	str	r2, [r3, #0]

//	 *pPortAModeReg |=(<<);		//set bit

	//set 8 bit of the output data register(turn on LED GPIOE, GPIO_PIN_8)
//	*pPortEOutReg |=0x00000100;
	*pPortEOutReg |=(1<<8);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	601a      	str	r2, [r3, #0]
	}
*/
	while(1)
	{
		//read the pin status of the pin PA0 (GPIOA INPUT DATA REGISTER)
		uint8_t  pinStatus = (uint8_t)(*pPortAInReg & 0x1); //zero out all other bits except bit 0
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	f003 0301 	and.w	r3, r3, #1
 8000242:	70fb      	strb	r3, [r7, #3]
		if(pinStatus){
 8000244:	78fb      	ldrb	r3, [r7, #3]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f6      	beq.n	8000238 <main+0x64>
			//turn on the LED
			*pPortEOutReg |=(1<<8);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]
			for(uint32_t i=0; i<50000; i++);
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
 800025a:	e002      	b.n	8000262 <main+0x8e>
 800025c:	69fb      	ldr	r3, [r7, #28]
 800025e:	3301      	adds	r3, #1
 8000260:	61fb      	str	r3, [r7, #28]
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000268:	4293      	cmp	r3, r2
 800026a:	d9f7      	bls.n	800025c <main+0x88>
			//turn off the LED
			*pPortEOutReg &=~(1<<8);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	601a      	str	r2, [r3, #0]
			for(uint32_t i=0; i<50000; i++);
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
 800027c:	e002      	b.n	8000284 <main+0xb0>
 800027e:	69bb      	ldr	r3, [r7, #24]
 8000280:	3301      	adds	r3, #1
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800028a:	4293      	cmp	r3, r2
 800028c:	d9f7      	bls.n	800027e <main+0xaa>
	{
 800028e:	e7d3      	b.n	8000238 <main+0x64>
 8000290:	40021014 	.word	0x40021014
 8000294:	48001000 	.word	0x48001000
 8000298:	48001014 	.word	0x48001014
 800029c:	48000010 	.word	0x48000010

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff7f 	bl	80001d4 <main>

080002d6 <LoopForever>:

LoopForever:
    b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_2_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	; (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	; (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	; (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	; (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
