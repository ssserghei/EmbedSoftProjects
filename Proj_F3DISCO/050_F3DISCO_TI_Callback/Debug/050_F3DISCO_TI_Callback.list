
050_F3DISCO_TI_Callback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001dd0  08001dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a27b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001792  00000000  00000000  0002a2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2d4  00000000  00000000  0002c778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f25  00000000  00000000  00049a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b04e6  00000000  00000000  00053971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00103e57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ab4  00000000  00000000  00103ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001db8 	.word	0x08001db8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001db8 	.word	0x08001db8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef huart1;

void SysTick_Handler (void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001dc:	f000 f9b2 	bl	8000544 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001e0:	f000 fae1 	bl	80007a6 <HAL_SYSTICK_IRQHandler>

}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <USART1_IRQHandler>:


void USART1_IRQHandler (void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <USART1_IRQHandler+0x10>)
 80001ee:	f000 fe8f 	bl	8000f10 <HAL_UART_IRQHandler>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000028 	.word	0x20000028

080001fc <delay>:
void SystemClockConfig(void);
void UART1_Init(void);
void Error_handler(void);
void GPIO_Init(void);

void delay(void){
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
	// this will introduce ~200ms delay when system clock is 16MHz
	for(uint32_t i = 0 ; i < 50000 ; i ++);
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e002      	b.n	800020e <delay+0x12>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000214:	4293      	cmp	r3, r2
 8000216:	d9f7      	bls.n	8000208 <delay+0xc>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <main>:
/*************************MAIN************************************/
uint8_t data_buffer[100];
uint8_t recvd_data;
uint8_t count=0;
uint8_t reception_complete=FALSE;
int main (void){
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b088      	sub	sp, #32
 800022c:	af00      	add	r7, sp, #0

	HAL_Init();
 800022e:	f000 f93b 	bl	80004a8 <HAL_Init>
	SystemClockConfig();
 8000232:	f000 f887 	bl	8000344 <SystemClockConfig>
	GPIO_Init();
 8000236:	f000 f861 	bl	80002fc <GPIO_Init>

	UART1_Init();
 800023a:	f000 f88b 	bl	8000354 <UART1_Init>

//	uint16_t len_of_data=strlen(user_data);
//	HAL_UART_Transmit(&huart1, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY);

	uint8_t str[] = "Prived medved\r\n\0";
 800023e:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <main+0xc4>)
 8000240:	f107 040c 	add.w	r4, r7, #12
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	682b      	ldr	r3, [r5, #0]
 800024c:	7023      	strb	r3, [r4, #0]

//	uint16_t len_of_data=strlen(str);
//	HAL_UART_Transmit(&huart1, (uint8_t*)str, len_of_data, HAL_MAX_DELAY);


	uint8_t userdata[] = "6\r\n\0"; //ASCHI 6
 800024e:	4a28      	ldr	r2, [pc, #160]	; (80002f0 <main+0xc8>)
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000256:	6018      	str	r0, [r3, #0]
 8000258:	3304      	adds	r3, #4
 800025a:	7019      	strb	r1, [r3, #0]

	uint8_t len_of_data = strlen(userdata);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ffb2 	bl	80001c8 <strlen>
 8000264:	4603      	mov	r3, r0
 8000266:	77fb      	strb	r3, [r7, #31]

	HAL_UART_Transmit(&huart1, &userdata, len_of_data, HAL_MAX_DELAY);
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	b29a      	uxth	r2, r3
 800026c:	1d39      	adds	r1, r7, #4
 800026e:	f04f 33ff 	mov.w	r3, #4294967295
 8000272:	4820      	ldr	r0, [pc, #128]	; (80002f4 <main+0xcc>)
 8000274:	f000 fdb8 	bl	8000de8 <HAL_UART_Transmit>



while(1){

	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 8000278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027c:	481e      	ldr	r0, [pc, #120]	; (80002f8 <main+0xd0>)
 800027e:	f000 fc91 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 8000282:	f7ff ffbb 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	481b      	ldr	r0, [pc, #108]	; (80002f8 <main+0xd0>)
 800028c:	f000 fc8a 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 8000290:	f7ff ffb4 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 8000294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000298:	4817      	ldr	r0, [pc, #92]	; (80002f8 <main+0xd0>)
 800029a:	f000 fc83 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 800029e:	f7ff ffad 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_12);
 80002a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a6:	4814      	ldr	r0, [pc, #80]	; (80002f8 <main+0xd0>)
 80002a8:	f000 fc7c 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 80002ac:	f7ff ffa6 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_13);
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	4810      	ldr	r0, [pc, #64]	; (80002f8 <main+0xd0>)
 80002b6:	f000 fc75 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 80002ba:	f7ff ff9f 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_14);
 80002be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c2:	480d      	ldr	r0, [pc, #52]	; (80002f8 <main+0xd0>)
 80002c4:	f000 fc6e 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 80002c8:	f7ff ff98 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 80002cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <main+0xd0>)
 80002d2:	f000 fc67 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 80002d6:	f7ff ff91 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80002da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <main+0xd0>)
 80002e0:	f000 fc60 	bl	8000ba4 <HAL_GPIO_TogglePin>
	delay();
 80002e4:	f7ff ff8a 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 80002e8:	e7c6      	b.n	8000278 <main+0x50>
 80002ea:	bf00      	nop
 80002ec:	08001df0 	.word	0x08001df0
 80002f0:	08001e04 	.word	0x08001e04
 80002f4:	20000028 	.word	0x20000028
 80002f8:	48001000 	.word	0x48001000

080002fc <GPIO_Init>:
	return 0;
}//END MAIN


void GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <GPIO_Init+0x40>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <GPIO_Init+0x40>)
 8000308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <GPIO_Init+0x40>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_8;
 800031a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800031e:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000320:	2301      	movs	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE,&ledgpio);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4619      	mov	r1, r3
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <GPIO_Init+0x44>)
 800032e:	f000 fabf 	bl	80008b0 <HAL_GPIO_Init>
}
 8000332:	bf00      	nop
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	48001000 	.word	0x48001000

08000344 <SystemClockConfig>:

void SystemClockConfig(void){
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <UART1_Init>:

void UART1_Init(void){
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

	huart1.Instance=USART1;						//
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <UART1_Init+0x44>)
 800035a:	4a10      	ldr	r2, [pc, #64]	; (800039c <UART1_Init+0x48>)
 800035c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate=115200;				//
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <UART1_Init+0x44>)
 8000360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000364:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength=UART_WORDLENGTH_8B;	//
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <UART1_Init+0x44>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits=UART_STOPBITS_1;		//
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <UART1_Init+0x44>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity=UART_PARITY_NONE;		//
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <UART1_Init+0x44>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
	huart1.Init.HwFlowCtl=UART_HWCONTROL_NONE;	//
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <UART1_Init+0x44>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
	huart1.Init.Mode=UART_MODE_TX_RX;			//
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <UART1_Init+0x44>)
 8000380:	220c      	movs	r2, #12
 8000382:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart1) !=HAL_OK){
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <UART1_Init+0x44>)
 8000386:	f000 fce1 	bl	8000d4c <HAL_UART_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <UART1_Init+0x40>
		//There is a problem
		Error_handler();
 8000390:	f000 f806 	bl	80003a0 <Error_handler>
	}
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000028 	.word	0x20000028
 800039c:	40013800 	.word	0x40013800

080003a0 <Error_handler>:


void Error_handler(void){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	while(1);
 80003a4:	e7fe      	b.n	80003a4 <Error_handler+0x4>
	...

080003a8 <HAL_UART_MspInit>:
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);

}


void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	; 0x28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART1 peripheral
	__HAL_RCC_USART1_CLK_ENABLE();
 80003b0:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <HAL_UART_MspInit+0x80>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <HAL_UART_MspInit+0x80>)
 80003b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <HAL_UART_MspInit+0x80>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003c4:	613b      	str	r3, [r7, #16]
 80003c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <HAL_UART_MspInit+0x80>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a16      	ldr	r2, [pc, #88]	; (8000428 <HAL_UART_MspInit+0x80>)
 80003ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d2:	6153      	str	r3, [r2, #20]
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <HAL_UART_MspInit+0x80>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configurations
	gpio_uart.Pin=GPIO_PIN_4;
 80003e0:	2310      	movs	r3, #16
 80003e2:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode=GPIO_MODE_AF_PP;
 80003e4:	2302      	movs	r3, #2
 80003e6:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull=GPIO_PULLUP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed=GPIO_SPEED_FREQ_LOW;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate=GPIO_AF7_USART1;	//UART2_TX
 80003f0:	2307      	movs	r3, #7
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC,&gpio_uart);
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	4619      	mov	r1, r3
 80003fa:	480c      	ldr	r0, [pc, #48]	; (800042c <HAL_UART_MspInit+0x84>)
 80003fc:	f000 fa58 	bl	80008b0 <HAL_GPIO_Init>

	//nu trebuie de scrie restul setarilor dearece ele sint fixate in structura
	gpio_uart.Pin=GPIO_PIN_5;		//UART2_RX
 8000400:	2320      	movs	r3, #32
 8000402:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&gpio_uart);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	4808      	ldr	r0, [pc, #32]	; (800042c <HAL_UART_MspInit+0x84>)
 800040c:	f000 fa50 	bl	80008b0 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000410:	2025      	movs	r0, #37	; 0x25
 8000412:	f000 f9ae 	bl	8000772 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	210f      	movs	r1, #15
 800041a:	2025      	movs	r0, #37	; 0x25
 800041c:	f000 f98d 	bl	800073a <HAL_NVIC_SetPriority>

}
 8000420:	bf00      	nop
 8000422:	3728      	adds	r7, #40	; 0x28
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000
 800042c:	48000800 	.word	0x48000800

08000430 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <SystemInit+0x20>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SystemInit+0x20>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800048c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490e      	ldr	r1, [pc, #56]	; (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0b      	ldr	r4, [pc, #44]	; (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800047e:	f7ff ffd7 	bl	8000430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000482:	f001 fc75 	bl	8001d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000486:	f7ff fecf 	bl	8000228 <main>

0800048a <LoopForever>:

LoopForever:
    b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800048c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000498:	08001e3c 	.word	0x08001e3c
  ldr r2, =_sbss
 800049c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004a0:	200000b0 	.word	0x200000b0

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_Init+0x28>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <HAL_Init+0x28>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 f933 	bl	8000724 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004be:	2000      	movs	r0, #0
 80004c0:	f000 f810 	bl	80004e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c4:	f000 f806 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40022000 	.word	0x40022000

080004d4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_InitTick+0x54>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_InitTick+0x58>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4619      	mov	r1, r3
 80004f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80004fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f943 	bl	800078e <HAL_SYSTICK_Config>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
 8000510:	e00e      	b.n	8000530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d80a      	bhi.n	800052e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000518:	2200      	movs	r2, #0
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f000 f90b 	bl	800073a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <HAL_InitTick+0x5c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800052a:	2300      	movs	r3, #0
 800052c:	e000      	b.n	8000530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
}
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000000 	.word	0x20000000
 800053c:	20000008 	.word	0x20000008
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000008 	.word	0x20000008
 8000568:	200000ac 	.word	0x200000ac

0800056c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	200000ac 	.word	0x200000ac

08000584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005a0:	4013      	ands	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <__NVIC_SetPriorityGrouping+0x44>)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	60d3      	str	r3, [r2, #12]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <__NVIC_GetPriorityGrouping+0x18>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	f003 0307 	and.w	r3, r3, #7
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db0b      	blt.n	8000612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 021f 	and.w	r2, r3, #31
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <__NVIC_EnableIRQ+0x38>)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	2001      	movs	r0, #1
 800060a:	fa00 f202 	lsl.w	r2, r0, r2
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43da      	mvns	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	401a      	ands	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	; 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f0:	d301      	bcc.n	80006f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00f      	b.n	8000716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <SysTick_Config+0x40>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006fe:	210f      	movs	r1, #15
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f7ff ff8e 	bl	8000624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SysTick_Config+0x40>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <SysTick_Config+0x40>)
 8000710:	2207      	movs	r2, #7
 8000712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010

08000724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff29 	bl	8000584 <__NVIC_SetPriorityGrouping>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800074c:	f7ff ff3e 	bl	80005cc <__NVIC_GetPriorityGrouping>
 8000750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	6978      	ldr	r0, [r7, #20]
 8000758:	f7ff ff8e 	bl	8000678 <NVIC_EncodePriority>
 800075c:	4602      	mov	r2, r0
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff5d 	bl	8000624 <__NVIC_SetPriority>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff31 	bl	80005e8 <__NVIC_EnableIRQ>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffa2 	bl	80006e0 <SysTick_Config>
 800079c:	4603      	mov	r3, r0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007aa:	f000 f802 	bl	80007b2 <HAL_SYSTICK_Callback>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d008      	beq.n	80007e4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2204      	movs	r2, #4
 80007d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e020      	b.n	8000826 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f022 020e 	bic.w	r2, r2, #14
 80007f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f022 0201 	bic.w	r2, r2, #1
 8000802:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080c:	2101      	movs	r1, #1
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2201      	movs	r2, #1
 8000818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000844:	2b02      	cmp	r3, #2
 8000846:	d005      	beq.n	8000854 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2204      	movs	r2, #4
 800084c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	e027      	b.n	80008a4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f022 020e 	bic.w	r2, r2, #14
 8000862:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0201 	bic.w	r2, r2, #1
 8000872:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800087c:	2101      	movs	r1, #1
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	4798      	blx	r3
    } 
  }
  return status;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008be:	e154      	b.n	8000b6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	2101      	movs	r1, #1
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	4013      	ands	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 8146 	beq.w	8000b64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f003 0303 	and.w	r3, r3, #3
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d005      	beq.n	80008f0 <HAL_GPIO_Init+0x40>
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d130      	bne.n	8000952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	68da      	ldr	r2, [r3, #12]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4313      	orrs	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000926:	2201      	movs	r2, #1
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	091b      	lsrs	r3, r3, #4
 800093c:	f003 0201 	and.w	r2, r3, #1
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	2b03      	cmp	r3, #3
 800095c:	d017      	beq.n	800098e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	2b02      	cmp	r3, #2
 8000998:	d123      	bne.n	80009e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	08da      	lsrs	r2, r3, #3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3208      	adds	r2, #8
 80009a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	220f      	movs	r2, #15
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	691a      	ldr	r2, [r3, #16]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	08da      	lsrs	r2, r3, #3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3208      	adds	r2, #8
 80009dc:	6939      	ldr	r1, [r7, #16]
 80009de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2203      	movs	r2, #3
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0203 	and.w	r2, r3, #3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 80a0 	beq.w	8000b64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a24:	4b58      	ldr	r3, [pc, #352]	; (8000b88 <HAL_GPIO_Init+0x2d8>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a57      	ldr	r2, [pc, #348]	; (8000b88 <HAL_GPIO_Init+0x2d8>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b55      	ldr	r3, [pc, #340]	; (8000b88 <HAL_GPIO_Init+0x2d8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a3c:	4a53      	ldr	r2, [pc, #332]	; (8000b8c <HAL_GPIO_Init+0x2dc>)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	220f      	movs	r2, #15
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a66:	d019      	beq.n	8000a9c <HAL_GPIO_Init+0x1ec>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a49      	ldr	r2, [pc, #292]	; (8000b90 <HAL_GPIO_Init+0x2e0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d013      	beq.n	8000a98 <HAL_GPIO_Init+0x1e8>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a48      	ldr	r2, [pc, #288]	; (8000b94 <HAL_GPIO_Init+0x2e4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d00d      	beq.n	8000a94 <HAL_GPIO_Init+0x1e4>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a47      	ldr	r2, [pc, #284]	; (8000b98 <HAL_GPIO_Init+0x2e8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d007      	beq.n	8000a90 <HAL_GPIO_Init+0x1e0>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <HAL_GPIO_Init+0x2ec>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d101      	bne.n	8000a8c <HAL_GPIO_Init+0x1dc>
 8000a88:	2304      	movs	r3, #4
 8000a8a:	e008      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	e006      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a90:	2303      	movs	r3, #3
 8000a92:	e004      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a94:	2302      	movs	r3, #2
 8000a96:	e002      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	f002 0203 	and.w	r2, r2, #3
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aae:	4937      	ldr	r1, [pc, #220]	; (8000b8c <HAL_GPIO_Init+0x2dc>)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000abc:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ae0:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_GPIO_Init+0x2f0>)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3301      	adds	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa22 f303 	lsr.w	r3, r2, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f47f aea3 	bne.w	80008c0 <HAL_GPIO_Init+0x10>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	371c      	adds	r7, #28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	48000800 	.word	0x48000800
 8000b98:	48000c00 	.word	0x48000c00
 8000b9c:	48001000 	.word	0x48001000
 8000ba0:	40010400 	.word	0x40010400

08000ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43d9      	mvns	r1, r3
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	619a      	str	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b08b      	sub	sp, #44	; 0x2c
 8000bdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d002      	beq.n	8000c08 <HAL_RCC_GetSysClockFreq+0x30>
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d003      	beq.n	8000c0e <HAL_RCC_GetSysClockFreq+0x36>
 8000c06:	e03c      	b.n	8000c82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000c0a:	623b      	str	r3, [r7, #32]
      break;
 8000c0c:	e03c      	b.n	8000c88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000c18:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	fa92 f2a2 	rbit	r2, r2
 8000c20:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	40d3      	lsrs	r3, r2
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	fa92 f2a2 	rbit	r2, r2
 8000c44:	60fa      	str	r2, [r7, #12]
  return result;
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	40d3      	lsrs	r3, r2
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c70:	e004      	b.n	8000c7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	623b      	str	r3, [r7, #32]
      break;
 8000c80:	e002      	b.n	8000c88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000c84:	623b      	str	r3, [r7, #32]
      break;
 8000c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000c88:	6a3b      	ldr	r3, [r7, #32]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	372c      	adds	r7, #44	; 0x2c
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	007a1200 	.word	0x007a1200
 8000ca0:	08001e14 	.word	0x08001e14
 8000ca4:	08001e24 	.word	0x08001e24
 8000ca8:	003d0900 	.word	0x003d0900

08000cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000000 	.word	0x20000000

08000cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000cca:	f7ff ffef 	bl	8000cac <HAL_RCC_GetHCLKFreq>
 8000cce:	4601      	mov	r1, r0
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	fa92 f2a2 	rbit	r2, r2
 8000ce4:	603a      	str	r2, [r7, #0]
  return result;
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	08001e0c 	.word	0x08001e0c

08000d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d0e:	f7ff ffcd 	bl	8000cac <HAL_RCC_GetHCLKFreq>
 8000d12:	4601      	mov	r1, r0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	fa92 f2a2 	rbit	r2, r2
 8000d28:	603a      	str	r2, [r7, #0]
  return result;
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	40d3      	lsrs	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000
 8000d48:	08001e0c 	.word	0x08001e0c

08000d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e040      	b.n	8000de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fb1a 	bl	80003a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2224      	movs	r2, #36	; 0x24
 8000d78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fbbe 	bl	800150c <UART_SetConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e022      	b.n	8000de0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 fd88 	bl	80018b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 fe0f 	bl	80019fc <UART_CheckIdleState>
 8000dde:	4603      	mov	r3, r0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	4613      	mov	r3, r2
 8000df6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000dfc:	2b20      	cmp	r3, #32
 8000dfe:	f040 8082 	bne.w	8000f06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_UART_Transmit+0x26>
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e07a      	b.n	8000f08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_UART_Transmit+0x38>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e073      	b.n	8000f08 <HAL_UART_Transmit+0x120>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2221      	movs	r2, #33	; 0x21
 8000e34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e36:	f7ff fb99 	bl	800056c <HAL_GetTick>
 8000e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	88fa      	ldrh	r2, [r7, #6]
 8000e40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	88fa      	ldrh	r2, [r7, #6]
 8000e48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e54:	d108      	bne.n	8000e68 <HAL_UART_Transmit+0x80>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d104      	bne.n	8000e68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	e003      	b.n	8000e70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8000e78:	e02d      	b.n	8000ed6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f000 fe02 	bl	8001a8e <UART_WaitOnFlagUntilTimeout>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e039      	b.n	8000f08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10b      	bne.n	8000eb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	3302      	adds	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	e008      	b.n	8000ec4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1cb      	bne.n	8000e7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 fdce 	bl	8001a8e <UART_WaitOnFlagUntilTimeout>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e005      	b.n	8000f08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2220      	movs	r2, #32
 8000f00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8000f06:	2302      	movs	r3, #2
  }
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ba      	sub	sp, #232	; 0xe8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000f36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000f3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8000f3e:	4013      	ands	r3, r2
 8000f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8000f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d115      	bne.n	8000f78 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8000f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00f      	beq.n	8000f78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f5c:	f003 0320 	and.w	r3, r3, #32
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d009      	beq.n	8000f78 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 82a3 	beq.w	80014b4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	4798      	blx	r3
      }
      return;
 8000f76:	e29d      	b.n	80014b4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8000f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8117 	beq.w	80011b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8000f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8000f8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f92:	4b85      	ldr	r3, [pc, #532]	; (80011a8 <HAL_UART_IRQHandler+0x298>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 810a 	beq.w	80011b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8000f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d011      	beq.n	8000fcc <HAL_UART_IRQHandler+0xbc>
 8000fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fc2:	f043 0201 	orr.w	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d011      	beq.n	8000ffc <HAL_UART_IRQHandler+0xec>
 8000fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00b      	beq.n	8000ffc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ff2:	f043 0204 	orr.w	r2, r3, #4
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d011      	beq.n	800102c <HAL_UART_IRQHandler+0x11c>
 8001008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2204      	movs	r2, #4
 800101a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	f043 0202 	orr.w	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800102c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d017      	beq.n	8001068 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001048:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2208      	movs	r2, #8
 8001056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	f043 0208 	orr.w	r2, r3, #8
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800106c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001070:	2b00      	cmp	r3, #0
 8001072:	d012      	beq.n	800109a <HAL_UART_IRQHandler+0x18a>
 8001074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001090:	f043 0220 	orr.w	r2, r3, #32
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 8209 	beq.w	80014b8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80010a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00d      	beq.n	80010ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80010b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	2b40      	cmp	r3, #64	; 0x40
 80010e4:	d005      	beq.n	80010f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80010e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d04f      	beq.n	8001192 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fd8f 	bl	8001c16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001102:	2b40      	cmp	r3, #64	; 0x40
 8001104:	d141      	bne.n	800118a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3308      	adds	r3, #8
 800110c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001114:	e853 3f00 	ldrex	r3, [r3]
 8001118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800111c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3308      	adds	r3, #8
 800112e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800113a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800113e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001142:	e841 2300 	strex	r3, r2, [r1]
 8001146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800114a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1d9      	bne.n	8001106 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001156:	2b00      	cmp	r3, #0
 8001158:	d013      	beq.n	8001182 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_UART_IRQHandler+0x29c>)
 8001160:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fb63 	bl	8000832 <HAL_DMA_Abort_IT>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d017      	beq.n	80011a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800117c:	4610      	mov	r0, r2
 800117e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001180:	e00f      	b.n	80011a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f9ac 	bl	80014e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001188:	e00b      	b.n	80011a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9a8 	bl	80014e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001190:	e007      	b.n	80011a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f9a4 	bl	80014e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80011a0:	e18a      	b.n	80014b8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011a2:	bf00      	nop
    return;
 80011a4:	e188      	b.n	80014b8 <HAL_UART_IRQHandler+0x5a8>
 80011a6:	bf00      	nop
 80011a8:	04000120 	.word	0x04000120
 80011ac:	08001cdd 	.word	0x08001cdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 8143 	bne.w	8001440 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80011ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 813c 	beq.w	8001440 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80011c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8135 	beq.w	8001440 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2210      	movs	r2, #16
 80011dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e8:	2b40      	cmp	r3, #64	; 0x40
 80011ea:	f040 80b1 	bne.w	8001350 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80011fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 815c 	beq.w	80014bc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800120a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800120e:	429a      	cmp	r2, r3
 8001210:	f080 8154 	bcs.w	80014bc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800121a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2b20      	cmp	r3, #32
 8001226:	f000 8085 	beq.w	8001334 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001236:	e853 3f00 	ldrex	r3, [r3]
 800123a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800123e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001258:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800125c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001260:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001264:	e841 2300 	strex	r3, r2, [r1]
 8001268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800126c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1da      	bne.n	800122a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3308      	adds	r3, #8
 800127a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800127c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800127e:	e853 3f00 	ldrex	r3, [r3]
 8001282:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3308      	adds	r3, #8
 8001294:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001298:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800129c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800129e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80012a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80012a4:	e841 2300 	strex	r3, r2, [r1]
 80012a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80012aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e1      	bne.n	8001274 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3308      	adds	r3, #8
 80012b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ba:	e853 3f00 	ldrex	r3, [r3]
 80012be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80012c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3308      	adds	r3, #8
 80012d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80012d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80012da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80012dc:	e841 2300 	strex	r3, r2, [r1]
 80012e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80012e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e3      	bne.n	80012b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2220      	movs	r2, #32
 80012ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fc:	e853 3f00 	ldrex	r3, [r3]
 8001300:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001304:	f023 0310 	bic.w	r3, r3, #16
 8001308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001316:	65bb      	str	r3, [r7, #88]	; 0x58
 8001318:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800131a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800131c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800131e:	e841 2300 	strex	r3, r2, [r1]
 8001322:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1e4      	bne.n	80012f4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fa46 	bl	80007c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001340:	b29b      	uxth	r3, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f8d3 	bl	80014f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800134e:	e0b5      	b.n	80014bc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800135c:	b29b      	uxth	r3, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800136a:	b29b      	uxth	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80a7 	beq.w	80014c0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8001372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80a2 	beq.w	80014c0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001384:	e853 3f00 	ldrex	r3, [r3]
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800138a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
 80013a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013a6:	e841 2300 	strex	r3, r2, [r1]
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80013ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e4      	bne.n	800137c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3308      	adds	r3, #8
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	e853 3f00 	ldrex	r3, [r3]
 80013c0:	623b      	str	r3, [r7, #32]
   return(result);
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3308      	adds	r3, #8
 80013d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013d6:	633a      	str	r2, [r7, #48]	; 0x30
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013de:	e841 2300 	strex	r3, r2, [r1]
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e3      	bne.n	80013b2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2220      	movs	r2, #32
 80013ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	e853 3f00 	ldrex	r3, [r3]
 8001408:	60fb      	str	r3, [r7, #12]
   return(result);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f023 0310 	bic.w	r3, r3, #16
 8001410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	e841 2300 	strex	r3, r2, [r1]
 800142a:	617b      	str	r3, [r7, #20]
   return(result);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1e4      	bne.n	80013fc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f85b 	bl	80014f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800143e:	e03f      	b.n	80014c0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00e      	beq.n	800146a <HAL_UART_IRQHandler+0x55a>
 800144c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fc7a 	bl	8001d5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001468:	e02d      	b.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800146a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00e      	beq.n	8001494 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01c      	beq.n	80014c4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4798      	blx	r3
    }
    return;
 8001492:	e017      	b.n	80014c4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d012      	beq.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
 80014a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80014a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fc2b 	bl	8001d08 <UART_EndTransmit_IT>
    return;
 80014b2:	e008      	b.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80014b4:	bf00      	nop
 80014b6:	e006      	b.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80014b8:	bf00      	nop
 80014ba:	e004      	b.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80014bc:	bf00      	nop
 80014be:	e002      	b.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80014c0:	bf00      	nop
 80014c2:	e000      	b.n	80014c6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80014c4:	bf00      	nop
  }

}
 80014c6:	37e8      	adds	r7, #232	; 0xe8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800153a:	f023 030c 	bic.w	r3, r3, #12
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	6979      	ldr	r1, [r7, #20]
 8001544:	430b      	orrs	r3, r1
 8001546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4aa8      	ldr	r2, [pc, #672]	; (8001828 <UART_SetConfig+0x31c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d120      	bne.n	80015ce <UART_SetConfig+0xc2>
 800158c:	4ba7      	ldr	r3, [pc, #668]	; (800182c <UART_SetConfig+0x320>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b03      	cmp	r3, #3
 8001596:	d817      	bhi.n	80015c8 <UART_SetConfig+0xbc>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <UART_SetConfig+0x94>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015c3 	.word	0x080015c3
 80015ac:	080015b7 	.word	0x080015b7
 80015b0:	2301      	movs	r3, #1
 80015b2:	77fb      	strb	r3, [r7, #31]
 80015b4:	e0b5      	b.n	8001722 <UART_SetConfig+0x216>
 80015b6:	2302      	movs	r3, #2
 80015b8:	77fb      	strb	r3, [r7, #31]
 80015ba:	e0b2      	b.n	8001722 <UART_SetConfig+0x216>
 80015bc:	2304      	movs	r3, #4
 80015be:	77fb      	strb	r3, [r7, #31]
 80015c0:	e0af      	b.n	8001722 <UART_SetConfig+0x216>
 80015c2:	2308      	movs	r3, #8
 80015c4:	77fb      	strb	r3, [r7, #31]
 80015c6:	e0ac      	b.n	8001722 <UART_SetConfig+0x216>
 80015c8:	2310      	movs	r3, #16
 80015ca:	77fb      	strb	r3, [r7, #31]
 80015cc:	e0a9      	b.n	8001722 <UART_SetConfig+0x216>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a97      	ldr	r2, [pc, #604]	; (8001830 <UART_SetConfig+0x324>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d124      	bne.n	8001622 <UART_SetConfig+0x116>
 80015d8:	4b94      	ldr	r3, [pc, #592]	; (800182c <UART_SetConfig+0x320>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015e4:	d011      	beq.n	800160a <UART_SetConfig+0xfe>
 80015e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015ea:	d817      	bhi.n	800161c <UART_SetConfig+0x110>
 80015ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015f0:	d011      	beq.n	8001616 <UART_SetConfig+0x10a>
 80015f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015f6:	d811      	bhi.n	800161c <UART_SetConfig+0x110>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <UART_SetConfig+0xf8>
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d006      	beq.n	8001610 <UART_SetConfig+0x104>
 8001602:	e00b      	b.n	800161c <UART_SetConfig+0x110>
 8001604:	2300      	movs	r3, #0
 8001606:	77fb      	strb	r3, [r7, #31]
 8001608:	e08b      	b.n	8001722 <UART_SetConfig+0x216>
 800160a:	2302      	movs	r3, #2
 800160c:	77fb      	strb	r3, [r7, #31]
 800160e:	e088      	b.n	8001722 <UART_SetConfig+0x216>
 8001610:	2304      	movs	r3, #4
 8001612:	77fb      	strb	r3, [r7, #31]
 8001614:	e085      	b.n	8001722 <UART_SetConfig+0x216>
 8001616:	2308      	movs	r3, #8
 8001618:	77fb      	strb	r3, [r7, #31]
 800161a:	e082      	b.n	8001722 <UART_SetConfig+0x216>
 800161c:	2310      	movs	r3, #16
 800161e:	77fb      	strb	r3, [r7, #31]
 8001620:	e07f      	b.n	8001722 <UART_SetConfig+0x216>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a83      	ldr	r2, [pc, #524]	; (8001834 <UART_SetConfig+0x328>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d124      	bne.n	8001676 <UART_SetConfig+0x16a>
 800162c:	4b7f      	ldr	r3, [pc, #508]	; (800182c <UART_SetConfig+0x320>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001634:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001638:	d011      	beq.n	800165e <UART_SetConfig+0x152>
 800163a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800163e:	d817      	bhi.n	8001670 <UART_SetConfig+0x164>
 8001640:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001644:	d011      	beq.n	800166a <UART_SetConfig+0x15e>
 8001646:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800164a:	d811      	bhi.n	8001670 <UART_SetConfig+0x164>
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <UART_SetConfig+0x14c>
 8001650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001654:	d006      	beq.n	8001664 <UART_SetConfig+0x158>
 8001656:	e00b      	b.n	8001670 <UART_SetConfig+0x164>
 8001658:	2300      	movs	r3, #0
 800165a:	77fb      	strb	r3, [r7, #31]
 800165c:	e061      	b.n	8001722 <UART_SetConfig+0x216>
 800165e:	2302      	movs	r3, #2
 8001660:	77fb      	strb	r3, [r7, #31]
 8001662:	e05e      	b.n	8001722 <UART_SetConfig+0x216>
 8001664:	2304      	movs	r3, #4
 8001666:	77fb      	strb	r3, [r7, #31]
 8001668:	e05b      	b.n	8001722 <UART_SetConfig+0x216>
 800166a:	2308      	movs	r3, #8
 800166c:	77fb      	strb	r3, [r7, #31]
 800166e:	e058      	b.n	8001722 <UART_SetConfig+0x216>
 8001670:	2310      	movs	r3, #16
 8001672:	77fb      	strb	r3, [r7, #31]
 8001674:	e055      	b.n	8001722 <UART_SetConfig+0x216>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6f      	ldr	r2, [pc, #444]	; (8001838 <UART_SetConfig+0x32c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d124      	bne.n	80016ca <UART_SetConfig+0x1be>
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <UART_SetConfig+0x320>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001688:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800168c:	d011      	beq.n	80016b2 <UART_SetConfig+0x1a6>
 800168e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001692:	d817      	bhi.n	80016c4 <UART_SetConfig+0x1b8>
 8001694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001698:	d011      	beq.n	80016be <UART_SetConfig+0x1b2>
 800169a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800169e:	d811      	bhi.n	80016c4 <UART_SetConfig+0x1b8>
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <UART_SetConfig+0x1a0>
 80016a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016a8:	d006      	beq.n	80016b8 <UART_SetConfig+0x1ac>
 80016aa:	e00b      	b.n	80016c4 <UART_SetConfig+0x1b8>
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
 80016b0:	e037      	b.n	8001722 <UART_SetConfig+0x216>
 80016b2:	2302      	movs	r3, #2
 80016b4:	77fb      	strb	r3, [r7, #31]
 80016b6:	e034      	b.n	8001722 <UART_SetConfig+0x216>
 80016b8:	2304      	movs	r3, #4
 80016ba:	77fb      	strb	r3, [r7, #31]
 80016bc:	e031      	b.n	8001722 <UART_SetConfig+0x216>
 80016be:	2308      	movs	r3, #8
 80016c0:	77fb      	strb	r3, [r7, #31]
 80016c2:	e02e      	b.n	8001722 <UART_SetConfig+0x216>
 80016c4:	2310      	movs	r3, #16
 80016c6:	77fb      	strb	r3, [r7, #31]
 80016c8:	e02b      	b.n	8001722 <UART_SetConfig+0x216>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a5b      	ldr	r2, [pc, #364]	; (800183c <UART_SetConfig+0x330>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d124      	bne.n	800171e <UART_SetConfig+0x212>
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <UART_SetConfig+0x320>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80016e0:	d011      	beq.n	8001706 <UART_SetConfig+0x1fa>
 80016e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80016e6:	d817      	bhi.n	8001718 <UART_SetConfig+0x20c>
 80016e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016ec:	d011      	beq.n	8001712 <UART_SetConfig+0x206>
 80016ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016f2:	d811      	bhi.n	8001718 <UART_SetConfig+0x20c>
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <UART_SetConfig+0x1f4>
 80016f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016fc:	d006      	beq.n	800170c <UART_SetConfig+0x200>
 80016fe:	e00b      	b.n	8001718 <UART_SetConfig+0x20c>
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
 8001704:	e00d      	b.n	8001722 <UART_SetConfig+0x216>
 8001706:	2302      	movs	r3, #2
 8001708:	77fb      	strb	r3, [r7, #31]
 800170a:	e00a      	b.n	8001722 <UART_SetConfig+0x216>
 800170c:	2304      	movs	r3, #4
 800170e:	77fb      	strb	r3, [r7, #31]
 8001710:	e007      	b.n	8001722 <UART_SetConfig+0x216>
 8001712:	2308      	movs	r3, #8
 8001714:	77fb      	strb	r3, [r7, #31]
 8001716:	e004      	b.n	8001722 <UART_SetConfig+0x216>
 8001718:	2310      	movs	r3, #16
 800171a:	77fb      	strb	r3, [r7, #31]
 800171c:	e001      	b.n	8001722 <UART_SetConfig+0x216>
 800171e:	2310      	movs	r3, #16
 8001720:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800172a:	d15c      	bne.n	80017e6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800172c:	7ffb      	ldrb	r3, [r7, #31]
 800172e:	2b08      	cmp	r3, #8
 8001730:	d827      	bhi.n	8001782 <UART_SetConfig+0x276>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <UART_SetConfig+0x22c>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	0800175d 	.word	0x0800175d
 800173c:	08001765 	.word	0x08001765
 8001740:	0800176d 	.word	0x0800176d
 8001744:	08001783 	.word	0x08001783
 8001748:	08001773 	.word	0x08001773
 800174c:	08001783 	.word	0x08001783
 8001750:	08001783 	.word	0x08001783
 8001754:	08001783 	.word	0x08001783
 8001758:	0800177b 	.word	0x0800177b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800175c:	f7ff fab2 	bl	8000cc4 <HAL_RCC_GetPCLK1Freq>
 8001760:	61b8      	str	r0, [r7, #24]
        break;
 8001762:	e013      	b.n	800178c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001764:	f7ff fad0 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001768:	61b8      	str	r0, [r7, #24]
        break;
 800176a:	e00f      	b.n	800178c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <UART_SetConfig+0x334>)
 800176e:	61bb      	str	r3, [r7, #24]
        break;
 8001770:	e00c      	b.n	800178c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001772:	f7ff fa31 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
 8001776:	61b8      	str	r0, [r7, #24]
        break;
 8001778:	e008      	b.n	800178c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800177a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177e:	61bb      	str	r3, [r7, #24]
        break;
 8001780:	e004      	b.n	800178c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	77bb      	strb	r3, [r7, #30]
        break;
 800178a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8084 	beq.w	800189c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	005a      	lsls	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	441a      	add	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d916      	bls.n	80017e0 <UART_SetConfig+0x2d4>
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d212      	bcs.n	80017e0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f023 030f 	bic.w	r3, r3, #15
 80017c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	89fb      	ldrh	r3, [r7, #14]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	89fa      	ldrh	r2, [r7, #14]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	e05d      	b.n	800189c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	77bb      	strb	r3, [r7, #30]
 80017e4:	e05a      	b.n	800189c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d836      	bhi.n	800185a <UART_SetConfig+0x34e>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <UART_SetConfig+0x2e8>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001819 	.word	0x08001819
 80017f8:	08001821 	.word	0x08001821
 80017fc:	08001845 	.word	0x08001845
 8001800:	0800185b 	.word	0x0800185b
 8001804:	0800184b 	.word	0x0800184b
 8001808:	0800185b 	.word	0x0800185b
 800180c:	0800185b 	.word	0x0800185b
 8001810:	0800185b 	.word	0x0800185b
 8001814:	08001853 	.word	0x08001853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001818:	f7ff fa54 	bl	8000cc4 <HAL_RCC_GetPCLK1Freq>
 800181c:	61b8      	str	r0, [r7, #24]
        break;
 800181e:	e021      	b.n	8001864 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001820:	f7ff fa72 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
 8001824:	61b8      	str	r0, [r7, #24]
        break;
 8001826:	e01d      	b.n	8001864 <UART_SetConfig+0x358>
 8001828:	40013800 	.word	0x40013800
 800182c:	40021000 	.word	0x40021000
 8001830:	40004400 	.word	0x40004400
 8001834:	40004800 	.word	0x40004800
 8001838:	40004c00 	.word	0x40004c00
 800183c:	40005000 	.word	0x40005000
 8001840:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <UART_SetConfig+0x3a8>)
 8001846:	61bb      	str	r3, [r7, #24]
        break;
 8001848:	e00c      	b.n	8001864 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800184a:	f7ff f9c5 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
 800184e:	61b8      	str	r0, [r7, #24]
        break;
 8001850:	e008      	b.n	8001864 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001856:	61bb      	str	r3, [r7, #24]
        break;
 8001858:	e004      	b.n	8001864 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	77bb      	strb	r3, [r7, #30]
        break;
 8001862:	bf00      	nop
    }

    if (pclk != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d018      	beq.n	800189c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	085a      	lsrs	r2, r3, #1
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	441a      	add	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	d908      	bls.n	8001898 <UART_SetConfig+0x38c>
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188c:	d204      	bcs.n	8001898 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	e001      	b.n	800189c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80018a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	007a1200 	.word	0x007a1200

080018b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00a      	beq.n	80018e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00a      	beq.n	8001926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01a      	beq.n	80019ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019b6:	d10a      	bne.n	80019ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
  }
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001a0c:	f7fe fdae 	bl	800056c <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d10e      	bne.n	8001a3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f82d 	bl	8001a8e <UART_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e023      	b.n	8001a86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d10e      	bne.n	8001a6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f817 	bl	8001a8e <UART_WaitOnFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e00d      	b.n	8001a86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b09c      	sub	sp, #112	; 0x70
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a9e:	e0a5      	b.n	8001bec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa6:	f000 80a1 	beq.w	8001bec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aaa:	f7fe fd5f 	bl	800056c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d302      	bcc.n	8001ac0 <UART_WaitOnFlagUntilTimeout+0x32>
 8001aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d13e      	bne.n	8001b3e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac8:	e853 3f00 	ldrex	r3, [r3]
 8001acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ae0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ae6:	e841 2300 	strex	r3, r2, [r1]
 8001aea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e6      	bne.n	8001ac0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3308      	adds	r3, #8
 8001af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afc:	e853 3f00 	ldrex	r3, [r3]
 8001b00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	663b      	str	r3, [r7, #96]	; 0x60
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b12:	64ba      	str	r2, [r7, #72]	; 0x48
 8001b14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b1a:	e841 2300 	strex	r3, r2, [r1]
 8001b1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e5      	bne.n	8001af2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e067      	b.n	8001c0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d04f      	beq.n	8001bec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b5a:	d147      	bne.n	8001bec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	e853 3f00 	ldrex	r3, [r3]
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8c:	e841 2300 	strex	r3, r2, [r1]
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e6      	bne.n	8001b66 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	e853 3f00 	ldrex	r3, [r3]
 8001ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001bb8:	623a      	str	r2, [r7, #32]
 8001bba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bbc:	69f9      	ldr	r1, [r7, #28]
 8001bbe:	6a3a      	ldr	r2, [r7, #32]
 8001bc0:	e841 2300 	strex	r3, r2, [r1]
 8001bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e5      	bne.n	8001b98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e010      	b.n	8001c0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	f43f af4a 	beq.w	8001aa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3770      	adds	r7, #112	; 0x70
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b095      	sub	sp, #84	; 0x54
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c26:	e853 3f00 	ldrex	r3, [r3]
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c44:	e841 2300 	strex	r3, r2, [r1]
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e6      	bne.n	8001c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3308      	adds	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	e853 3f00 	ldrex	r3, [r3]
 8001c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3308      	adds	r3, #8
 8001c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c78:	e841 2300 	strex	r3, r2, [r1]
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e5      	bne.n	8001c50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d118      	bne.n	8001cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	e853 3f00 	ldrex	r3, [r3]
 8001c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f023 0310 	bic.w	r3, r3, #16
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cae:	6979      	ldr	r1, [r7, #20]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	e841 2300 	strex	r3, r2, [r1]
 8001cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e6      	bne.n	8001c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001cd0:	bf00      	nop
 8001cd2:	3754      	adds	r7, #84	; 0x54
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff fbf0 	bl	80014e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	e853 3f00 	ldrex	r3, [r3]
 8001d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d32:	6979      	ldr	r1, [r7, #20]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	e841 2300 	strex	r3, r2, [r1]
 8001d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e6      	bne.n	8001d10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2220      	movs	r2, #32
 8001d46:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fbbc 	bl	80014cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <__libc_init_array>:
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	4d0d      	ldr	r5, [pc, #52]	; (8001da8 <__libc_init_array+0x38>)
 8001d74:	4c0d      	ldr	r4, [pc, #52]	; (8001dac <__libc_init_array+0x3c>)
 8001d76:	1b64      	subs	r4, r4, r5
 8001d78:	10a4      	asrs	r4, r4, #2
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	42a6      	cmp	r6, r4
 8001d7e:	d109      	bne.n	8001d94 <__libc_init_array+0x24>
 8001d80:	4d0b      	ldr	r5, [pc, #44]	; (8001db0 <__libc_init_array+0x40>)
 8001d82:	4c0c      	ldr	r4, [pc, #48]	; (8001db4 <__libc_init_array+0x44>)
 8001d84:	f000 f818 	bl	8001db8 <_init>
 8001d88:	1b64      	subs	r4, r4, r5
 8001d8a:	10a4      	asrs	r4, r4, #2
 8001d8c:	2600      	movs	r6, #0
 8001d8e:	42a6      	cmp	r6, r4
 8001d90:	d105      	bne.n	8001d9e <__libc_init_array+0x2e>
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d98:	4798      	blx	r3
 8001d9a:	3601      	adds	r6, #1
 8001d9c:	e7ee      	b.n	8001d7c <__libc_init_array+0xc>
 8001d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da2:	4798      	blx	r3
 8001da4:	3601      	adds	r6, #1
 8001da6:	e7f2      	b.n	8001d8e <__libc_init_array+0x1e>
 8001da8:	08001e34 	.word	0x08001e34
 8001dac:	08001e34 	.word	0x08001e34
 8001db0:	08001e34 	.word	0x08001e34
 8001db4:	08001e38 	.word	0x08001e38

08001db8 <_init>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	bf00      	nop
 8001dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dbe:	bc08      	pop	{r3}
 8001dc0:	469e      	mov	lr, r3
 8001dc2:	4770      	bx	lr

08001dc4 <_fini>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	bf00      	nop
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr
