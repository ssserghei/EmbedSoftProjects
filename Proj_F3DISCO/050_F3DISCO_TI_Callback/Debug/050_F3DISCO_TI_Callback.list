
050_F3DISCO_TI_Callback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002018  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080021a0  080021a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e8  080021e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080021e8  080021e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021e8  080021e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080021f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000010c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001765  00000000  00000000  0002a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0002bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2d4  00000000  00000000  0002c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f6a  00000000  00000000  000497cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b04e7  00000000  00000000  00053736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00103c1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ab0  00000000  00000000  00103c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002188 	.word	0x08002188

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002188 	.word	0x08002188

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler (void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001dc:	f000 f970 	bl	80004c0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001e0:	f000 fa9f 	bl	8000722 <HAL_SYSTICK_IRQHandler>

}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <USART2_IRQHandler>:


void USART2_IRQHandler (void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <USART2_IRQHandler+0x10>)
 80001ee:	f000 fe81 	bl	8000ef4 <HAL_UART_IRQHandler>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000002c 	.word	0x2000002c

080001fc <main>:
/*************************MAIN************************************/
uint8_t data_buffer[100];
uint8_t recvd_data;
uint8_t count=0;
uint8_t reception_complete=FALSE;
int main (void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0

	HAL_Init();
 8000202:	f000 f90f 	bl	8000424 <HAL_Init>
	SystemClockConfig();
 8000206:	f000 f825 	bl	8000254 <SystemClockConfig>
	UART2_Init();
 800020a:	f000 f82b 	bl	8000264 <UART2_Init>

	uint16_t len_of_data=strlen(user_data);
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <main+0x48>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ffd8 	bl	80001c8 <strlen>
 8000218:	4603      	mov	r3, r0
 800021a:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY);
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <main+0x48>)
 800021e:	6819      	ldr	r1, [r3, #0]
 8000220:	88fa      	ldrh	r2, [r7, #6]
 8000222:	f04f 33ff 	mov.w	r3, #4294967295
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <main+0x4c>)
 8000228:	f000 fd82 	bl	8000d30 <HAL_UART_Transmit>

	while(reception_complete != TRUE)
 800022c:	e004      	b.n	8000238 <main+0x3c>
	{
		HAL_UART_Receive_IT(&huart2, &recvd_data, 1);
 800022e:	2201      	movs	r2, #1
 8000230:	4906      	ldr	r1, [pc, #24]	; (800024c <main+0x50>)
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <main+0x4c>)
 8000234:	f000 fe10 	bl	8000e58 <HAL_UART_Receive_IT>
	while(reception_complete != TRUE)
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <main+0x54>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d1f6      	bne.n	800022e <main+0x32>
	}

	while(1);
 8000240:	e7fe      	b.n	8000240 <main+0x44>
 8000242:	bf00      	nop
 8000244:	20000000 	.word	0x20000000
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000114 	.word	0x20000114
 8000250:	20000116 	.word	0x20000116

08000254 <SystemClockConfig>:

	return 0;
}//END MAIN


void SystemClockConfig(void){
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0

}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
	...

08000264 <UART2_Init>:

void UART2_Init(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

	huart2.Instance=USART2;						//
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <UART2_Init+0x44>)
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <UART2_Init+0x48>)
 800026c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate=115200;				//
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <UART2_Init+0x44>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength=UART_WORDLENGTH_8B;	//
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <UART2_Init+0x44>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits=UART_STOPBITS_1;		//
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <UART2_Init+0x44>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity=UART_PARITY_NONE;		//
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <UART2_Init+0x44>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl=UART_HWCONTROL_NONE;	//
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <UART2_Init+0x44>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode=UART_MODE_TX_RX;			//
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <UART2_Init+0x44>)
 8000290:	220c      	movs	r2, #12
 8000292:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart2) !=HAL_OK){
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <UART2_Init+0x44>)
 8000296:	f000 fcfd 	bl	8000c94 <HAL_UART_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 80002a0:	f000 f83c 	bl	800031c <Error_handler>
	}
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000002c 	.word	0x2000002c
 80002ac:	40004400 	.word	0x40004400

080002b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	if(recvd_data=='\r')
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <HAL_UART_RxCpltCallback+0x5c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b0d      	cmp	r3, #13
 80002be:	d116      	bne.n	80002ee <HAL_UART_RxCpltCallback+0x3e>
	{
		reception_complete=TRUE;
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <HAL_UART_RxCpltCallback+0x60>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	701a      	strb	r2, [r3, #0]
		data_buffer[count++]='\r';
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <HAL_UART_RxCpltCallback+0x64>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	1c5a      	adds	r2, r3, #1
 80002cc:	b2d1      	uxtb	r1, r2
 80002ce:	4a11      	ldr	r2, [pc, #68]	; (8000314 <HAL_UART_RxCpltCallback+0x64>)
 80002d0:	7011      	strb	r1, [r2, #0]
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <HAL_UART_RxCpltCallback+0x68>)
 80002d6:	210d      	movs	r1, #13
 80002d8:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(huart, data_buffer, count, HAL_MAX_DELAY);
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <HAL_UART_RxCpltCallback+0x64>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	b29a      	uxth	r2, r3
 80002e0:	f04f 33ff 	mov.w	r3, #4294967295
 80002e4:	490c      	ldr	r1, [pc, #48]	; (8000318 <HAL_UART_RxCpltCallback+0x68>)
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	f000 fd22 	bl	8000d30 <HAL_UART_Transmit>
	}
	else
	{
	data_buffer[count++]=recvd_data;
	}
}
 80002ec:	e00a      	b.n	8000304 <HAL_UART_RxCpltCallback+0x54>
	data_buffer[count++]=recvd_data;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HAL_UART_RxCpltCallback+0x64>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	b2d1      	uxtb	r1, r2
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <HAL_UART_RxCpltCallback+0x64>)
 80002f8:	7011      	strb	r1, [r2, #0]
 80002fa:	461a      	mov	r2, r3
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <HAL_UART_RxCpltCallback+0x5c>)
 80002fe:	7819      	ldrb	r1, [r3, #0]
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <HAL_UART_RxCpltCallback+0x68>)
 8000302:	5499      	strb	r1, [r3, r2]
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000114 	.word	0x20000114
 8000310:	20000116 	.word	0x20000116
 8000314:	20000115 	.word	0x20000115
 8000318:	200000b0 	.word	0x200000b0

0800031c <Error_handler>:
		data=data -('a'-'A');
	}
		return data;
}

void Error_handler(void){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	while(1);
 8000320:	e7fe      	b.n	8000320 <Error_handler+0x4>
	...

08000324 <HAL_UART_MspInit>:
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);

}


void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000324:	b580      	push	{r7, lr}
 8000326:	b08a      	sub	sp, #40	; 0x28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <HAL_UART_MspInit+0x84>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <HAL_UART_MspInit+0x84>)
 8000332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000336:	61d3      	str	r3, [r2, #28]
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <HAL_UART_MspInit+0x84>)
 800033a:	69db      	ldr	r3, [r3, #28]
 800033c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000340:	613b      	str	r3, [r7, #16]
 8000342:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <HAL_UART_MspInit+0x84>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <HAL_UART_MspInit+0x84>)
 800034a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034e:	6153      	str	r3, [r2, #20]
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <HAL_UART_MspInit+0x84>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configurations
	gpio_uart.Pin=GPIO_PIN_2;
 800035c:	2304      	movs	r3, #4
 800035e:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode=GPIO_MODE_AF_PP;
 8000360:	2302      	movs	r3, #2
 8000362:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull=GPIO_PULLUP;
 8000364:	2301      	movs	r3, #1
 8000366:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed=GPIO_SPEED_FREQ_LOW;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate=GPIO_AF7_USART2;	//UART2_TX
 800036c:	2307      	movs	r3, #7
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	4619      	mov	r1, r3
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037a:	f000 fa57 	bl	800082c <HAL_GPIO_Init>

	//nu trebuie de scrie restul setarilor dearece ele sint fixate in structura
	gpio_uart.Pin=GPIO_PIN_3;		//UART2_RX
 800037e:	2308      	movs	r3, #8
 8000380:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f000 fa4e 	bl	800082c <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000390:	2026      	movs	r0, #38	; 0x26
 8000392:	f000 f9ac 	bl	80006ee <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	210f      	movs	r1, #15
 800039a:	2026      	movs	r0, #38	; 0x26
 800039c:	f000 f98b 	bl	80006b6 <HAL_NVIC_SetPriority>

}
 80003a0:	bf00      	nop
 80003a2:	3728      	adds	r7, #40	; 0x28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000

080003ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SystemInit+0x20>)
 80003b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <SystemInit+0x20>)
 80003b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000ed00 	.word	0xe000ed00

080003d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000408 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490e      	ldr	r1, [pc, #56]	; (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0b      	ldr	r4, [pc, #44]	; (800041c <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003fa:	f7ff ffd7 	bl	80003ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003fe:	f001 fe9f 	bl	8002140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000402:	f7ff fefb 	bl	80001fc <main>

08000406 <LoopForever>:

LoopForever:
    b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000408:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000414:	080021f0 	.word	0x080021f0
  ldr r2, =_sbss
 8000418:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800041c:	2000011c 	.word	0x2000011c

08000420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC1_2_IRQHandler>
	...

08000424 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <HAL_Init+0x28>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a07      	ldr	r2, [pc, #28]	; (800044c <HAL_Init+0x28>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000434:	2003      	movs	r0, #3
 8000436:	f000 f933 	bl	80006a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800043a:	2000      	movs	r0, #0
 800043c:	f000 f810 	bl	8000460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000440:	f000 f806 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000444:	2300      	movs	r3, #0
}
 8000446:	4618      	mov	r0, r3
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40022000 	.word	0x40022000

08000450 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
	...

08000460 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_InitTick+0x54>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_InitTick+0x58>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	4619      	mov	r1, r3
 8000472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000476:	fbb3 f3f1 	udiv	r3, r3, r1
 800047a:	fbb2 f3f3 	udiv	r3, r2, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f943 	bl	800070a <HAL_SYSTICK_Config>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800048a:	2301      	movs	r3, #1
 800048c:	e00e      	b.n	80004ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b0f      	cmp	r3, #15
 8000492:	d80a      	bhi.n	80004aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000494:	2200      	movs	r2, #0
 8000496:	6879      	ldr	r1, [r7, #4]
 8000498:	f04f 30ff 	mov.w	r0, #4294967295
 800049c:	f000 f90b 	bl	80006b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004a0:	4a06      	ldr	r2, [pc, #24]	; (80004bc <HAL_InitTick+0x5c>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004a6:	2300      	movs	r3, #0
 80004a8:	e000      	b.n	80004ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000004 	.word	0x20000004
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	20000008 	.word	0x20000008

080004c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_IncTick+0x20>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_IncTick+0x24>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4413      	add	r3, r2
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_IncTick+0x24>)
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	2000000c 	.word	0x2000000c
 80004e4:	20000118 	.word	0x20000118

080004e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <HAL_GetTick+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000118 	.word	0x20000118

08000500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800052c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000532:	4a04      	ldr	r2, [pc, #16]	; (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	60d3      	str	r3, [r2, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <__NVIC_GetPriorityGrouping+0x18>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	f003 0307 	and.w	r3, r3, #7
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	db0b      	blt.n	800058e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f003 021f 	and.w	r2, r3, #31
 800057c:	4907      	ldr	r1, [pc, #28]	; (800059c <__NVIC_EnableIRQ+0x38>)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	095b      	lsrs	r3, r3, #5
 8000584:	2001      	movs	r0, #1
 8000586:	fa00 f202 	lsl.w	r2, r0, r2
 800058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000e100 	.word	0xe000e100

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	490c      	ldr	r1, [pc, #48]	; (80005ec <__NVIC_SetPriority+0x4c>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	0112      	lsls	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c8:	e00a      	b.n	80005e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <__NVIC_SetPriority+0x50>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	3b04      	subs	r3, #4
 80005d8:	0112      	lsls	r2, r2, #4
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	440b      	add	r3, r1
 80005de:	761a      	strb	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	2b04      	cmp	r3, #4
 8000610:	bf28      	it	cs
 8000612:	2304      	movcs	r3, #4
 8000614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3304      	adds	r3, #4
 800061a:	2b06      	cmp	r3, #6
 800061c:	d902      	bls.n	8000624 <NVIC_EncodePriority+0x30>
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3b03      	subs	r3, #3
 8000622:	e000      	b.n	8000626 <NVIC_EncodePriority+0x32>
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 32ff 	mov.w	r2, #4294967295
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43da      	mvns	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	401a      	ands	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063c:	f04f 31ff 	mov.w	r1, #4294967295
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43d9      	mvns	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	4313      	orrs	r3, r2
         );
}
 800064e:	4618      	mov	r0, r3
 8000650:	3724      	adds	r7, #36	; 0x24
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800066c:	d301      	bcc.n	8000672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2301      	movs	r3, #1
 8000670:	e00f      	b.n	8000692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SysTick_Config+0x40>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3b01      	subs	r3, #1
 8000678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800067a:	210f      	movs	r1, #15
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f7ff ff8e 	bl	80005a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SysTick_Config+0x40>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SysTick_Config+0x40>)
 800068c:	2207      	movs	r2, #7
 800068e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000e010 	.word	0xe000e010

080006a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff29 	bl	8000500 <__NVIC_SetPriorityGrouping>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006c8:	f7ff ff3e 	bl	8000548 <__NVIC_GetPriorityGrouping>
 80006cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff8e 	bl	80005f4 <NVIC_EncodePriority>
 80006d8:	4602      	mov	r2, r0
 80006da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff5d 	bl	80005a0 <__NVIC_SetPriority>
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff31 	bl	8000564 <__NVIC_EnableIRQ>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ffa2 	bl	800065c <SysTick_Config>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000726:	f000 f802 	bl	800072e <HAL_SYSTICK_Callback>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800074a:	2b02      	cmp	r3, #2
 800074c:	d008      	beq.n	8000760 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2204      	movs	r2, #4
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e020      	b.n	80007a2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 020e 	bic.w	r2, r2, #14
 800076e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f022 0201 	bic.w	r2, r2, #1
 800077e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000788:	2101      	movs	r1, #1
 800078a:	fa01 f202 	lsl.w	r2, r1, r2
 800078e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d005      	beq.n	80007d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2204      	movs	r2, #4
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e027      	b.n	8000820 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f022 020e 	bic.w	r2, r2, #14
 80007de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 0201 	bic.w	r2, r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f8:	2101      	movs	r1, #1
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	4798      	blx	r3
    } 
  }
  return status;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b480      	push	{r7}
 800082e:	b087      	sub	sp, #28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083a:	e154      	b.n	8000ae6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	2101      	movs	r1, #1
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	f000 8146 	beq.w	8000ae0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 0303 	and.w	r3, r3, #3
 800085c:	2b01      	cmp	r3, #1
 800085e:	d005      	beq.n	800086c <HAL_GPIO_Init+0x40>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 0303 	and.w	r3, r3, #3
 8000868:	2b02      	cmp	r3, #2
 800086a:	d130      	bne.n	80008ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a2:	2201      	movs	r2, #1
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	f003 0201 	and.w	r2, r3, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d017      	beq.n	800090a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	2203      	movs	r2, #3
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	2b02      	cmp	r3, #2
 8000914:	d123      	bne.n	800095e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	691a      	ldr	r2, [r3, #16]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	6939      	ldr	r1, [r7, #16]
 800095a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0203 	and.w	r2, r3, #3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 80a0 	beq.w	8000ae0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a0:	4b58      	ldr	r3, [pc, #352]	; (8000b04 <HAL_GPIO_Init+0x2d8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a57      	ldr	r2, [pc, #348]	; (8000b04 <HAL_GPIO_Init+0x2d8>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <HAL_GPIO_Init+0x2d8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b8:	4a53      	ldr	r2, [pc, #332]	; (8000b08 <HAL_GPIO_Init+0x2dc>)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009e2:	d019      	beq.n	8000a18 <HAL_GPIO_Init+0x1ec>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a49      	ldr	r2, [pc, #292]	; (8000b0c <HAL_GPIO_Init+0x2e0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <HAL_GPIO_Init+0x1e8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a48      	ldr	r2, [pc, #288]	; (8000b10 <HAL_GPIO_Init+0x2e4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d00d      	beq.n	8000a10 <HAL_GPIO_Init+0x1e4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a47      	ldr	r2, [pc, #284]	; (8000b14 <HAL_GPIO_Init+0x2e8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d007      	beq.n	8000a0c <HAL_GPIO_Init+0x1e0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <HAL_GPIO_Init+0x2ec>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d101      	bne.n	8000a08 <HAL_GPIO_Init+0x1dc>
 8000a04:	2304      	movs	r3, #4
 8000a06:	e008      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a08:	2305      	movs	r3, #5
 8000a0a:	e006      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	e004      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_Init+0x1ee>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	f002 0203 	and.w	r2, r2, #3
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a2a:	4937      	ldr	r1, [pc, #220]	; (8000b08 <HAL_GPIO_Init+0x2dc>)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a38:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a5c:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a86:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_GPIO_Init+0x2f0>)
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa22 f303 	lsr.w	r3, r2, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f47f aea3 	bne.w	800083c <HAL_GPIO_Init+0x10>
  }
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	48000400 	.word	0x48000400
 8000b10:	48000800 	.word	0x48000800
 8000b14:	48000c00 	.word	0x48000c00
 8000b18:	48001000 	.word	0x48001000
 8000b1c:	40010400 	.word	0x40010400

08000b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b08b      	sub	sp, #44	; 0x2c
 8000b24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d002      	beq.n	8000b50 <HAL_RCC_GetSysClockFreq+0x30>
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d003      	beq.n	8000b56 <HAL_RCC_GetSysClockFreq+0x36>
 8000b4e:	e03c      	b.n	8000bca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000b52:	623b      	str	r3, [r7, #32]
      break;
 8000b54:	e03c      	b.n	8000bd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b60:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	fa92 f2a2 	rbit	r2, r2
 8000b68:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000b76:	5cd3      	ldrb	r3, [r2, r3]
 8000b78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	220f      	movs	r2, #15
 8000b84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	fa92 f2a2 	rbit	r2, r2
 8000b8c:	60fa      	str	r2, [r7, #12]
  return result;
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	40d3      	lsrs	r3, r2
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_RCC_GetSysClockFreq+0xcc>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d008      	beq.n	8000bba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb8:	e004      	b.n	8000bc4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	623b      	str	r3, [r7, #32]
      break;
 8000bc8:	e002      	b.n	8000bd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000bcc:	623b      	str	r3, [r7, #32]
      break;
 8000bce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	372c      	adds	r7, #44	; 0x2c
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	007a1200 	.word	0x007a1200
 8000be8:	080021c8 	.word	0x080021c8
 8000bec:	080021d8 	.word	0x080021d8
 8000bf0:	003d0900 	.word	0x003d0900

08000bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000c12:	f7ff ffef 	bl	8000bf4 <HAL_RCC_GetHCLKFreq>
 8000c16:	4601      	mov	r1, r0
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	fa92 f2a2 	rbit	r2, r2
 8000c2c:	603a      	str	r2, [r7, #0]
  return result;
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	40d3      	lsrs	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	080021c0 	.word	0x080021c0

08000c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c56:	f7ff ffcd 	bl	8000bf4 <HAL_RCC_GetHCLKFreq>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	fa92 f2a2 	rbit	r2, r2
 8000c70:	603a      	str	r2, [r7, #0]
  return result;
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8000c7e:	5cd3      	ldrb	r3, [r2, r3]
 8000c80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	080021c0 	.word	0x080021c0

08000c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e040      	b.n	8000d28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d106      	bne.n	8000cbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fb34 	bl	8000324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2224      	movs	r2, #36	; 0x24
 8000cc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0201 	bic.w	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 fc0c 	bl	80014f0 <UART_SetConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e022      	b.n	8000d28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 fdd6 	bl	800189c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 fe5d 	bl	80019e0 <UART_CheckIdleState>
 8000d26:	4603      	mov	r3, r0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	f040 8082 	bne.w	8000e4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <HAL_UART_Transmit+0x26>
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e07a      	b.n	8000e50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d101      	bne.n	8000d68 <HAL_UART_Transmit+0x38>
 8000d64:	2302      	movs	r3, #2
 8000d66:	e073      	b.n	8000e50 <HAL_UART_Transmit+0x120>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2221      	movs	r2, #33	; 0x21
 8000d7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000d7e:	f7ff fbb3 	bl	80004e8 <HAL_GetTick>
 8000d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d9c:	d108      	bne.n	8000db0 <HAL_UART_Transmit+0x80>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d104      	bne.n	8000db0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	e003      	b.n	8000db8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8000dc0:	e02d      	b.n	8000e1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 fe50 	bl	8001a72 <UART_WaitOnFlagUntilTimeout>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e039      	b.n	8000e50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10b      	bne.n	8000dfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dee:	b292      	uxth	r2, r2
 8000df0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	3302      	adds	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	e008      	b.n	8000e0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	b292      	uxth	r2, r2
 8000e04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	3b01      	subs	r3, #1
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1cb      	bne.n	8000dc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 fe1c 	bl	8001a72 <UART_WaitOnFlagUntilTimeout>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e005      	b.n	8000e50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2220      	movs	r2, #32
 8000e48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8000e4e:	2302      	movs	r3, #2
  }
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	4613      	mov	r3, r2
 8000e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e6a:	2b20      	cmp	r3, #32
 8000e6c:	d13d      	bne.n	8000eea <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <HAL_UART_Receive_IT+0x22>
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e036      	b.n	8000eec <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_UART_Receive_IT+0x34>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e02f      	b.n	8000eec <HAL_UART_Receive_IT+0x94>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2200      	movs	r2, #0
 8000e98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d018      	beq.n	8000eda <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	e853 3f00 	ldrex	r3, [r3]
 8000eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000eca:	69f9      	ldr	r1, [r7, #28]
 8000ecc:	6a3a      	ldr	r2, [r7, #32]
 8000ece:	e841 2300 	strex	r3, r2, [r1]
 8000ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1e6      	bne.n	8000ea8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	461a      	mov	r2, r3
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 fe8b 	bl	8001bfc <UART_Start_Receive_IT>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	e000      	b.n	8000eec <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8000eea:	2302      	movs	r3, #2
  }
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ba      	sub	sp, #232	; 0xe8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000f1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000f1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8000f22:	4013      	ands	r3, r2
 8000f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8000f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d115      	bne.n	8000f5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8000f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f34:	f003 0320 	and.w	r3, r3, #32
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00f      	beq.n	8000f5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 82a3 	beq.w	8001498 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	4798      	blx	r3
      }
      return;
 8000f5a:	e29d      	b.n	8001498 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8000f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 8117 	beq.w	8001194 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8000f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8000f72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f76:	4b85      	ldr	r3, [pc, #532]	; (800118c <HAL_UART_IRQHandler+0x298>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 810a 	beq.w	8001194 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8000f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d011      	beq.n	8000fb0 <HAL_UART_IRQHandler+0xbc>
 8000f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00b      	beq.n	8000fb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa6:	f043 0201 	orr.w	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d011      	beq.n	8000fe0 <HAL_UART_IRQHandler+0xec>
 8000fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00b      	beq.n	8000fe0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd6:	f043 0204 	orr.w	r2, r3, #4
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d011      	beq.n	8001010 <HAL_UART_IRQHandler+0x11c>
 8000fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00b      	beq.n	8001010 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001006:	f043 0202 	orr.w	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d017      	beq.n	800104c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800101c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001020:	f003 0320 	and.w	r3, r3, #32
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800102c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2208      	movs	r2, #8
 800103a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001042:	f043 0208 	orr.w	r2, r3, #8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800104c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001054:	2b00      	cmp	r3, #0
 8001056:	d012      	beq.n	800107e <HAL_UART_IRQHandler+0x18a>
 8001058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800105c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001074:	f043 0220 	orr.w	r2, r3, #32
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8209 	beq.w	800149c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800108a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00d      	beq.n	80010b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c6:	2b40      	cmp	r3, #64	; 0x40
 80010c8:	d005      	beq.n	80010d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80010ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d04f      	beq.n	8001176 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fe28 	bl	8001d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e6:	2b40      	cmp	r3, #64	; 0x40
 80010e8:	d141      	bne.n	800116e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3308      	adds	r3, #8
 80010f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010f8:	e853 3f00 	ldrex	r3, [r3]
 80010fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3308      	adds	r3, #8
 8001112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800111a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800111e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001126:	e841 2300 	strex	r3, r2, [r1]
 800112a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800112e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1d9      	bne.n	80010ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113a:	2b00      	cmp	r3, #0
 800113c:	d013      	beq.n	8001166 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_UART_IRQHandler+0x29c>)
 8001144:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fb2f 	bl	80007ae <HAL_DMA_Abort_IT>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d017      	beq.n	8001186 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8001160:	4610      	mov	r0, r2
 8001162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001164:	e00f      	b.n	8001186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f9ac 	bl	80014c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800116c:	e00b      	b.n	8001186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f9a8 	bl	80014c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001174:	e007      	b.n	8001186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f9a4 	bl	80014c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8001184:	e18a      	b.n	800149c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001186:	bf00      	nop
    return;
 8001188:	e188      	b.n	800149c <HAL_UART_IRQHandler+0x5a8>
 800118a:	bf00      	nop
 800118c:	04000120 	.word	0x04000120
 8001190:	08001df3 	.word	0x08001df3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	2b01      	cmp	r3, #1
 800119a:	f040 8143 	bne.w	8001424 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800119e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 813c 	beq.w	8001424 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80011ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8135 	beq.w	8001424 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2210      	movs	r2, #16
 80011c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	f040 80b1 	bne.w	8001334 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80011de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 815c 	beq.w	80014a0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80011ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80011f2:	429a      	cmp	r2, r3
 80011f4:	f080 8154 	bcs.w	80014a0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80011fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	2b20      	cmp	r3, #32
 800120a:	f000 8085 	beq.w	8001318 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800121a:	e853 3f00 	ldrex	r3, [r3]
 800121e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800122a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001238:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800123c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001240:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001244:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001248:	e841 2300 	strex	r3, r2, [r1]
 800124c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1da      	bne.n	800120e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3308      	adds	r3, #8
 800125e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001262:	e853 3f00 	ldrex	r3, [r3]
 8001266:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3308      	adds	r3, #8
 8001278:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800127c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001280:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001282:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001284:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001288:	e841 2300 	strex	r3, r2, [r1]
 800128c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800128e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e1      	bne.n	8001258 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3308      	adds	r3, #8
 800129a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800129c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800129e:	e853 3f00 	ldrex	r3, [r3]
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80012a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3308      	adds	r3, #8
 80012b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80012b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80012be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80012c0:	e841 2300 	strex	r3, r2, [r1]
 80012c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80012c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e3      	bne.n	8001294 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2220      	movs	r2, #32
 80012d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e0:	e853 3f00 	ldrex	r3, [r3]
 80012e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80012e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e8:	f023 0310 	bic.w	r3, r3, #16
 80012ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80012fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001302:	e841 2300 	strex	r3, r2, [r1]
 8001306:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1e4      	bne.n	80012d8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fa12 	bl	800073c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001324:	b29b      	uxth	r3, r3
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	b29b      	uxth	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f8d3 	bl	80014d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001332:	e0b5      	b.n	80014a0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001340:	b29b      	uxth	r3, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800134e:	b29b      	uxth	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80a7 	beq.w	80014a4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8001356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80a2 	beq.w	80014a4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001368:	e853 3f00 	ldrex	r3, [r3]
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
 8001384:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800138a:	e841 2300 	strex	r3, r2, [r1]
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1e4      	bne.n	8001360 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3308      	adds	r3, #8
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	e853 3f00 	ldrex	r3, [r3]
 80013a4:	623b      	str	r3, [r7, #32]
   return(result);
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3308      	adds	r3, #8
 80013b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013ba:	633a      	str	r2, [r7, #48]	; 0x30
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c2:	e841 2300 	strex	r3, r2, [r1]
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e3      	bne.n	8001396 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2220      	movs	r2, #32
 80013d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	e853 3f00 	ldrex	r3, [r3]
 80013ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f023 0310 	bic.w	r3, r3, #16
 80013f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	e841 2300 	strex	r3, r2, [r1]
 800140e:	617b      	str	r3, [r7, #20]
   return(result);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1e4      	bne.n	80013e0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f85b 	bl	80014d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001422:	e03f      	b.n	80014a4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00e      	beq.n	800144e <HAL_UART_IRQHandler+0x55a>
 8001430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fe6f 	bl	800212a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800144c:	e02d      	b.n	80014aa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800144e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00e      	beq.n	8001478 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800145a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01c      	beq.n	80014a8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
    }
    return;
 8001476:	e017      	b.n	80014a8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800147c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d012      	beq.n	80014aa <HAL_UART_IRQHandler+0x5b6>
 8001484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fcc4 	bl	8001e1e <UART_EndTransmit_IT>
    return;
 8001496:	e008      	b.n	80014aa <HAL_UART_IRQHandler+0x5b6>
      return;
 8001498:	bf00      	nop
 800149a:	e006      	b.n	80014aa <HAL_UART_IRQHandler+0x5b6>
    return;
 800149c:	bf00      	nop
 800149e:	e004      	b.n	80014aa <HAL_UART_IRQHandler+0x5b6>
      return;
 80014a0:	bf00      	nop
 80014a2:	e002      	b.n	80014aa <HAL_UART_IRQHandler+0x5b6>
      return;
 80014a4:	bf00      	nop
 80014a6:	e000      	b.n	80014aa <HAL_UART_IRQHandler+0x5b6>
    return;
 80014a8:	bf00      	nop
  }

}
 80014aa:	37e8      	adds	r7, #232	; 0xe8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800151e:	f023 030c 	bic.w	r3, r3, #12
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	6979      	ldr	r1, [r7, #20]
 8001528:	430b      	orrs	r3, r1
 800152a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	4313      	orrs	r3, r2
 8001550:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4aa8      	ldr	r2, [pc, #672]	; (800180c <UART_SetConfig+0x31c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d120      	bne.n	80015b2 <UART_SetConfig+0xc2>
 8001570:	4ba7      	ldr	r3, [pc, #668]	; (8001810 <UART_SetConfig+0x320>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b03      	cmp	r3, #3
 800157a:	d817      	bhi.n	80015ac <UART_SetConfig+0xbc>
 800157c:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <UART_SetConfig+0x94>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	08001595 	.word	0x08001595
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015a7 	.word	0x080015a7
 8001590:	0800159b 	.word	0x0800159b
 8001594:	2301      	movs	r3, #1
 8001596:	77fb      	strb	r3, [r7, #31]
 8001598:	e0b5      	b.n	8001706 <UART_SetConfig+0x216>
 800159a:	2302      	movs	r3, #2
 800159c:	77fb      	strb	r3, [r7, #31]
 800159e:	e0b2      	b.n	8001706 <UART_SetConfig+0x216>
 80015a0:	2304      	movs	r3, #4
 80015a2:	77fb      	strb	r3, [r7, #31]
 80015a4:	e0af      	b.n	8001706 <UART_SetConfig+0x216>
 80015a6:	2308      	movs	r3, #8
 80015a8:	77fb      	strb	r3, [r7, #31]
 80015aa:	e0ac      	b.n	8001706 <UART_SetConfig+0x216>
 80015ac:	2310      	movs	r3, #16
 80015ae:	77fb      	strb	r3, [r7, #31]
 80015b0:	e0a9      	b.n	8001706 <UART_SetConfig+0x216>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a97      	ldr	r2, [pc, #604]	; (8001814 <UART_SetConfig+0x324>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d124      	bne.n	8001606 <UART_SetConfig+0x116>
 80015bc:	4b94      	ldr	r3, [pc, #592]	; (8001810 <UART_SetConfig+0x320>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015c8:	d011      	beq.n	80015ee <UART_SetConfig+0xfe>
 80015ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015ce:	d817      	bhi.n	8001600 <UART_SetConfig+0x110>
 80015d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d4:	d011      	beq.n	80015fa <UART_SetConfig+0x10a>
 80015d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015da:	d811      	bhi.n	8001600 <UART_SetConfig+0x110>
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <UART_SetConfig+0xf8>
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d006      	beq.n	80015f4 <UART_SetConfig+0x104>
 80015e6:	e00b      	b.n	8001600 <UART_SetConfig+0x110>
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
 80015ec:	e08b      	b.n	8001706 <UART_SetConfig+0x216>
 80015ee:	2302      	movs	r3, #2
 80015f0:	77fb      	strb	r3, [r7, #31]
 80015f2:	e088      	b.n	8001706 <UART_SetConfig+0x216>
 80015f4:	2304      	movs	r3, #4
 80015f6:	77fb      	strb	r3, [r7, #31]
 80015f8:	e085      	b.n	8001706 <UART_SetConfig+0x216>
 80015fa:	2308      	movs	r3, #8
 80015fc:	77fb      	strb	r3, [r7, #31]
 80015fe:	e082      	b.n	8001706 <UART_SetConfig+0x216>
 8001600:	2310      	movs	r3, #16
 8001602:	77fb      	strb	r3, [r7, #31]
 8001604:	e07f      	b.n	8001706 <UART_SetConfig+0x216>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a83      	ldr	r2, [pc, #524]	; (8001818 <UART_SetConfig+0x328>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d124      	bne.n	800165a <UART_SetConfig+0x16a>
 8001610:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <UART_SetConfig+0x320>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001618:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800161c:	d011      	beq.n	8001642 <UART_SetConfig+0x152>
 800161e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001622:	d817      	bhi.n	8001654 <UART_SetConfig+0x164>
 8001624:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001628:	d011      	beq.n	800164e <UART_SetConfig+0x15e>
 800162a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800162e:	d811      	bhi.n	8001654 <UART_SetConfig+0x164>
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <UART_SetConfig+0x14c>
 8001634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001638:	d006      	beq.n	8001648 <UART_SetConfig+0x158>
 800163a:	e00b      	b.n	8001654 <UART_SetConfig+0x164>
 800163c:	2300      	movs	r3, #0
 800163e:	77fb      	strb	r3, [r7, #31]
 8001640:	e061      	b.n	8001706 <UART_SetConfig+0x216>
 8001642:	2302      	movs	r3, #2
 8001644:	77fb      	strb	r3, [r7, #31]
 8001646:	e05e      	b.n	8001706 <UART_SetConfig+0x216>
 8001648:	2304      	movs	r3, #4
 800164a:	77fb      	strb	r3, [r7, #31]
 800164c:	e05b      	b.n	8001706 <UART_SetConfig+0x216>
 800164e:	2308      	movs	r3, #8
 8001650:	77fb      	strb	r3, [r7, #31]
 8001652:	e058      	b.n	8001706 <UART_SetConfig+0x216>
 8001654:	2310      	movs	r3, #16
 8001656:	77fb      	strb	r3, [r7, #31]
 8001658:	e055      	b.n	8001706 <UART_SetConfig+0x216>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6f      	ldr	r2, [pc, #444]	; (800181c <UART_SetConfig+0x32c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d124      	bne.n	80016ae <UART_SetConfig+0x1be>
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <UART_SetConfig+0x320>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800166c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001670:	d011      	beq.n	8001696 <UART_SetConfig+0x1a6>
 8001672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001676:	d817      	bhi.n	80016a8 <UART_SetConfig+0x1b8>
 8001678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800167c:	d011      	beq.n	80016a2 <UART_SetConfig+0x1b2>
 800167e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001682:	d811      	bhi.n	80016a8 <UART_SetConfig+0x1b8>
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <UART_SetConfig+0x1a0>
 8001688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800168c:	d006      	beq.n	800169c <UART_SetConfig+0x1ac>
 800168e:	e00b      	b.n	80016a8 <UART_SetConfig+0x1b8>
 8001690:	2300      	movs	r3, #0
 8001692:	77fb      	strb	r3, [r7, #31]
 8001694:	e037      	b.n	8001706 <UART_SetConfig+0x216>
 8001696:	2302      	movs	r3, #2
 8001698:	77fb      	strb	r3, [r7, #31]
 800169a:	e034      	b.n	8001706 <UART_SetConfig+0x216>
 800169c:	2304      	movs	r3, #4
 800169e:	77fb      	strb	r3, [r7, #31]
 80016a0:	e031      	b.n	8001706 <UART_SetConfig+0x216>
 80016a2:	2308      	movs	r3, #8
 80016a4:	77fb      	strb	r3, [r7, #31]
 80016a6:	e02e      	b.n	8001706 <UART_SetConfig+0x216>
 80016a8:	2310      	movs	r3, #16
 80016aa:	77fb      	strb	r3, [r7, #31]
 80016ac:	e02b      	b.n	8001706 <UART_SetConfig+0x216>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a5b      	ldr	r2, [pc, #364]	; (8001820 <UART_SetConfig+0x330>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d124      	bne.n	8001702 <UART_SetConfig+0x212>
 80016b8:	4b55      	ldr	r3, [pc, #340]	; (8001810 <UART_SetConfig+0x320>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80016c4:	d011      	beq.n	80016ea <UART_SetConfig+0x1fa>
 80016c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80016ca:	d817      	bhi.n	80016fc <UART_SetConfig+0x20c>
 80016cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016d0:	d011      	beq.n	80016f6 <UART_SetConfig+0x206>
 80016d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016d6:	d811      	bhi.n	80016fc <UART_SetConfig+0x20c>
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <UART_SetConfig+0x1f4>
 80016dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016e0:	d006      	beq.n	80016f0 <UART_SetConfig+0x200>
 80016e2:	e00b      	b.n	80016fc <UART_SetConfig+0x20c>
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
 80016e8:	e00d      	b.n	8001706 <UART_SetConfig+0x216>
 80016ea:	2302      	movs	r3, #2
 80016ec:	77fb      	strb	r3, [r7, #31]
 80016ee:	e00a      	b.n	8001706 <UART_SetConfig+0x216>
 80016f0:	2304      	movs	r3, #4
 80016f2:	77fb      	strb	r3, [r7, #31]
 80016f4:	e007      	b.n	8001706 <UART_SetConfig+0x216>
 80016f6:	2308      	movs	r3, #8
 80016f8:	77fb      	strb	r3, [r7, #31]
 80016fa:	e004      	b.n	8001706 <UART_SetConfig+0x216>
 80016fc:	2310      	movs	r3, #16
 80016fe:	77fb      	strb	r3, [r7, #31]
 8001700:	e001      	b.n	8001706 <UART_SetConfig+0x216>
 8001702:	2310      	movs	r3, #16
 8001704:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800170e:	d15c      	bne.n	80017ca <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8001710:	7ffb      	ldrb	r3, [r7, #31]
 8001712:	2b08      	cmp	r3, #8
 8001714:	d827      	bhi.n	8001766 <UART_SetConfig+0x276>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <UART_SetConfig+0x22c>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001741 	.word	0x08001741
 8001720:	08001749 	.word	0x08001749
 8001724:	08001751 	.word	0x08001751
 8001728:	08001767 	.word	0x08001767
 800172c:	08001757 	.word	0x08001757
 8001730:	08001767 	.word	0x08001767
 8001734:	08001767 	.word	0x08001767
 8001738:	08001767 	.word	0x08001767
 800173c:	0800175f 	.word	0x0800175f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001740:	f7ff fa64 	bl	8000c0c <HAL_RCC_GetPCLK1Freq>
 8001744:	61b8      	str	r0, [r7, #24]
        break;
 8001746:	e013      	b.n	8001770 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001748:	f7ff fa82 	bl	8000c50 <HAL_RCC_GetPCLK2Freq>
 800174c:	61b8      	str	r0, [r7, #24]
        break;
 800174e:	e00f      	b.n	8001770 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <UART_SetConfig+0x334>)
 8001752:	61bb      	str	r3, [r7, #24]
        break;
 8001754:	e00c      	b.n	8001770 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001756:	f7ff f9e3 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 800175a:	61b8      	str	r0, [r7, #24]
        break;
 800175c:	e008      	b.n	8001770 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001762:	61bb      	str	r3, [r7, #24]
        break;
 8001764:	e004      	b.n	8001770 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	77bb      	strb	r3, [r7, #30]
        break;
 800176e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8084 	beq.w	8001880 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	005a      	lsls	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	441a      	add	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b0f      	cmp	r3, #15
 8001794:	d916      	bls.n	80017c4 <UART_SetConfig+0x2d4>
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d212      	bcs.n	80017c4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	f023 030f 	bic.w	r3, r3, #15
 80017a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	89fb      	ldrh	r3, [r7, #14]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	89fa      	ldrh	r2, [r7, #14]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	e05d      	b.n	8001880 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	77bb      	strb	r3, [r7, #30]
 80017c8:	e05a      	b.n	8001880 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d836      	bhi.n	800183e <UART_SetConfig+0x34e>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <UART_SetConfig+0x2e8>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017fd 	.word	0x080017fd
 80017dc:	08001805 	.word	0x08001805
 80017e0:	08001829 	.word	0x08001829
 80017e4:	0800183f 	.word	0x0800183f
 80017e8:	0800182f 	.word	0x0800182f
 80017ec:	0800183f 	.word	0x0800183f
 80017f0:	0800183f 	.word	0x0800183f
 80017f4:	0800183f 	.word	0x0800183f
 80017f8:	08001837 	.word	0x08001837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017fc:	f7ff fa06 	bl	8000c0c <HAL_RCC_GetPCLK1Freq>
 8001800:	61b8      	str	r0, [r7, #24]
        break;
 8001802:	e021      	b.n	8001848 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001804:	f7ff fa24 	bl	8000c50 <HAL_RCC_GetPCLK2Freq>
 8001808:	61b8      	str	r0, [r7, #24]
        break;
 800180a:	e01d      	b.n	8001848 <UART_SetConfig+0x358>
 800180c:	40013800 	.word	0x40013800
 8001810:	40021000 	.word	0x40021000
 8001814:	40004400 	.word	0x40004400
 8001818:	40004800 	.word	0x40004800
 800181c:	40004c00 	.word	0x40004c00
 8001820:	40005000 	.word	0x40005000
 8001824:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <UART_SetConfig+0x3a8>)
 800182a:	61bb      	str	r3, [r7, #24]
        break;
 800182c:	e00c      	b.n	8001848 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800182e:	f7ff f977 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 8001832:	61b8      	str	r0, [r7, #24]
        break;
 8001834:	e008      	b.n	8001848 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800183a:	61bb      	str	r3, [r7, #24]
        break;
 800183c:	e004      	b.n	8001848 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	77bb      	strb	r3, [r7, #30]
        break;
 8001846:	bf00      	nop
    }

    if (pclk != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d018      	beq.n	8001880 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	085a      	lsrs	r2, r3, #1
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	d908      	bls.n	800187c <UART_SetConfig+0x38c>
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d204      	bcs.n	800187c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	e001      	b.n	8001880 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800188c:	7fbb      	ldrb	r3, [r7, #30]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	007a1200 	.word	0x007a1200

0800189c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00a      	beq.n	800190a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00a      	beq.n	800192c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00a      	beq.n	800194e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01a      	beq.n	80019b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800199a:	d10a      	bne.n	80019b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00a      	beq.n	80019d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
  }
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80019f0:	f7fe fd7a 	bl	80004e8 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d10e      	bne.n	8001a22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f82d 	bl	8001a72 <UART_WaitOnFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e023      	b.n	8001a6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d10e      	bne.n	8001a4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f817 	bl	8001a72 <UART_WaitOnFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e00d      	b.n	8001a6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b09c      	sub	sp, #112	; 0x70
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a82:	e0a5      	b.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8a:	f000 80a1 	beq.w	8001bd0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7fe fd2b 	bl	80004e8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d302      	bcc.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x32>
 8001a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13e      	bne.n	8001b22 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aac:	e853 3f00 	ldrex	r3, [r3]
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ac4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001aca:	e841 2300 	strex	r3, r2, [r1]
 8001ace:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e6      	bne.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3308      	adds	r3, #8
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae0:	e853 3f00 	ldrex	r3, [r3]
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	663b      	str	r3, [r7, #96]	; 0x60
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3308      	adds	r3, #8
 8001af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001af6:	64ba      	str	r2, [r7, #72]	; 0x48
 8001af8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001afa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001afe:	e841 2300 	strex	r3, r2, [r1]
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1e5      	bne.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e067      	b.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d04f      	beq.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b3e:	d147      	bne.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	e853 3f00 	ldrex	r3, [r3]
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b70:	e841 2300 	strex	r3, r2, [r1]
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e6      	bne.n	8001b4a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3308      	adds	r3, #8
 8001b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	e853 3f00 	ldrex	r3, [r3]
 8001b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3308      	adds	r3, #8
 8001b9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b9c:	623a      	str	r2, [r7, #32]
 8001b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	6a3a      	ldr	r2, [r7, #32]
 8001ba4:	e841 2300 	strex	r3, r2, [r1]
 8001ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e5      	bne.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e010      	b.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	f43f af4a 	beq.w	8001a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3770      	adds	r7, #112	; 0x70
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b091      	sub	sp, #68	; 0x44
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2e:	d10e      	bne.n	8001c4e <UART_Start_Receive_IT+0x52>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <UART_Start_Receive_IT+0x48>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c42:	e01a      	b.n	8001c7a <UART_Start_Receive_IT+0x7e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c4c:	e015      	b.n	8001c7a <UART_Start_Receive_IT+0x7e>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <UART_Start_Receive_IT+0x76>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d104      	bne.n	8001c68 <UART_Start_Receive_IT+0x6c>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c66:	e008      	b.n	8001c7a <UART_Start_Receive_IT+0x7e>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	227f      	movs	r2, #127	; 0x7f
 8001c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c70:	e003      	b.n	8001c7a <UART_Start_Receive_IT+0x7e>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2222      	movs	r2, #34	; 0x22
 8001c86:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	e853 3f00 	ldrex	r3, [r3]
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb0:	e841 2300 	strex	r3, r2, [r1]
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e5      	bne.n	8001c88 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc4:	d107      	bne.n	8001cd6 <UART_Start_Receive_IT+0xda>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <UART_Start_Receive_IT+0x128>)
 8001cd2:	665a      	str	r2, [r3, #100]	; 0x64
 8001cd4:	e002      	b.n	8001cdc <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <UART_Start_Receive_IT+0x12c>)
 8001cda:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	e853 3f00 	ldrex	r3, [r3]
 8001cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d06:	69f9      	ldr	r1, [r7, #28]
 8001d08:	6a3a      	ldr	r2, [r7, #32]
 8001d0a:	e841 2300 	strex	r3, r2, [r1]
 8001d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1e6      	bne.n	8001ce4 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3744      	adds	r7, #68	; 0x44
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	08001fcf 	.word	0x08001fcf
 8001d28:	08001e73 	.word	0x08001e73

08001d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b095      	sub	sp, #84	; 0x54
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3c:	e853 3f00 	ldrex	r3, [r3]
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40
 8001d54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d5a:	e841 2300 	strex	r3, r2, [r1]
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1e6      	bne.n	8001d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	e853 3f00 	ldrex	r3, [r3]
 8001d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3308      	adds	r3, #8
 8001d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8e:	e841 2300 	strex	r3, r2, [r1]
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1e5      	bne.n	8001d66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d118      	bne.n	8001dd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	e853 3f00 	ldrex	r3, [r3]
 8001dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f023 0310 	bic.w	r3, r3, #16
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	e841 2300 	strex	r3, r2, [r1]
 8001dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e6      	bne.n	8001da2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001de6:	bf00      	nop
 8001de8:	3754      	adds	r7, #84	; 0x54
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff fb57 	bl	80014c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b088      	sub	sp, #32
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	e853 3f00 	ldrex	r3, [r3]
 8001e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	e841 2300 	strex	r3, r2, [r1]
 8001e50:	613b      	str	r3, [r7, #16]
   return(result);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e6      	bne.n	8001e26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fb23 	bl	80014b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e6a:	bf00      	nop
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b096      	sub	sp, #88	; 0x58
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001e80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e88:	2b22      	cmp	r3, #34	; 0x22
 8001e8a:	f040 8094 	bne.w	8001fb6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001e98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d177      	bne.n	8001fc6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	e853 3f00 	ldrex	r3, [r3]
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001eea:	653b      	str	r3, [r7, #80]	; 0x50
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001efa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001efc:	e841 2300 	strex	r3, r2, [r1]
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e6      	bne.n	8001ed6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3308      	adds	r3, #8
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	e853 3f00 	ldrex	r3, [r3]
 8001f16:	623b      	str	r3, [r7, #32]
   return(result);
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3308      	adds	r3, #8
 8001f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f28:	633a      	str	r2, [r7, #48]	; 0x30
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f30:	e841 2300 	strex	r3, r2, [r1]
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e5      	bne.n	8001f08 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d12e      	bne.n	8001fae <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	e853 3f00 	ldrex	r3, [r3]
 8001f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0310 	bic.w	r3, r3, #16
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f78:	69b9      	ldr	r1, [r7, #24]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	e841 2300 	strex	r3, r2, [r1]
 8001f80:	617b      	str	r3, [r7, #20]
   return(result);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e6      	bne.n	8001f56 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d103      	bne.n	8001f9e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fa96 	bl	80014d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001fac:	e00b      	b.n	8001fc6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe f97e 	bl	80002b0 <HAL_UART_RxCpltCallback>
}
 8001fb4:	e007      	b.n	8001fc6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0208 	orr.w	r2, r2, #8
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	3758      	adds	r7, #88	; 0x58
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b096      	sub	sp, #88	; 0x58
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001fdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe4:	2b22      	cmp	r3, #34	; 0x22
 8001fe6:	f040 8094 	bne.w	8002112 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ff0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8001ffa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001ffe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002002:	4013      	ands	r3, r2
 8002004:	b29a      	uxth	r2, r3
 8002006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002008:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	1c9a      	adds	r2, r3, #2
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d177      	bne.n	8002122 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	e853 3f00 	ldrex	r3, [r3]
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002050:	643b      	str	r3, [r7, #64]	; 0x40
 8002052:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002054:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002058:	e841 2300 	strex	r3, r2, [r1]
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e6      	bne.n	8002032 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3308      	adds	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	e853 3f00 	ldrex	r3, [r3]
 8002072:	61fb      	str	r3, [r7, #28]
   return(result);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3308      	adds	r3, #8
 8002082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002084:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800208a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208c:	e841 2300 	strex	r3, r2, [r1]
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e5      	bne.n	8002064 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d12e      	bne.n	800210a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	e853 3f00 	ldrex	r3, [r3]
 80020be:	60bb      	str	r3, [r7, #8]
   return(result);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f023 0310 	bic.w	r3, r3, #16
 80020c6:	647b      	str	r3, [r7, #68]	; 0x44
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d4:	6979      	ldr	r1, [r7, #20]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	e841 2300 	strex	r3, r2, [r1]
 80020dc:	613b      	str	r3, [r7, #16]
   return(result);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e6      	bne.n	80020b2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d103      	bne.n	80020fa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff f9e8 	bl	80014d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002108:	e00b      	b.n	8002122 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe f8d0 	bl	80002b0 <HAL_UART_RxCpltCallback>
}
 8002110:	e007      	b.n	8002122 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0208 	orr.w	r2, r2, #8
 8002120:	619a      	str	r2, [r3, #24]
}
 8002122:	bf00      	nop
 8002124:	3758      	adds	r7, #88	; 0x58
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <__libc_init_array>:
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	4d0d      	ldr	r5, [pc, #52]	; (8002178 <__libc_init_array+0x38>)
 8002144:	4c0d      	ldr	r4, [pc, #52]	; (800217c <__libc_init_array+0x3c>)
 8002146:	1b64      	subs	r4, r4, r5
 8002148:	10a4      	asrs	r4, r4, #2
 800214a:	2600      	movs	r6, #0
 800214c:	42a6      	cmp	r6, r4
 800214e:	d109      	bne.n	8002164 <__libc_init_array+0x24>
 8002150:	4d0b      	ldr	r5, [pc, #44]	; (8002180 <__libc_init_array+0x40>)
 8002152:	4c0c      	ldr	r4, [pc, #48]	; (8002184 <__libc_init_array+0x44>)
 8002154:	f000 f818 	bl	8002188 <_init>
 8002158:	1b64      	subs	r4, r4, r5
 800215a:	10a4      	asrs	r4, r4, #2
 800215c:	2600      	movs	r6, #0
 800215e:	42a6      	cmp	r6, r4
 8002160:	d105      	bne.n	800216e <__libc_init_array+0x2e>
 8002162:	bd70      	pop	{r4, r5, r6, pc}
 8002164:	f855 3b04 	ldr.w	r3, [r5], #4
 8002168:	4798      	blx	r3
 800216a:	3601      	adds	r6, #1
 800216c:	e7ee      	b.n	800214c <__libc_init_array+0xc>
 800216e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002172:	4798      	blx	r3
 8002174:	3601      	adds	r6, #1
 8002176:	e7f2      	b.n	800215e <__libc_init_array+0x1e>
 8002178:	080021e8 	.word	0x080021e8
 800217c:	080021e8 	.word	0x080021e8
 8002180:	080021e8 	.word	0x080021e8
 8002184:	080021ec 	.word	0x080021ec

08002188 <_init>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr

08002194 <_fini>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	bf00      	nop
 8002198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219a:	bc08      	pop	{r3}
 800219c:	469e      	mov	lr, r3
 800219e:	4770      	bx	lr
