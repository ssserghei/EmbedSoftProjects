
050_F3DISCO_TI_Callback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001db0  08001db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001df8  08001df8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001df8  08001df8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001df8  08001df8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001df8  08001df8  00011df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dfc  08001dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000a4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a23d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001792  00000000  00000000  0002a27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002ba10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0002c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2d4  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009fa8  00000000  00000000  00049a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b04dd  00000000  00000000  000539b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00103e91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ab0  00000000  00000000  00103ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d98 	.word	0x08001d98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001d98 	.word	0x08001d98

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef huart1;

void SysTick_Handler (void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001dc:	f000 f9a2 	bl	8000524 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001e0:	f000 fad1 	bl	8000786 <HAL_SYSTICK_IRQHandler>

}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <USART1_IRQHandler>:


void USART1_IRQHandler (void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <USART1_IRQHandler+0x10>)
 80001ee:	f000 fe7f 	bl	8000ef0 <HAL_UART_IRQHandler>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000002c 	.word	0x2000002c

080001fc <delay>:
void SystemClockConfig(void);
void UART1_Init(void);
void Error_handler(void);
void GPIO_Init(void);

void delay(void){
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
	// this will introduce ~200ms delay when system clock is 16MHz
	for(uint32_t i = 0 ; i < 50000 ; i ++);
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e002      	b.n	800020e <delay+0x12>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000214:	4293      	cmp	r3, r2
 8000216:	d9f7      	bls.n	8000208 <delay+0xc>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <main>:
/*************************MAIN************************************/
uint8_t data_buffer[100];
uint8_t recvd_data;
uint8_t count=0;
uint8_t reception_complete=FALSE;
int main (void){
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0

	HAL_Init();
 800022e:	f000 f92b 	bl	8000488 <HAL_Init>
	SystemClockConfig();
 8000232:	f000 f877 	bl	8000324 <SystemClockConfig>
	GPIO_Init();
 8000236:	f000 f851 	bl	80002dc <GPIO_Init>

	UART1_Init();
 800023a:	f000 f87b 	bl	8000334 <UART1_Init>

	uint16_t len_of_data=strlen(user_data);
 800023e:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <main+0xa8>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ffc0 	bl	80001c8 <strlen>
 8000248:	4603      	mov	r3, r0
 800024a:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY);
 800024c:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <main+0xa8>)
 800024e:	6819      	ldr	r1, [r3, #0]
 8000250:	88fa      	ldrh	r2, [r7, #6]
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	481f      	ldr	r0, [pc, #124]	; (80002d4 <main+0xac>)
 8000258:	f000 fdb6 	bl	8000dc8 <HAL_UART_Transmit>

while(1){

	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 800025c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000260:	481d      	ldr	r0, [pc, #116]	; (80002d8 <main+0xb0>)
 8000262:	f000 fc8f 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 8000266:	f7ff ffc9 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 800026a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026e:	481a      	ldr	r0, [pc, #104]	; (80002d8 <main+0xb0>)
 8000270:	f000 fc88 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 8000274:	f7ff ffc2 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 8000278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027c:	4816      	ldr	r0, [pc, #88]	; (80002d8 <main+0xb0>)
 800027e:	f000 fc81 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 8000282:	f7ff ffbb 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_12);
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	4813      	ldr	r0, [pc, #76]	; (80002d8 <main+0xb0>)
 800028c:	f000 fc7a 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 8000290:	f7ff ffb4 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_13);
 8000294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000298:	480f      	ldr	r0, [pc, #60]	; (80002d8 <main+0xb0>)
 800029a:	f000 fc73 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 800029e:	f7ff ffad 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_14);
 80002a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a6:	480c      	ldr	r0, [pc, #48]	; (80002d8 <main+0xb0>)
 80002a8:	f000 fc6c 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 80002ac:	f7ff ffa6 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 80002b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b4:	4808      	ldr	r0, [pc, #32]	; (80002d8 <main+0xb0>)
 80002b6:	f000 fc65 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 80002ba:	f7ff ff9f 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80002be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c2:	4805      	ldr	r0, [pc, #20]	; (80002d8 <main+0xb0>)
 80002c4:	f000 fc5e 	bl	8000b84 <HAL_GPIO_TogglePin>
	delay();
 80002c8:	f7ff ff98 	bl	80001fc <delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 80002cc:	e7c6      	b.n	800025c <main+0x34>
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000
 80002d4:	2000002c 	.word	0x2000002c
 80002d8:	48001000 	.word	0x48001000

080002dc <GPIO_Init>:
	return 0;
}//END MAIN


void GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <GPIO_Init+0x40>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <GPIO_Init+0x40>)
 80002e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <GPIO_Init+0x40>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_8;
 80002fa:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80002fe:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE,&ledgpio);
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4619      	mov	r1, r3
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <GPIO_Init+0x44>)
 800030e:	f000 fabf 	bl	8000890 <HAL_GPIO_Init>
}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	48001000 	.word	0x48001000

08000324 <SystemClockConfig>:

void SystemClockConfig(void){
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
	...

08000334 <UART1_Init>:

void UART1_Init(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	huart1.Instance=USART1;						//
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <UART1_Init+0x44>)
 800033a:	4a10      	ldr	r2, [pc, #64]	; (800037c <UART1_Init+0x48>)
 800033c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate=115200;				//
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <UART1_Init+0x44>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength=UART_WORDLENGTH_8B;	//
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <UART1_Init+0x44>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits=UART_STOPBITS_1;		//
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <UART1_Init+0x44>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity=UART_PARITY_NONE;		//
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <UART1_Init+0x44>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
	huart1.Init.HwFlowCtl=UART_HWCONTROL_NONE;	//
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <UART1_Init+0x44>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
	huart1.Init.Mode=UART_MODE_TX_RX;			//
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <UART1_Init+0x44>)
 8000360:	220c      	movs	r2, #12
 8000362:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart1) !=HAL_OK){
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <UART1_Init+0x44>)
 8000366:	f000 fce1 	bl	8000d2c <HAL_UART_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <UART1_Init+0x40>
		//There is a problem
		Error_handler();
 8000370:	f000 f806 	bl	8000380 <Error_handler>
	}
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000002c 	.word	0x2000002c
 800037c:	40013800 	.word	0x40013800

08000380 <Error_handler>:


void Error_handler(void){
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	while(1);
 8000384:	e7fe      	b.n	8000384 <Error_handler+0x4>
	...

08000388 <HAL_UART_MspInit>:
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);

}


void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART1 peripheral
	__HAL_RCC_USART1_CLK_ENABLE();
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <HAL_UART_MspInit+0x80>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <HAL_UART_MspInit+0x80>)
 8000396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <HAL_UART_MspInit+0x80>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003a4:	613b      	str	r3, [r7, #16]
 80003a6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a16      	ldr	r2, [pc, #88]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b2:	6153      	str	r3, [r2, #20]
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <HAL_UART_MspInit+0x80>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configurations
	gpio_uart.Pin=GPIO_PIN_4;
 80003c0:	2310      	movs	r3, #16
 80003c2:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode=GPIO_MODE_AF_PP;
 80003c4:	2302      	movs	r3, #2
 80003c6:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull=GPIO_PULLUP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed=GPIO_SPEED_FREQ_LOW;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate=GPIO_AF7_USART1;	//UART2_TX
 80003d0:	2307      	movs	r3, #7
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC,&gpio_uart);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <HAL_UART_MspInit+0x84>)
 80003dc:	f000 fa58 	bl	8000890 <HAL_GPIO_Init>

	//nu trebuie de scrie restul setarilor dearece ele sint fixate in structura
	gpio_uart.Pin=GPIO_PIN_5;		//UART2_RX
 80003e0:	2320      	movs	r3, #32
 80003e2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&gpio_uart);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	4808      	ldr	r0, [pc, #32]	; (800040c <HAL_UART_MspInit+0x84>)
 80003ec:	f000 fa50 	bl	8000890 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80003f0:	2025      	movs	r0, #37	; 0x25
 80003f2:	f000 f9ae 	bl	8000752 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	210f      	movs	r1, #15
 80003fa:	2025      	movs	r0, #37	; 0x25
 80003fc:	f000 f98d 	bl	800071a <HAL_NVIC_SetPriority>

}
 8000400:	bf00      	nop
 8000402:	3728      	adds	r7, #40	; 0x28
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000
 800040c:	48000800 	.word	0x48000800

08000410 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <SystemInit+0x20>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <SystemInit+0x20>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800046c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490e      	ldr	r1, [pc, #56]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0b      	ldr	r4, [pc, #44]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800045e:	f7ff ffd7 	bl	8000410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000462:	f001 fc75 	bl	8001d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000466:	f7ff fedf 	bl	8000228 <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800046c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000478:	08001e00 	.word	0x08001e00
  ldr r2, =_sbss
 800047c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000480:	200000b4 	.word	0x200000b4

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>
	...

08000488 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_Init+0x28>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <HAL_Init+0x28>)
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000498:	2003      	movs	r0, #3
 800049a:	f000 f933 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 f810 	bl	80004c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004a4:	f000 f806 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_InitTick+0x54>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_InitTick+0x58>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	fbb3 f3f1 	udiv	r3, r3, r1
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f943 	bl	800076e <HAL_SYSTICK_Config>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e00e      	b.n	8000510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d80a      	bhi.n	800050e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	f000 f90b 	bl	800071a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <HAL_InitTick+0x5c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	e000      	b.n	8000510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000004 	.word	0x20000004
 800051c:	2000000c 	.word	0x2000000c
 8000520:	20000008 	.word	0x20000008

08000524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000000c 	.word	0x2000000c
 8000548:	200000b0 	.word	0x200000b0

0800054c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200000b0 	.word	0x200000b0

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d0:	d301      	bcc.n	80006d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00f      	b.n	80006f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <SysTick_Config+0x40>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3b01      	subs	r3, #1
 80006dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006de:	210f      	movs	r1, #15
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f7ff ff8e 	bl	8000604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <SysTick_Config+0x40>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <SysTick_Config+0x40>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000e010 	.word	0xe000e010

08000704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff29 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b086      	sub	sp, #24
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff3e 	bl	80005ac <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff8e 	bl	8000658 <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5d 	bl	8000604 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff31 	bl	80005c8 <__NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa2 	bl	80006c0 <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800078a:	f000 f802 	bl	8000792 <HAL_SYSTICK_Callback>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d008      	beq.n	80007c4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2204      	movs	r2, #4
 80007b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e020      	b.n	8000806 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 020e 	bic.w	r2, r2, #14
 80007d2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0201 	bic.w	r2, r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000824:	2b02      	cmp	r3, #2
 8000826:	d005      	beq.n	8000834 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2204      	movs	r2, #4
 800082c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	e027      	b.n	8000884 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f022 020e 	bic.w	r2, r2, #14
 8000842:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0201 	bic.w	r2, r2, #1
 8000852:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800085c:	2101      	movs	r1, #1
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	4798      	blx	r3
    } 
  }
  return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000890:	b480      	push	{r7}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089e:	e154      	b.n	8000b4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8146 	beq.w	8000b44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d005      	beq.n	80008d0 <HAL_GPIO_Init+0x40>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000906:	2201      	movs	r2, #1
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	f003 0201 	and.w	r2, r3, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b03      	cmp	r3, #3
 800093c:	d017      	beq.n	800096e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d123      	bne.n	80009c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691a      	ldr	r2, [r3, #16]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	08da      	lsrs	r2, r3, #3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3208      	adds	r2, #8
 80009bc:	6939      	ldr	r1, [r7, #16]
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0203 	and.w	r2, r3, #3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 80a0 	beq.w	8000b44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a04:	4b58      	ldr	r3, [pc, #352]	; (8000b68 <HAL_GPIO_Init+0x2d8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a57      	ldr	r2, [pc, #348]	; (8000b68 <HAL_GPIO_Init+0x2d8>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b55      	ldr	r3, [pc, #340]	; (8000b68 <HAL_GPIO_Init+0x2d8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a1c:	4a53      	ldr	r2, [pc, #332]	; (8000b6c <HAL_GPIO_Init+0x2dc>)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a46:	d019      	beq.n	8000a7c <HAL_GPIO_Init+0x1ec>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d013      	beq.n	8000a78 <HAL_GPIO_Init+0x1e8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a48      	ldr	r2, [pc, #288]	; (8000b74 <HAL_GPIO_Init+0x2e4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00d      	beq.n	8000a74 <HAL_GPIO_Init+0x1e4>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <HAL_GPIO_Init+0x2e8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x1e0>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a46      	ldr	r2, [pc, #280]	; (8000b7c <HAL_GPIO_Init+0x2ec>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_GPIO_Init+0x1dc>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e008      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	e006      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a70:	2303      	movs	r3, #3
 8000a72:	e004      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a74:	2302      	movs	r3, #2
 8000a76:	e002      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	f002 0203 	and.w	r2, r2, #3
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	4093      	lsls	r3, r2
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a8e:	4937      	ldr	r1, [pc, #220]	; (8000b6c <HAL_GPIO_Init+0x2dc>)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3302      	adds	r3, #2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9c:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ac0:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000aea:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b14:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_GPIO_Init+0x2f0>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa22 f303 	lsr.w	r3, r2, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f47f aea3 	bne.w	80008a0 <HAL_GPIO_Init+0x10>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000c00 	.word	0x48000c00
 8000b7c:	48001000 	.word	0x48001000
 8000b80:	40010400 	.word	0x40010400

08000b84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43d9      	mvns	r1, r3
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	619a      	str	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d002      	beq.n	8000be8 <HAL_RCC_GetSysClockFreq+0x30>
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d003      	beq.n	8000bee <HAL_RCC_GetSysClockFreq+0x36>
 8000be6:	e03c      	b.n	8000c62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000bea:	623b      	str	r3, [r7, #32]
      break;
 8000bec:	e03c      	b.n	8000c68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000bf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000bf8:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	fa92 f2a2 	rbit	r2, r2
 8000c00:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	40d3      	lsrs	r3, r2
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	fa92 f2a2 	rbit	r2, r2
 8000c24:	60fa      	str	r2, [r7, #12]
  return result;
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	40d3      	lsrs	r3, r2
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fb02 f303 	mul.w	r3, r2, r3
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c50:	e004      	b.n	8000c5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	623b      	str	r3, [r7, #32]
      break;
 8000c60:	e002      	b.n	8000c68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000c64:	623b      	str	r3, [r7, #32]
      break;
 8000c66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000c68:	6a3b      	ldr	r3, [r7, #32]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	372c      	adds	r7, #44	; 0x2c
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	007a1200 	.word	0x007a1200
 8000c80:	08001dd8 	.word	0x08001dd8
 8000c84:	08001de8 	.word	0x08001de8
 8000c88:	003d0900 	.word	0x003d0900

08000c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000caa:	f7ff ffef 	bl	8000c8c <HAL_RCC_GetHCLKFreq>
 8000cae:	4601      	mov	r1, r0
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	fa92 f2a2 	rbit	r2, r2
 8000cc4:	603a      	str	r2, [r7, #0]
  return result;
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	40d3      	lsrs	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	08001dd0 	.word	0x08001dd0

08000ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000cee:	f7ff ffcd 	bl	8000c8c <HAL_RCC_GetHCLKFreq>
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000cfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	fa92 f2a2 	rbit	r2, r2
 8000d08:	603a      	str	r2, [r7, #0]
  return result;
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	40d3      	lsrs	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000
 8000d28:	08001dd0 	.word	0x08001dd0

08000d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e040      	b.n	8000dc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d106      	bne.n	8000d54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fb1a 	bl	8000388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2224      	movs	r2, #36	; 0x24
 8000d58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 fbbe 	bl	80014ec <UART_SetConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e022      	b.n	8000dc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 fd88 	bl	8001898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 fe0f 	bl	80019dc <UART_CheckIdleState>
 8000dbe:	4603      	mov	r3, r0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	f040 8082 	bne.w	8000ee6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_UART_Transmit+0x26>
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e07a      	b.n	8000ee8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d101      	bne.n	8000e00 <HAL_UART_Transmit+0x38>
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e073      	b.n	8000ee8 <HAL_UART_Transmit+0x120>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2221      	movs	r2, #33	; 0x21
 8000e14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e16:	f7ff fb99 	bl	800054c <HAL_GetTick>
 8000e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e34:	d108      	bne.n	8000e48 <HAL_UART_Transmit+0x80>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d104      	bne.n	8000e48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	e003      	b.n	8000e50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8000e58:	e02d      	b.n	8000eb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2200      	movs	r2, #0
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f000 fe02 	bl	8001a6e <UART_WaitOnFlagUntilTimeout>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e039      	b.n	8000ee8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10b      	bne.n	8000e92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e86:	b292      	uxth	r2, r2
 8000e88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	e008      	b.n	8000ea4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1cb      	bne.n	8000e5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f000 fdce 	bl	8001a6e <UART_WaitOnFlagUntilTimeout>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e005      	b.n	8000ee8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8000ee6:	2302      	movs	r3, #2
  }
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ba      	sub	sp, #232	; 0xe8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000f1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8000f1e:	4013      	ands	r3, r2
 8000f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8000f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d115      	bne.n	8000f58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8000f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f30:	f003 0320 	and.w	r3, r3, #32
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00f      	beq.n	8000f58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d009      	beq.n	8000f58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 82a3 	beq.w	8001494 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	4798      	blx	r3
      }
      return;
 8000f56:	e29d      	b.n	8001494 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8000f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 8117 	beq.w	8001190 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8000f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8000f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f72:	4b85      	ldr	r3, [pc, #532]	; (8001188 <HAL_UART_IRQHandler+0x298>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 810a 	beq.w	8001190 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8000f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d011      	beq.n	8000fac <HAL_UART_IRQHandler+0xbc>
 8000f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00b      	beq.n	8000fac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d011      	beq.n	8000fdc <HAL_UART_IRQHandler+0xec>
 8000fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00b      	beq.n	8000fdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd2:	f043 0204 	orr.w	r2, r3, #4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d011      	beq.n	800100c <HAL_UART_IRQHandler+0x11c>
 8000fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00b      	beq.n	800100c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001002:	f043 0202 	orr.w	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800100c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	2b00      	cmp	r3, #0
 8001016:	d017      	beq.n	8001048 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001028:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2208      	movs	r2, #8
 8001036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800103e:	f043 0208 	orr.w	r2, r3, #8
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800104c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001050:	2b00      	cmp	r3, #0
 8001052:	d012      	beq.n	800107a <HAL_UART_IRQHandler+0x18a>
 8001054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001070:	f043 0220 	orr.w	r2, r3, #32
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8209 	beq.w	8001498 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	2b40      	cmp	r3, #64	; 0x40
 80010c4:	d005      	beq.n	80010d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80010c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d04f      	beq.n	8001172 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fd8f 	bl	8001bf6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	2b40      	cmp	r3, #64	; 0x40
 80010e4:	d141      	bne.n	800116a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3308      	adds	r3, #8
 80010ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010f4:	e853 3f00 	ldrex	r3, [r3]
 80010f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80010fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3308      	adds	r3, #8
 800110e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800111a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800111e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001122:	e841 2300 	strex	r3, r2, [r1]
 8001126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800112a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1d9      	bne.n	80010e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001136:	2b00      	cmp	r3, #0
 8001138:	d013      	beq.n	8001162 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <HAL_UART_IRQHandler+0x29c>)
 8001140:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb63 	bl	8000812 <HAL_DMA_Abort_IT>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d017      	beq.n	8001182 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800115c:	4610      	mov	r0, r2
 800115e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001160:	e00f      	b.n	8001182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f9ac 	bl	80014c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001168:	e00b      	b.n	8001182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f9a8 	bl	80014c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001170:	e007      	b.n	8001182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f9a4 	bl	80014c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8001180:	e18a      	b.n	8001498 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001182:	bf00      	nop
    return;
 8001184:	e188      	b.n	8001498 <HAL_UART_IRQHandler+0x5a8>
 8001186:	bf00      	nop
 8001188:	04000120 	.word	0x04000120
 800118c:	08001cbd 	.word	0x08001cbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 8143 	bne.w	8001420 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800119a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 813c 	beq.w	8001420 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80011a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8135 	beq.w	8001420 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2210      	movs	r2, #16
 80011bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c8:	2b40      	cmp	r3, #64	; 0x40
 80011ca:	f040 80b1 	bne.w	8001330 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80011da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 815c 	beq.w	800149c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80011ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80011ee:	429a      	cmp	r2, r3
 80011f0:	f080 8154 	bcs.w	800149c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80011fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b20      	cmp	r3, #32
 8001206:	f000 8085 	beq.w	8001314 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001216:	e853 3f00 	ldrex	r3, [r3]
 800121a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800121e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001238:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800123c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001240:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001244:	e841 2300 	strex	r3, r2, [r1]
 8001248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800124c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1da      	bne.n	800120a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3308      	adds	r3, #8
 800125a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800125c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800125e:	e853 3f00 	ldrex	r3, [r3]
 8001262:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3308      	adds	r3, #8
 8001274:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001278:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800127c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800127e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001280:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001284:	e841 2300 	strex	r3, r2, [r1]
 8001288:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800128a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e1      	bne.n	8001254 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3308      	adds	r3, #8
 8001296:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800129a:	e853 3f00 	ldrex	r3, [r3]
 800129e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80012a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3308      	adds	r3, #8
 80012b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80012b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80012ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80012bc:	e841 2300 	strex	r3, r2, [r1]
 80012c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80012c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e3      	bne.n	8001290 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2220      	movs	r2, #32
 80012cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012dc:	e853 3f00 	ldrex	r3, [r3]
 80012e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80012e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e4:	f023 0310 	bic.w	r3, r3, #16
 80012e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80012f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80012fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012fe:	e841 2300 	strex	r3, r2, [r1]
 8001302:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1e4      	bne.n	80012d4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fa46 	bl	80007a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001320:	b29b      	uxth	r3, r3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	4619      	mov	r1, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f8d3 	bl	80014d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800132e:	e0b5      	b.n	800149c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800134a:	b29b      	uxth	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80a7 	beq.w	80014a0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8001352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80a2 	beq.w	80014a0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001364:	e853 3f00 	ldrex	r3, [r3]
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800136a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
 8001380:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001386:	e841 2300 	strex	r3, r2, [r1]
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800138c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1e4      	bne.n	800135c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3308      	adds	r3, #8
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	e853 3f00 	ldrex	r3, [r3]
 80013a0:	623b      	str	r3, [r7, #32]
   return(result);
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3308      	adds	r3, #8
 80013b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013b6:	633a      	str	r2, [r7, #48]	; 0x30
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013be:	e841 2300 	strex	r3, r2, [r1]
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e3      	bne.n	8001392 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2220      	movs	r2, #32
 80013ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	e853 3f00 	ldrex	r3, [r3]
 80013e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f023 0310 	bic.w	r3, r3, #16
 80013f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	e841 2300 	strex	r3, r2, [r1]
 800140a:	617b      	str	r3, [r7, #20]
   return(result);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e4      	bne.n	80013dc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001412:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001416:	4619      	mov	r1, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f85b 	bl	80014d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800141e:	e03f      	b.n	80014a0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00e      	beq.n	800144a <HAL_UART_IRQHandler+0x55a>
 800142c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fc7a 	bl	8001d3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001448:	e02d      	b.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800144a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00e      	beq.n	8001474 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01c      	beq.n	80014a4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
    }
    return;
 8001472:	e017      	b.n	80014a4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d012      	beq.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
 8001480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00c      	beq.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fc2b 	bl	8001ce8 <UART_EndTransmit_IT>
    return;
 8001492:	e008      	b.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8001494:	bf00      	nop
 8001496:	e006      	b.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8001498:	bf00      	nop
 800149a:	e004      	b.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 800149c:	bf00      	nop
 800149e:	e002      	b.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80014a0:	bf00      	nop
 80014a2:	e000      	b.n	80014a6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80014a4:	bf00      	nop
  }

}
 80014a6:	37e8      	adds	r7, #232	; 0xe8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800151a:	f023 030c 	bic.w	r3, r3, #12
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	6979      	ldr	r1, [r7, #20]
 8001524:	430b      	orrs	r3, r1
 8001526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4313      	orrs	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4aa8      	ldr	r2, [pc, #672]	; (8001808 <UART_SetConfig+0x31c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d120      	bne.n	80015ae <UART_SetConfig+0xc2>
 800156c:	4ba7      	ldr	r3, [pc, #668]	; (800180c <UART_SetConfig+0x320>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d817      	bhi.n	80015a8 <UART_SetConfig+0xbc>
 8001578:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <UART_SetConfig+0x94>)
 800157a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157e:	bf00      	nop
 8001580:	08001591 	.word	0x08001591
 8001584:	0800159d 	.word	0x0800159d
 8001588:	080015a3 	.word	0x080015a3
 800158c:	08001597 	.word	0x08001597
 8001590:	2301      	movs	r3, #1
 8001592:	77fb      	strb	r3, [r7, #31]
 8001594:	e0b5      	b.n	8001702 <UART_SetConfig+0x216>
 8001596:	2302      	movs	r3, #2
 8001598:	77fb      	strb	r3, [r7, #31]
 800159a:	e0b2      	b.n	8001702 <UART_SetConfig+0x216>
 800159c:	2304      	movs	r3, #4
 800159e:	77fb      	strb	r3, [r7, #31]
 80015a0:	e0af      	b.n	8001702 <UART_SetConfig+0x216>
 80015a2:	2308      	movs	r3, #8
 80015a4:	77fb      	strb	r3, [r7, #31]
 80015a6:	e0ac      	b.n	8001702 <UART_SetConfig+0x216>
 80015a8:	2310      	movs	r3, #16
 80015aa:	77fb      	strb	r3, [r7, #31]
 80015ac:	e0a9      	b.n	8001702 <UART_SetConfig+0x216>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a97      	ldr	r2, [pc, #604]	; (8001810 <UART_SetConfig+0x324>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d124      	bne.n	8001602 <UART_SetConfig+0x116>
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <UART_SetConfig+0x320>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015c4:	d011      	beq.n	80015ea <UART_SetConfig+0xfe>
 80015c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015ca:	d817      	bhi.n	80015fc <UART_SetConfig+0x110>
 80015cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d0:	d011      	beq.n	80015f6 <UART_SetConfig+0x10a>
 80015d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d6:	d811      	bhi.n	80015fc <UART_SetConfig+0x110>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <UART_SetConfig+0xf8>
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d006      	beq.n	80015f0 <UART_SetConfig+0x104>
 80015e2:	e00b      	b.n	80015fc <UART_SetConfig+0x110>
 80015e4:	2300      	movs	r3, #0
 80015e6:	77fb      	strb	r3, [r7, #31]
 80015e8:	e08b      	b.n	8001702 <UART_SetConfig+0x216>
 80015ea:	2302      	movs	r3, #2
 80015ec:	77fb      	strb	r3, [r7, #31]
 80015ee:	e088      	b.n	8001702 <UART_SetConfig+0x216>
 80015f0:	2304      	movs	r3, #4
 80015f2:	77fb      	strb	r3, [r7, #31]
 80015f4:	e085      	b.n	8001702 <UART_SetConfig+0x216>
 80015f6:	2308      	movs	r3, #8
 80015f8:	77fb      	strb	r3, [r7, #31]
 80015fa:	e082      	b.n	8001702 <UART_SetConfig+0x216>
 80015fc:	2310      	movs	r3, #16
 80015fe:	77fb      	strb	r3, [r7, #31]
 8001600:	e07f      	b.n	8001702 <UART_SetConfig+0x216>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a83      	ldr	r2, [pc, #524]	; (8001814 <UART_SetConfig+0x328>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d124      	bne.n	8001656 <UART_SetConfig+0x16a>
 800160c:	4b7f      	ldr	r3, [pc, #508]	; (800180c <UART_SetConfig+0x320>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001614:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001618:	d011      	beq.n	800163e <UART_SetConfig+0x152>
 800161a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800161e:	d817      	bhi.n	8001650 <UART_SetConfig+0x164>
 8001620:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001624:	d011      	beq.n	800164a <UART_SetConfig+0x15e>
 8001626:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800162a:	d811      	bhi.n	8001650 <UART_SetConfig+0x164>
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <UART_SetConfig+0x14c>
 8001630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001634:	d006      	beq.n	8001644 <UART_SetConfig+0x158>
 8001636:	e00b      	b.n	8001650 <UART_SetConfig+0x164>
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
 800163c:	e061      	b.n	8001702 <UART_SetConfig+0x216>
 800163e:	2302      	movs	r3, #2
 8001640:	77fb      	strb	r3, [r7, #31]
 8001642:	e05e      	b.n	8001702 <UART_SetConfig+0x216>
 8001644:	2304      	movs	r3, #4
 8001646:	77fb      	strb	r3, [r7, #31]
 8001648:	e05b      	b.n	8001702 <UART_SetConfig+0x216>
 800164a:	2308      	movs	r3, #8
 800164c:	77fb      	strb	r3, [r7, #31]
 800164e:	e058      	b.n	8001702 <UART_SetConfig+0x216>
 8001650:	2310      	movs	r3, #16
 8001652:	77fb      	strb	r3, [r7, #31]
 8001654:	e055      	b.n	8001702 <UART_SetConfig+0x216>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6f      	ldr	r2, [pc, #444]	; (8001818 <UART_SetConfig+0x32c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d124      	bne.n	80016aa <UART_SetConfig+0x1be>
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <UART_SetConfig+0x320>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001668:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800166c:	d011      	beq.n	8001692 <UART_SetConfig+0x1a6>
 800166e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001672:	d817      	bhi.n	80016a4 <UART_SetConfig+0x1b8>
 8001674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001678:	d011      	beq.n	800169e <UART_SetConfig+0x1b2>
 800167a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800167e:	d811      	bhi.n	80016a4 <UART_SetConfig+0x1b8>
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <UART_SetConfig+0x1a0>
 8001684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001688:	d006      	beq.n	8001698 <UART_SetConfig+0x1ac>
 800168a:	e00b      	b.n	80016a4 <UART_SetConfig+0x1b8>
 800168c:	2300      	movs	r3, #0
 800168e:	77fb      	strb	r3, [r7, #31]
 8001690:	e037      	b.n	8001702 <UART_SetConfig+0x216>
 8001692:	2302      	movs	r3, #2
 8001694:	77fb      	strb	r3, [r7, #31]
 8001696:	e034      	b.n	8001702 <UART_SetConfig+0x216>
 8001698:	2304      	movs	r3, #4
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	e031      	b.n	8001702 <UART_SetConfig+0x216>
 800169e:	2308      	movs	r3, #8
 80016a0:	77fb      	strb	r3, [r7, #31]
 80016a2:	e02e      	b.n	8001702 <UART_SetConfig+0x216>
 80016a4:	2310      	movs	r3, #16
 80016a6:	77fb      	strb	r3, [r7, #31]
 80016a8:	e02b      	b.n	8001702 <UART_SetConfig+0x216>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5b      	ldr	r2, [pc, #364]	; (800181c <UART_SetConfig+0x330>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d124      	bne.n	80016fe <UART_SetConfig+0x212>
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <UART_SetConfig+0x320>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80016c0:	d011      	beq.n	80016e6 <UART_SetConfig+0x1fa>
 80016c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80016c6:	d817      	bhi.n	80016f8 <UART_SetConfig+0x20c>
 80016c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016cc:	d011      	beq.n	80016f2 <UART_SetConfig+0x206>
 80016ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016d2:	d811      	bhi.n	80016f8 <UART_SetConfig+0x20c>
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <UART_SetConfig+0x1f4>
 80016d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016dc:	d006      	beq.n	80016ec <UART_SetConfig+0x200>
 80016de:	e00b      	b.n	80016f8 <UART_SetConfig+0x20c>
 80016e0:	2300      	movs	r3, #0
 80016e2:	77fb      	strb	r3, [r7, #31]
 80016e4:	e00d      	b.n	8001702 <UART_SetConfig+0x216>
 80016e6:	2302      	movs	r3, #2
 80016e8:	77fb      	strb	r3, [r7, #31]
 80016ea:	e00a      	b.n	8001702 <UART_SetConfig+0x216>
 80016ec:	2304      	movs	r3, #4
 80016ee:	77fb      	strb	r3, [r7, #31]
 80016f0:	e007      	b.n	8001702 <UART_SetConfig+0x216>
 80016f2:	2308      	movs	r3, #8
 80016f4:	77fb      	strb	r3, [r7, #31]
 80016f6:	e004      	b.n	8001702 <UART_SetConfig+0x216>
 80016f8:	2310      	movs	r3, #16
 80016fa:	77fb      	strb	r3, [r7, #31]
 80016fc:	e001      	b.n	8001702 <UART_SetConfig+0x216>
 80016fe:	2310      	movs	r3, #16
 8001700:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800170a:	d15c      	bne.n	80017c6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	2b08      	cmp	r3, #8
 8001710:	d827      	bhi.n	8001762 <UART_SetConfig+0x276>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <UART_SetConfig+0x22c>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	0800173d 	.word	0x0800173d
 800171c:	08001745 	.word	0x08001745
 8001720:	0800174d 	.word	0x0800174d
 8001724:	08001763 	.word	0x08001763
 8001728:	08001753 	.word	0x08001753
 800172c:	08001763 	.word	0x08001763
 8001730:	08001763 	.word	0x08001763
 8001734:	08001763 	.word	0x08001763
 8001738:	0800175b 	.word	0x0800175b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800173c:	f7ff fab2 	bl	8000ca4 <HAL_RCC_GetPCLK1Freq>
 8001740:	61b8      	str	r0, [r7, #24]
        break;
 8001742:	e013      	b.n	800176c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001744:	f7ff fad0 	bl	8000ce8 <HAL_RCC_GetPCLK2Freq>
 8001748:	61b8      	str	r0, [r7, #24]
        break;
 800174a:	e00f      	b.n	800176c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <UART_SetConfig+0x334>)
 800174e:	61bb      	str	r3, [r7, #24]
        break;
 8001750:	e00c      	b.n	800176c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001752:	f7ff fa31 	bl	8000bb8 <HAL_RCC_GetSysClockFreq>
 8001756:	61b8      	str	r0, [r7, #24]
        break;
 8001758:	e008      	b.n	800176c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800175a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800175e:	61bb      	str	r3, [r7, #24]
        break;
 8001760:	e004      	b.n	800176c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	77bb      	strb	r3, [r7, #30]
        break;
 800176a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8084 	beq.w	800187c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	005a      	lsls	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	441a      	add	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	b29b      	uxth	r3, r3
 800178a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	d916      	bls.n	80017c0 <UART_SetConfig+0x2d4>
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d212      	bcs.n	80017c0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	b29b      	uxth	r3, r3
 800179e:	f023 030f 	bic.w	r3, r3, #15
 80017a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	89fa      	ldrh	r2, [r7, #14]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	e05d      	b.n	800187c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	77bb      	strb	r3, [r7, #30]
 80017c4:	e05a      	b.n	800187c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d836      	bhi.n	800183a <UART_SetConfig+0x34e>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <UART_SetConfig+0x2e8>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017f9 	.word	0x080017f9
 80017d8:	08001801 	.word	0x08001801
 80017dc:	08001825 	.word	0x08001825
 80017e0:	0800183b 	.word	0x0800183b
 80017e4:	0800182b 	.word	0x0800182b
 80017e8:	0800183b 	.word	0x0800183b
 80017ec:	0800183b 	.word	0x0800183b
 80017f0:	0800183b 	.word	0x0800183b
 80017f4:	08001833 	.word	0x08001833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017f8:	f7ff fa54 	bl	8000ca4 <HAL_RCC_GetPCLK1Freq>
 80017fc:	61b8      	str	r0, [r7, #24]
        break;
 80017fe:	e021      	b.n	8001844 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001800:	f7ff fa72 	bl	8000ce8 <HAL_RCC_GetPCLK2Freq>
 8001804:	61b8      	str	r0, [r7, #24]
        break;
 8001806:	e01d      	b.n	8001844 <UART_SetConfig+0x358>
 8001808:	40013800 	.word	0x40013800
 800180c:	40021000 	.word	0x40021000
 8001810:	40004400 	.word	0x40004400
 8001814:	40004800 	.word	0x40004800
 8001818:	40004c00 	.word	0x40004c00
 800181c:	40005000 	.word	0x40005000
 8001820:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <UART_SetConfig+0x3a8>)
 8001826:	61bb      	str	r3, [r7, #24]
        break;
 8001828:	e00c      	b.n	8001844 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800182a:	f7ff f9c5 	bl	8000bb8 <HAL_RCC_GetSysClockFreq>
 800182e:	61b8      	str	r0, [r7, #24]
        break;
 8001830:	e008      	b.n	8001844 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001836:	61bb      	str	r3, [r7, #24]
        break;
 8001838:	e004      	b.n	8001844 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	77bb      	strb	r3, [r7, #30]
        break;
 8001842:	bf00      	nop
    }

    if (pclk != 0U)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d018      	beq.n	800187c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	085a      	lsrs	r2, r3, #1
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	441a      	add	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	b29b      	uxth	r3, r3
 800185e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	d908      	bls.n	8001878 <UART_SetConfig+0x38c>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d204      	bcs.n	8001878 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	e001      	b.n	800187c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001888:	7fbb      	ldrb	r3, [r7, #30]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	007a1200 	.word	0x007a1200

08001898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00a      	beq.n	80018c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00a      	beq.n	8001906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00a      	beq.n	800194a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00a      	beq.n	800196c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01a      	beq.n	80019ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001996:	d10a      	bne.n	80019ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
  }
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80019ec:	f7fe fdae 	bl	800054c <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d10e      	bne.n	8001a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f82d 	bl	8001a6e <UART_WaitOnFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e023      	b.n	8001a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d10e      	bne.n	8001a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f817 	bl	8001a6e <UART_WaitOnFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e00d      	b.n	8001a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b09c      	sub	sp, #112	; 0x70
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a7e:	e0a5      	b.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a86:	f000 80a1 	beq.w	8001bcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8a:	f7fe fd5f 	bl	800054c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d302      	bcc.n	8001aa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8001a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d13e      	bne.n	8001b1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aa8:	e853 3f00 	ldrex	r3, [r3]
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ac0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ac6:	e841 2300 	strex	r3, r2, [r1]
 8001aca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e6      	bne.n	8001aa0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001adc:	e853 3f00 	ldrex	r3, [r3]
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3308      	adds	r3, #8
 8001af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001af2:	64ba      	str	r2, [r7, #72]	; 0x48
 8001af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001afa:	e841 2300 	strex	r3, r2, [r1]
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1e5      	bne.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e067      	b.n	8001bee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d04f      	beq.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b3a:	d147      	bne.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	e853 3f00 	ldrex	r3, [r3]
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
 8001b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b6c:	e841 2300 	strex	r3, r2, [r1]
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e6      	bne.n	8001b46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	e853 3f00 	ldrex	r3, [r3]
 8001b86:	613b      	str	r3, [r7, #16]
   return(result);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3308      	adds	r3, #8
 8001b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b98:	623a      	str	r2, [r7, #32]
 8001b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b9c:	69f9      	ldr	r1, [r7, #28]
 8001b9e:	6a3a      	ldr	r2, [r7, #32]
 8001ba0:	e841 2300 	strex	r3, r2, [r1]
 8001ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e5      	bne.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e010      	b.n	8001bee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	f43f af4a 	beq.w	8001a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3770      	adds	r7, #112	; 0x70
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b095      	sub	sp, #84	; 0x54
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c06:	e853 3f00 	ldrex	r3, [r3]
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c24:	e841 2300 	strex	r3, r2, [r1]
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e6      	bne.n	8001bfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3308      	adds	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	e853 3f00 	ldrex	r3, [r3]
 8001c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c58:	e841 2300 	strex	r3, r2, [r1]
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e5      	bne.n	8001c30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d118      	bne.n	8001c9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	e853 3f00 	ldrex	r3, [r3]
 8001c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f023 0310 	bic.w	r3, r3, #16
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c8e:	6979      	ldr	r1, [r7, #20]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	e841 2300 	strex	r3, r2, [r1]
 8001c96:	613b      	str	r3, [r7, #16]
   return(result);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1e6      	bne.n	8001c6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001cb0:	bf00      	nop
 8001cb2:	3754      	adds	r7, #84	; 0x54
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff fbf0 	bl	80014c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	e853 3f00 	ldrex	r3, [r3]
 8001cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d12:	6979      	ldr	r1, [r7, #20]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	e841 2300 	strex	r3, r2, [r1]
 8001d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1e6      	bne.n	8001cf0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2220      	movs	r2, #32
 8001d26:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fbbc 	bl	80014ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <__libc_init_array>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	4d0d      	ldr	r5, [pc, #52]	; (8001d88 <__libc_init_array+0x38>)
 8001d54:	4c0d      	ldr	r4, [pc, #52]	; (8001d8c <__libc_init_array+0x3c>)
 8001d56:	1b64      	subs	r4, r4, r5
 8001d58:	10a4      	asrs	r4, r4, #2
 8001d5a:	2600      	movs	r6, #0
 8001d5c:	42a6      	cmp	r6, r4
 8001d5e:	d109      	bne.n	8001d74 <__libc_init_array+0x24>
 8001d60:	4d0b      	ldr	r5, [pc, #44]	; (8001d90 <__libc_init_array+0x40>)
 8001d62:	4c0c      	ldr	r4, [pc, #48]	; (8001d94 <__libc_init_array+0x44>)
 8001d64:	f000 f818 	bl	8001d98 <_init>
 8001d68:	1b64      	subs	r4, r4, r5
 8001d6a:	10a4      	asrs	r4, r4, #2
 8001d6c:	2600      	movs	r6, #0
 8001d6e:	42a6      	cmp	r6, r4
 8001d70:	d105      	bne.n	8001d7e <__libc_init_array+0x2e>
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
 8001d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d78:	4798      	blx	r3
 8001d7a:	3601      	adds	r6, #1
 8001d7c:	e7ee      	b.n	8001d5c <__libc_init_array+0xc>
 8001d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d82:	4798      	blx	r3
 8001d84:	3601      	adds	r6, #1
 8001d86:	e7f2      	b.n	8001d6e <__libc_init_array+0x1e>
 8001d88:	08001df8 	.word	0x08001df8
 8001d8c:	08001df8 	.word	0x08001df8
 8001d90:	08001df8 	.word	0x08001df8
 8001d94:	08001dfc 	.word	0x08001dfc

08001d98 <_init>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr

08001da4 <_fini>:
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	bf00      	nop
 8001da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001daa:	bc08      	pop	{r3}
 8001dac:	469e      	mov	lr, r3
 8001dae:	4770      	bx	lr
