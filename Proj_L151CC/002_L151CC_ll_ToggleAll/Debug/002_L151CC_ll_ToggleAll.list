
002_L151CC_ll_ToggleAll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000124  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a0  08000124  08000124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c4  080002c4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c4  080002c4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080002c4  080002c4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c4  080002c4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c4  080002c4  000102c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c8  080002c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080002cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  080002e0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080002e0  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007b2  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000100  00000000  00000000  000207ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000208f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00020938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f5c  00000000  00000000  00020968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000469  00000000  00000000  000218c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003eee  00000000  00000000  00021d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00025c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00025c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000124 <__do_global_dtors_aux>:
 8000124:	b510      	push	{r4, lr}
 8000126:	4c05      	ldr	r4, [pc, #20]	; (800013c <__do_global_dtors_aux+0x18>)
 8000128:	7823      	ldrb	r3, [r4, #0]
 800012a:	b933      	cbnz	r3, 800013a <__do_global_dtors_aux+0x16>
 800012c:	4b04      	ldr	r3, [pc, #16]	; (8000140 <__do_global_dtors_aux+0x1c>)
 800012e:	b113      	cbz	r3, 8000136 <__do_global_dtors_aux+0x12>
 8000130:	4804      	ldr	r0, [pc, #16]	; (8000144 <__do_global_dtors_aux+0x20>)
 8000132:	f3af 8000 	nop.w
 8000136:	2301      	movs	r3, #1
 8000138:	7023      	strb	r3, [r4, #0]
 800013a:	bd10      	pop	{r4, pc}
 800013c:	20000014 	.word	0x20000014
 8000140:	00000000 	.word	0x00000000
 8000144:	080002ac 	.word	0x080002ac

08000148 <frame_dummy>:
 8000148:	b508      	push	{r3, lr}
 800014a:	4b03      	ldr	r3, [pc, #12]	; (8000158 <frame_dummy+0x10>)
 800014c:	b11b      	cbz	r3, 8000156 <frame_dummy+0xe>
 800014e:	4903      	ldr	r1, [pc, #12]	; (800015c <frame_dummy+0x14>)
 8000150:	4803      	ldr	r0, [pc, #12]	; (8000160 <frame_dummy+0x18>)
 8000152:	f3af 8000 	nop.w
 8000156:	bd08      	pop	{r3, pc}
 8000158:	00000000 	.word	0x00000000
 800015c:	20000018 	.word	0x20000018
 8000160:	080002ac 	.word	0x080002ac

08000164 <main>:

#include<stdint.h>
#include "main.h" //este un fiesier antet definit de user deaceia il scriem cu ""

int main(void)
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
	pClkCtrlReg->gpioA_en=1;	//LED EN CLK on GPIOA
 800016a:	4b23      	ldr	r3, [pc, #140]	; (80001f8 <main+0x94>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	6813      	ldr	r3, [r2, #0]
 8000170:	f043 0301 	orr.w	r3, r3, #1
 8000174:	6013      	str	r3, [r2, #0]
	pPortAModeReg->moder5=1;	//LED Set pin as OUT
 8000176:	4b21      	ldr	r3, [pc, #132]	; (80001fc <main+0x98>)
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	6813      	ldr	r3, [r2, #0]
 800017c:	2101      	movs	r1, #1
 800017e:	f361 238b 	bfi	r3, r1, #10, #2
 8000182:	6013      	str	r3, [r2, #0]

	pClkCtrlReg->gpioC_en=1;	//BUT EN CLK on PC13
 8000184:	4b1c      	ldr	r3, [pc, #112]	; (80001f8 <main+0x94>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	6813      	ldr	r3, [r2, #0]
 800018a:	f043 0304 	orr.w	r3, r3, #4
 800018e:	6013      	str	r3, [r2, #0]
	pPortCModeReg->moder13=0;	//BUT Set pin as IN
 8000190:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <main+0x9c>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	6813      	ldr	r3, [r2, #0]
 8000196:	f36f 639b 	bfc	r3, #26, #2
 800019a:	6013      	str	r3, [r2, #0]

	/* Loop forever */


	while(1){
	uint8_t ButState=!pPortCIntReg->idr13;
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <main+0xa0>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	f083 0301 	eor.w	r3, r3, #1
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	71fb      	strb	r3, [r7, #7]
		if(!ButState){
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d1f2      	bne.n	800019c <main+0x38>
			//turn on LED
			pPortAOutReg->odr5=1;
 80001b6:	4b14      	ldr	r3, [pc, #80]	; (8000208 <main+0xa4>)
 80001b8:	681a      	ldr	r2, [r3, #0]
 80001ba:	8813      	ldrh	r3, [r2, #0]
 80001bc:	f043 0320 	orr.w	r3, r3, #32
 80001c0:	8013      	strh	r3, [r2, #0]
			for(uint32_t i=0; i<100000; i++);
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e002      	b.n	80001ce <main+0x6a>
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	3301      	adds	r3, #1
 80001cc:	60fb      	str	r3, [r7, #12]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	4a0e      	ldr	r2, [pc, #56]	; (800020c <main+0xa8>)
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d9f8      	bls.n	80001c8 <main+0x64>
			//turn off the LED
			pPortAOutReg->odr5=0;
 80001d6:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <main+0xa4>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	8813      	ldrh	r3, [r2, #0]
 80001dc:	f36f 1345 	bfc	r3, #5, #1
 80001e0:	8013      	strh	r3, [r2, #0]
			for(uint32_t i=0; i<100000; i++);
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
 80001e6:	e002      	b.n	80001ee <main+0x8a>
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	3301      	adds	r3, #1
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <main+0xa8>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d9f8      	bls.n	80001e8 <main+0x84>
	while(1){
 80001f6:	e7d1      	b.n	800019c <main+0x38>
 80001f8:	20000000 	.word	0x20000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	20000008 	.word	0x20000008
 8000204:	20000010 	.word	0x20000010
 8000208:	2000000c 	.word	0x2000000c
 800020c:	0001869f 	.word	0x0001869f

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 f811 	bl	8000264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ff8f 	bl	8000164 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000254:	080002cc 	.word	0x080002cc
  ldr r2, =_sbss
 8000258:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800025c:	20000030 	.word	0x20000030

08000260 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_IRQHandler>
	...

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	2600      	movs	r6, #0
 8000268:	4d0c      	ldr	r5, [pc, #48]	; (800029c <__libc_init_array+0x38>)
 800026a:	4c0d      	ldr	r4, [pc, #52]	; (80002a0 <__libc_init_array+0x3c>)
 800026c:	1b64      	subs	r4, r4, r5
 800026e:	10a4      	asrs	r4, r4, #2
 8000270:	42a6      	cmp	r6, r4
 8000272:	d109      	bne.n	8000288 <__libc_init_array+0x24>
 8000274:	f000 f81a 	bl	80002ac <_init>
 8000278:	2600      	movs	r6, #0
 800027a:	4d0a      	ldr	r5, [pc, #40]	; (80002a4 <__libc_init_array+0x40>)
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <__libc_init_array+0x44>)
 800027e:	1b64      	subs	r4, r4, r5
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	42a6      	cmp	r6, r4
 8000284:	d105      	bne.n	8000292 <__libc_init_array+0x2e>
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f855 3b04 	ldr.w	r3, [r5], #4
 800028c:	4798      	blx	r3
 800028e:	3601      	adds	r6, #1
 8000290:	e7ee      	b.n	8000270 <__libc_init_array+0xc>
 8000292:	f855 3b04 	ldr.w	r3, [r5], #4
 8000296:	4798      	blx	r3
 8000298:	3601      	adds	r6, #1
 800029a:	e7f2      	b.n	8000282 <__libc_init_array+0x1e>
 800029c:	080002c4 	.word	0x080002c4
 80002a0:	080002c4 	.word	0x080002c4
 80002a4:	080002c4 	.word	0x080002c4
 80002a8:	080002c8 	.word	0x080002c8

080002ac <_init>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	bf00      	nop
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr

080002b8 <_fini>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr
