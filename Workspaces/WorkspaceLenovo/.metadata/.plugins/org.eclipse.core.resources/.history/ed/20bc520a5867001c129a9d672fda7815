/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*
   	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8); //LD4
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);

				R
			B		O
		  G           G
			O		B
				R
//Прога рабочая! При нажатии на юзер кнопку весело мигает светодиодом.
// Кнопка подключена к PA0 и подтянута к GND
*/
#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	uint32_t *pClkCtrlReg=(uint32_t*)	(0x40021000+0x14);	//Table 2. //9.4.6 AHB peripheral clock enable register (RCC_AHBENR)
	uint32_t *pPortEModeReg=(uint32_t*)	(0x48001000+0x00);	//Table 2. //11.4.1 GPIO port mode register (GPIOx_MODER) (x =A..H)
	uint32_t *pPortEOutReg=(uint32_t*)	(0x48001000+0x14);	//Table 2. //11.4.6 GPIO port output data register (GPIOx_ODR) (x = A..H)

	uint32_t *pPortAModeReg=(uint32_t*)	(0x48000000+0x00);	//
	uint32_t *pPortAInReg=(uint32_t*)	(0x48000000+0x10);	//11.4.5 GPIO port input data register (GPIOx_IDR) (x = A..H)

	//Enable the Clock
//	*pClkCtrlReg |=0x200000;
	*pClkCtrlReg |= (1<<21);	//21th bit set in 1
	*pClkCtrlReg |= (1<<17);	//enable Clock PORTA0.


	//Configure the mode of the IO pin as output
//	*pPortEModeReg |=0xFFFFFFFF;	//просто проверка операции
//	*pPortEModeReg &=0xFFFCFFFF;
	*pPortEModeReg &=~(3<<16);
//	*pPortEModeReg |=0x00010000;
	*pPortEModeReg |=(1<<16);

	//Configure mode of PORTA
	 *pPortAModeReg &=~(3<<0);	//00: Input mode (reset state) 11.4.1 GPIO port mode register (GPIOx_MODER) (x =A..H)Input mode (reset state) По умолчанию он и так вход но для надежности очищаем

//	 *pPortAModeReg |=(<<);		//set bit

	//set 8 bit of the output data register(turn on LED GPIOE, GPIO_PIN_8)
//	*pPortEOutReg |=0x00000100;
	*pPortEOutReg |=(1<<8);
//	*pPortEOutReg &=~(1<<8);

/*
	while(1){
			//read the pin status of the pin PA0 (GPIOA INPUT DATA REGISTER)
			uint8_t  pinStatus = (uint8_t)(*pPortAInReg & 0x1); //zero out all other bits except bit 0

			if(pinStatus){
				//turn on the LED
				*pPortEOutReg |=(1<<8);
			}else{
				//turn off the LED
				*pPortEOutReg &=~(1<<8);
			}
	}
*/
	while(1)
	{
		//read the pin status of the pin PA0 (GPIOA INPUT DATA REGISTER)
		uint8_t  pinStatus = (uint8_t)(*pPortAInReg & 0x1); //zero out all other bits except bit 0
		if(pinStatus){
			//turn on the LED
			*pPortEOutReg |=(1<<8);
			for(uint32_t i=0; i<500000; i++);
			//turn off the LED
			*pPortEOutReg &=~(1<<8);
			for(uint32_t i=0; i<500000; i++);
		}
	}

	/*
		while(1){
				//read the pin status of the pin PA0 (GPIOA INPUT DATA REGISTER)
				uint8_t  pinStatus = (uint8_t)(*pPortAInReg & 0x1); //zero out all other bits except bit 0

				if(pinStatus){
					//turn on the LED
					*pPortEOutReg |=(1<<8);
				}else{
					//turn off the LED
					*pPortEOutReg &=~(1<<8);
				}
		}
	*/


}
