
001_SAML_TogglePin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010648  2**0
                  CONTENTS
  2 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  3 .heap         00000200  20000020  20000020  00020000  2**0
                  ALLOC
  4 .stack        00000400  20000220  20000220  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002c  00000000  00000000  00010648  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010674  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008772  00000000  00000000  000106cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016ec  00000000  00000000  00018e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001e3f  00000000  00000000  0001a52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000250  00000000  00000000  0001c36a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0001c5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000171ce  00000000  00000000  0001c76a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007fcd  00000000  00000000  00033938  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007fb82  00000000  00000000  0003b905  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000388  00000000  00000000  000bb488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 06 00 20 71 01 00 00 6f 01 00 00 6f 01 00 00      .. q...o...o...
	...
  2c:	6f 01 00 00 00 00 00 00 00 00 00 00 6f 01 00 00     o...........o...
  3c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  4c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  5c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  6c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  7c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  8c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  9c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  ac:	6f 01 00 00 6f 01 00 00 6f 01 00 00 00 00 00 00     o...o...o.......
	...
  c8:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  d8:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  e8:	6f 01 00 00 6f 01 00 00 6f 01 00 00                 o...o...o...

000000f4 <__do_global_dtors_aux>:
  f4:	b510      	push	{r4, lr}
  f6:	f240 0400 	movw	r4, #0
  fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
  fe:	7823      	ldrb	r3, [r4, #0]
 100:	b963      	cbnz	r3, 11c <__do_global_dtors_aux+0x28>
 102:	f240 0300 	movw	r3, #0
 106:	f2c0 0300 	movt	r3, #0
 10a:	b12b      	cbz	r3, 118 <__do_global_dtors_aux+0x24>
 10c:	f240 6048 	movw	r0, #1608	; 0x648
 110:	f2c0 0000 	movt	r0, #0
 114:	e000      	b.n	118 <__do_global_dtors_aux+0x24>
 116:	bf00      	nop
 118:	2301      	movs	r3, #1
 11a:	7023      	strb	r3, [r4, #0]
 11c:	bd10      	pop	{r4, pc}
 11e:	46c0      	nop			; (mov r8, r8)

00000120 <frame_dummy>:
 120:	f240 0300 	movw	r3, #0
 124:	f2c0 0300 	movt	r3, #0
 128:	b510      	push	{r4, lr}
 12a:	b14b      	cbz	r3, 140 <frame_dummy+0x20>
 12c:	f240 0104 	movw	r1, #4
 130:	f240 6048 	movw	r0, #1608	; 0x648
 134:	f2c2 0100 	movt	r1, #8192	; 0x2000
 138:	f2c0 0000 	movt	r0, #0
 13c:	e000      	b.n	140 <frame_dummy+0x20>
 13e:	bf00      	nop
 140:	f240 6048 	movw	r0, #1608	; 0x648
 144:	f2c0 0000 	movt	r0, #0
 148:	6803      	ldr	r3, [r0, #0]
 14a:	b903      	cbnz	r3, 14e <frame_dummy+0x2e>
 14c:	bd10      	pop	{r4, pc}
 14e:	f240 0300 	movw	r3, #0
 152:	f2c0 0300 	movt	r3, #0
 156:	2b00      	cmp	r3, #0
 158:	d0f8      	beq.n	14c <frame_dummy+0x2c>
 15a:	4798      	blx	r3
 15c:	e7f6      	b.n	14c <frame_dummy+0x2c>
 15e:	46c0      	nop			; (mov r8, r8)

00000160 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 160:	b510      	push	{r4, lr}
	system_init();
 162:	f240 2335 	movw	r3, #565	; 0x235
 166:	f2c0 0300 	movt	r3, #0
 16a:	4798      	blx	r3
}
 16c:	bd10      	pop	{r4, pc}

0000016e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 16e:	e7fe      	b.n	16e <Dummy_Handler>

00000170 <Reset_Handler>:
{
 170:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 172:	f240 6248 	movw	r2, #1608	; 0x648
 176:	f2c0 0200 	movt	r2, #0
 17a:	f240 0300 	movw	r3, #0
 17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 182:	429a      	cmp	r2, r3
 184:	d020      	beq.n	1c8 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
 186:	001a      	movs	r2, r3
 188:	f240 0300 	movw	r3, #0
 18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 190:	429a      	cmp	r2, r3
 192:	d219      	bcs.n	1c8 <Reset_Handler+0x58>
 194:	f240 0300 	movw	r3, #0
 198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 19c:	3303      	adds	r3, #3
 19e:	4a24      	ldr	r2, [pc, #144]	; (230 <HEAP_SIZE+0x30>)
 1a0:	1a9b      	subs	r3, r3, r2
 1a2:	089b      	lsrs	r3, r3, #2
 1a4:	3301      	adds	r3, #1
 1a6:	009b      	lsls	r3, r3, #2
 1a8:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 1aa:	f240 0100 	movw	r1, #0
 1ae:	f2c2 0100 	movt	r1, #8192	; 0x2000
 1b2:	1851      	adds	r1, r2, r1
 1b4:	f240 6048 	movw	r0, #1608	; 0x648
 1b8:	f2c0 0000 	movt	r0, #0
 1bc:	1810      	adds	r0, r2, r0
 1be:	6800      	ldr	r0, [r0, #0]
 1c0:	6008      	str	r0, [r1, #0]
 1c2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 1c4:	429a      	cmp	r2, r3
 1c6:	d1f0      	bne.n	1aa <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
 1c8:	f240 0200 	movw	r2, #0
 1cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 1d0:	f240 0320 	movw	r3, #32
 1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 1d8:	429a      	cmp	r2, r3
 1da:	d213      	bcs.n	204 <HEAP_SIZE+0x4>
 1dc:	f240 0200 	movw	r2, #0
 1e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 1e4:	43d3      	mvns	r3, r2
 1e6:	f240 0120 	movw	r1, #32
 1ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
 1ee:	468c      	mov	ip, r1
 1f0:	4463      	add	r3, ip
 1f2:	2103      	movs	r1, #3
 1f4:	438b      	bics	r3, r1
 1f6:	3304      	adds	r3, #4
 1f8:	4694      	mov	ip, r2
 1fa:	4463      	add	r3, ip
                *pDest++ = 0;
 1fc:	2100      	movs	r1, #0
 1fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 200:	4293      	cmp	r3, r2
 202:	d1fc      	bne.n	1fe <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 204:	f240 0300 	movw	r3, #0
 208:	f2c0 0300 	movt	r3, #0
 20c:	227f      	movs	r2, #127	; 0x7f
 20e:	4393      	bics	r3, r2
 210:	f64e 5200 	movw	r2, #60672	; 0xed00
 214:	f2ce 0200 	movt	r2, #57344	; 0xe000
 218:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 21a:	f240 53d9 	movw	r3, #1497	; 0x5d9
 21e:	f2c0 0300 	movt	r3, #0
 222:	4798      	blx	r3
        main();
 224:	f240 5375 	movw	r3, #1397	; 0x575
 228:	f2c0 0300 	movt	r3, #0
 22c:	4798      	blx	r3
 22e:	e7fe      	b.n	22e <HEAP_SIZE+0x2e>
 230:	20000004 	.word	0x20000004

00000234 <system_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void system_init(void)
{
 234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 236:	f240 436d 	movw	r3, #1133	; 0x46d
 23a:	f2c0 0300 	movt	r3, #0
 23e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 240:	22c0      	movs	r2, #192	; 0xc0
 242:	05d2      	lsls	r2, r2, #23
 244:	2101      	movs	r1, #1
 246:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 248:	6091      	str	r1, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 24a:	f243 0300 	movw	r3, #12288	; 0x3000
 24e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 252:	2001      	movs	r0, #1
 254:	f2c4 0000 	movt	r0, #16384	; 0x4000
 258:	6298      	str	r0, [r3, #40]	; 0x28
 25a:	20c0      	movs	r0, #192	; 0xc0
 25c:	0600      	lsls	r0, r0, #24
 25e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 260:	2540      	movs	r5, #64	; 0x40
 262:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 264:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 266:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 268:	2402      	movs	r4, #2
 26a:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 26c:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 26e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 272:	629c      	str	r4, [r3, #40]	; 0x28
 274:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 276:	3501      	adds	r5, #1
 278:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 27a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 27c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 27e:	2604      	movs	r6, #4
 280:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 282:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 284:	2404      	movs	r4, #4
 286:	f2c4 0400 	movt	r4, #16384	; 0x4000
 28a:	629c      	str	r4, [r3, #40]	; 0x28
 28c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 28e:	3501      	adds	r5, #1
 290:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 292:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 294:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 296:	2408      	movs	r4, #8
 298:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 29a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 29c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 2a0:	629c      	str	r4, [r3, #40]	; 0x28
 2a2:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2a4:	3501      	adds	r5, #1
 2a6:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 2a8:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2aa:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2ac:	2410      	movs	r4, #16
 2ae:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2b0:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2b2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 2b6:	629c      	str	r4, [r3, #40]	; 0x28
 2b8:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2ba:	3501      	adds	r5, #1
 2bc:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 2be:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2c0:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 2c2:	2420      	movs	r4, #32
 2c4:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2c6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 2ca:	629c      	str	r4, [r3, #40]	; 0x28
 2cc:	2400      	movs	r4, #0
 2ce:	f2cc 0402 	movt	r4, #49154	; 0xc002
 2d2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
 2d4:	2445      	movs	r4, #69	; 0x45
 2d6:	5d1d      	ldrb	r5, [r3, r4]
 2d8:	43b5      	bics	r5, r6
 2da:	551d      	strb	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2dc:	5d1d      	ldrb	r5, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 2de:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2e0:	551d      	strb	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2e2:	34bb      	adds	r4, #187	; 0xbb
 2e4:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2e6:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2e8:	f2c4 0400 	movt	r4, #16384	; 0x4000
 2ec:	629c      	str	r4, [r3, #40]	; 0x28
 2ee:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2f0:	2548      	movs	r5, #72	; 0x48
 2f2:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 2f4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2f6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2f8:	f244 0400 	movw	r4, #16384	; 0x4000
 2fc:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2fe:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 300:	f2c4 0400 	movt	r4, #16384	; 0x4000
 304:	629c      	str	r4, [r3, #40]	; 0x28
 306:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 308:	3506      	adds	r5, #6
 30a:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 30c:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 30e:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 310:	f248 0400 	movw	r4, #32768	; 0x8000
 314:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 316:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 318:	f2c4 0400 	movt	r4, #16384	; 0x4000
 31c:	629c      	str	r4, [r3, #40]	; 0x28
 31e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 320:	244f      	movs	r4, #79	; 0x4f
 322:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 324:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 326:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 328:	2080      	movs	r0, #128	; 0x80
 32a:	0240      	lsls	r0, r0, #9
 32c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 32e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 330:	2080      	movs	r0, #128	; 0x80
 332:	05c0      	lsls	r0, r0, #23
 334:	6298      	str	r0, [r3, #40]	; 0x28
 336:	3c4e      	subs	r4, #78	; 0x4e
 338:	f2cc 0400 	movt	r4, #49152	; 0xc000
 33c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 33e:	3502      	adds	r5, #2
 340:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 342:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 344:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 346:	2480      	movs	r4, #128	; 0x80
 348:	02a4      	lsls	r4, r4, #10
 34a:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 34c:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 34e:	6298      	str	r0, [r3, #40]	; 0x28
 350:	2402      	movs	r4, #2
 352:	f2cc 0400 	movt	r4, #49152	; 0xc000
 356:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 358:	3501      	adds	r5, #1
 35a:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 35c:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 35e:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 360:	2480      	movs	r4, #128	; 0x80
 362:	02e4      	lsls	r4, r4, #11
 364:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 366:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 368:	6298      	str	r0, [r3, #40]	; 0x28
 36a:	2404      	movs	r4, #4
 36c:	f2cc 0400 	movt	r4, #49152	; 0xc000
 370:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 372:	3501      	adds	r5, #1
 374:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 376:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 378:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 37a:	2480      	movs	r4, #128	; 0x80
 37c:	0324      	lsls	r4, r4, #12
 37e:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 380:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 382:	6298      	str	r0, [r3, #40]	; 0x28
 384:	2408      	movs	r4, #8
 386:	f2cc 0400 	movt	r4, #49152	; 0xc000
 38a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 38c:	3501      	adds	r5, #1
 38e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 390:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 392:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 394:	2480      	movs	r4, #128	; 0x80
 396:	03e4      	lsls	r4, r4, #15
 398:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 39a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 39c:	6298      	str	r0, [r3, #40]	; 0x28
 39e:	2440      	movs	r4, #64	; 0x40
 3a0:	f2cc 0400 	movt	r4, #49152	; 0xc000
 3a4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 3a6:	3503      	adds	r5, #3
 3a8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 3aa:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 3ac:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 3ae:	2580      	movs	r5, #128	; 0x80
 3b0:	042d      	lsls	r5, r5, #16
 3b2:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 3b4:	2400      	movs	r4, #0
 3b6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 3ba:	629c      	str	r4, [r3, #40]	; 0x28
 3bc:	2480      	movs	r4, #128	; 0x80
 3be:	f2cc 0402 	movt	r4, #49154	; 0xc002
 3c2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 3c4:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN_Msk;
 3c6:	2457      	movs	r4, #87	; 0x57
 3c8:	5d1e      	ldrb	r6, [r3, r4]
 3ca:	2704      	movs	r7, #4
 3cc:	433e      	orrs	r6, r7
 3ce:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 3d0:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 3d2:	5d1d      	ldrb	r5, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 3d4:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 3d6:	551d      	strb	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 3d8:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 3da:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 3dc:	6298      	str	r0, [r3, #40]	; 0x28
 3de:	f244 0400 	movw	r4, #16384	; 0x4000
 3e2:	f2cc 0400 	movt	r4, #49152	; 0xc000
 3e6:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 3e8:	255e      	movs	r5, #94	; 0x5e
 3ea:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 3ec:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 3ee:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 3f0:	2480      	movs	r4, #128	; 0x80
 3f2:	0624      	lsls	r4, r4, #24
 3f4:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 3f6:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 3f8:	6298      	str	r0, [r3, #40]	; 0x28
 3fa:	f248 0200 	movw	r2, #32768	; 0x8000
 3fe:	f2cc 0200 	movt	r2, #49152	; 0xc000
 402:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 404:	205f      	movs	r0, #95	; 0x5f
 406:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
 408:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 40a:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA31, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA31, GPIO_PIN_FUNCTION_OFF);
}
 40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000040e <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 40e:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
 412:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 414:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 416:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
 41a:	4770      	bx	lr

0000041c <atomic_leave_critical>:
 41c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
 420:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 422:	f383 8810 	msr	PRIMASK, r3
}
 426:	4770      	bx	lr

00000428 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 428:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 42a:	f240 031c 	movw	r3, #28
 42e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 432:	681c      	ldr	r4, [r3, #0]
 434:	f240 434f 	movw	r3, #1103	; 0x44f
 438:	f2c0 0300 	movt	r3, #0
 43c:	4798      	blx	r3
 43e:	0001      	movs	r1, r0
 440:	0020      	movs	r0, r4
 442:	f240 4367 	movw	r3, #1127	; 0x467
 446:	f2c0 0300 	movt	r3, #0
 44a:	4798      	blx	r3
}
 44c:	bd10      	pop	{r4, pc}

0000044e <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
 44e:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
 450:	f240 1090 	movw	r0, #400	; 0x190
 454:	4358      	muls	r0, r3
 456:	3002      	adds	r0, #2
 458:	2303      	movs	r3, #3
 45a:	fbb0 f0f3 	udiv	r0, r0, r3
 45e:	0083      	lsls	r3, r0, #2
 460:	1818      	adds	r0, r3, r0
 462:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 464:	4770      	bx	lr

00000466 <_delay_cycles>:
#if defined(__GNUC__) && (__ARMCOMPILER_VERSION > 6000000) /*  Keil MDK with ARM Compiler 6 */
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
 466:	3901      	subs	r1, #1
 468:	d8fd      	bhi.n	466 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
 46a:	4770      	bx	lr

0000046c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 46c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 46e:	f244 0300 	movw	r3, #16384	; 0x4000
 472:	f2c4 1300 	movt	r3, #16640	; 0x4100
 476:	685a      	ldr	r2, [r3, #4]
 478:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
 47a:	2000      	movs	r0, #0
 47c:	f240 533b 	movw	r3, #1339	; 0x53b
 480:	f2c0 0300 	movt	r3, #0
 484:	4798      	blx	r3

	_osc32kctrl_init_sources();
 486:	f240 43f3 	movw	r3, #1267	; 0x4f3
 48a:	f2c0 0300 	movt	r3, #0
 48e:	4798      	blx	r3
	_oscctrl_init_sources();
 490:	f240 530b 	movw	r3, #1291	; 0x50b
 494:	f2c0 0300 	movt	r3, #0
 498:	4798      	blx	r3
	_mclk_init();
 49a:	f240 43e5 	movw	r3, #1253	; 0x4e5
 49e:	f2c0 0300 	movt	r3, #0
 4a2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 4a4:	f240 5339 	movw	r3, #1337	; 0x539
 4a8:	f2c0 0300 	movt	r3, #0
 4ac:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 4ae:	201f      	movs	r0, #31
 4b0:	f240 43bd 	movw	r3, #1213	; 0x4bd
 4b4:	f2c0 0300 	movt	r3, #0
 4b8:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 4ba:	bd10      	pop	{r4, pc}

000004bc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 4bc:	07c3      	lsls	r3, r0, #31
 4be:	d510      	bpl.n	4e2 <_gclk_init_generators_by_fref+0x26>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
 4c0:	f641 4300 	movw	r3, #7168	; 0x1c00
 4c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 4c8:	f240 1205 	movw	r2, #261	; 0x105
 4cc:	f2c0 0201 	movt	r2, #1
 4d0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 4d2:	f641 4200 	movw	r2, #7168	; 0x1c00
 4d6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 4da:	217d      	movs	r1, #125	; 0x7d
 4dc:	6853      	ldr	r3, [r2, #4]
 4de:	4219      	tst	r1, r3
 4e0:	d1fc      	bne.n	4dc <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
 4e2:	4770      	bx	lr

000004e4 <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
 4e4:	f640 0300 	movw	r3, #2048	; 0x800
 4e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 4ec:	2201      	movs	r2, #1
 4ee:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 4f0:	4770      	bx	lr

000004f2 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 4f2:	f241 4300 	movw	r3, #5120	; 0x1400
 4f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 4fa:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
 4fc:	f641 7100 	movw	r1, #7936	; 0x1f00
 500:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 502:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 504:	2200      	movs	r2, #0
 506:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 508:	4770      	bx	lr

0000050a <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 50a:	f241 0300 	movw	r3, #4096	; 0x1000
 50e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 512:	2202      	movs	r2, #2
 514:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 516:	f241 0200 	movw	r2, #4096	; 0x1000
 51a:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 51e:	2110      	movs	r1, #16
 520:	6913      	ldr	r3, [r2, #16]
 522:	4219      	tst	r1, r3
 524:	d0fc      	beq.n	520 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
 526:	f241 0300 	movw	r3, #4096	; 0x1000
 52a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 52e:	7e1a      	ldrb	r2, [r3, #24]
 530:	2180      	movs	r1, #128	; 0x80
 532:	430a      	orrs	r2, r1
 534:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 536:	4770      	bx	lr

00000538 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 538:	4770      	bx	lr

0000053a <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 53a:	f240 4300 	movw	r3, #1024	; 0x400
 53e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 542:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 544:	2203      	movs	r2, #3
 546:	4013      	ands	r3, r2
 548:	4298      	cmp	r0, r3
 54a:	d012      	beq.n	572 <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
 54c:	f240 4200 	movw	r2, #1024	; 0x400
 550:	f2c4 0200 	movt	r2, #16384	; 0x4000
 554:	23ff      	movs	r3, #255	; 0xff
 556:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 558:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 55a:	2103      	movs	r1, #3
 55c:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 55e:	4008      	ands	r0, r1
 560:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 562:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 564:	f240 4200 	movw	r2, #1024	; 0x400
 568:	f2c4 0200 	movt	r2, #16384	; 0x4000
 56c:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 56e:	2b00      	cmp	r3, #0
 570:	d0fc      	beq.n	56c <_set_performance_level+0x32>
			;
	}
}
 572:	4770      	bx	lr

00000574 <main>:
#define  LED_Blue PIN_PA22
#define  button_pin PIN_PA23


int main(void)
{
 574:	b5f0      	push	{r4, r5, r6, r7, lr}
 576:	b083      	sub	sp, #12
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 578:	f240 1361 	movw	r3, #353	; 0x161
 57c:	f2c0 0300 	movt	r3, #0
 580:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
		delay_ms(100);
 582:	f240 4629 	movw	r6, #1065	; 0x429
 586:	f2c0 0600 	movt	r6, #0
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 58a:	25c0      	movs	r5, #192	; 0xc0
 58c:	05ed      	lsls	r5, r5, #23
 58e:	2701      	movs	r7, #1
 590:	e002      	b.n	598 <main+0x24>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 592:	2380      	movs	r3, #128	; 0x80
 594:	03db      	lsls	r3, r3, #15
 596:	616b      	str	r3, [r5, #20]
 598:	2064      	movs	r0, #100	; 0x64
 59a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 59c:	61ef      	str	r7, [r5, #28]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
 59e:	a801      	add	r0, sp, #4
 5a0:	f240 430f 	movw	r3, #1039	; 0x40f
 5a4:	f2c0 0300 	movt	r3, #0
 5a8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
 5aa:	682c      	ldr	r4, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
 5ac:	f243 0300 	movw	r3, #12288	; 0x3000
 5b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 5b4:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
 5b6:	692b      	ldr	r3, [r5, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
 5b8:	4053      	eors	r3, r2
 5ba:	401c      	ands	r4, r3
 5bc:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
 5be:	a801      	add	r0, sp, #4
 5c0:	f240 431d 	movw	r3, #1053	; 0x41d
 5c4:	f2c0 0300 	movt	r3, #0
 5c8:	4798      	blx	r3
		gpio_toggle_pin_level(LED_Green);
		if(gpio_get_pin_level(button_pin))
 5ca:	0223      	lsls	r3, r4, #8
 5cc:	d5e1      	bpl.n	592 <main+0x1e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 5ce:	2380      	movs	r3, #128	; 0x80
 5d0:	03db      	lsls	r3, r3, #15
 5d2:	61ab      	str	r3, [r5, #24]
 5d4:	e7e0      	b.n	598 <main+0x24>
	...

000005d8 <__libc_init_array>:
 5d8:	b570      	push	{r4, r5, r6, lr}
 5da:	2500      	movs	r5, #0
 5dc:	4b0e      	ldr	r3, [pc, #56]	; (618 <__libc_init_array+0x40>)
 5de:	4c0f      	ldr	r4, [pc, #60]	; (61c <__libc_init_array+0x44>)
 5e0:	1ae4      	subs	r4, r4, r3
 5e2:	10a4      	asrs	r4, r4, #2
 5e4:	42a5      	cmp	r5, r4
 5e6:	d109      	bne.n	5fc <__libc_init_array+0x24>
 5e8:	2500      	movs	r5, #0
 5ea:	f000 f81d 	bl	628 <_init>
 5ee:	4c0c      	ldr	r4, [pc, #48]	; (620 <__libc_init_array+0x48>)
 5f0:	4b0c      	ldr	r3, [pc, #48]	; (624 <__libc_init_array+0x4c>)
 5f2:	1ae4      	subs	r4, r4, r3
 5f4:	10a4      	asrs	r4, r4, #2
 5f6:	42a5      	cmp	r5, r4
 5f8:	d107      	bne.n	60a <__libc_init_array+0x32>
 5fa:	bd70      	pop	{r4, r5, r6, pc}
 5fc:	4a06      	ldr	r2, [pc, #24]	; (618 <__libc_init_array+0x40>)
 5fe:	00ab      	lsls	r3, r5, #2
 600:	189b      	adds	r3, r3, r2
 602:	681b      	ldr	r3, [r3, #0]
 604:	4798      	blx	r3
 606:	3501      	adds	r5, #1
 608:	e7ec      	b.n	5e4 <__libc_init_array+0xc>
 60a:	4a06      	ldr	r2, [pc, #24]	; (624 <__libc_init_array+0x4c>)
 60c:	00ab      	lsls	r3, r5, #2
 60e:	189b      	adds	r3, r3, r2
 610:	681b      	ldr	r3, [r3, #0]
 612:	4798      	blx	r3
 614:	3501      	adds	r5, #1
 616:	e7ee      	b.n	5f6 <__libc_init_array+0x1e>
 618:	00000634 	.word	0x00000634
 61c:	00000634 	.word	0x00000634
 620:	00000638 	.word	0x00000638
 624:	00000634 	.word	0x00000634

00000628 <_init>:
 628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 62a:	46c0      	nop			; (mov r8, r8)
 62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 62e:	bc08      	pop	{r3}
 630:	469e      	mov	lr, r3
 632:	4770      	bx	lr

00000634 <__init_array_start>:
 634:	00000121 	.word	0x00000121

00000638 <_fini>:
 638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 63a:	46c0      	nop			; (mov r8, r8)
 63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 63e:	bc08      	pop	{r3}
 640:	469e      	mov	lr, r3
 642:	4770      	bx	lr

00000644 <__fini_array_start>:
 644:	000000f5 	.word	0x000000f5
