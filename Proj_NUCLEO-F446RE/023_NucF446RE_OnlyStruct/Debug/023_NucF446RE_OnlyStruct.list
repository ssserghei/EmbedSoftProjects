
023_NucF446RE_OnlyStruct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e8  080004e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e8  080004e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080004e8  080004e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e8  080004e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004ec  080004ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080004f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  08000500  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000500  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005b1  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000191  00000000  00000000  000205eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00020780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  000207e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b6e  00000000  00000000  00020838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000651  00000000  00000000  000223a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007923  00000000  00000000  000229f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002a31a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  0002a36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004d0 	.word	0x080004d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080004d0 	.word	0x080004d0

08000204 <delay>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	// this will introduce ~200ms delay when system clock is 16MHz
	for(uint32_t i = 0 ; i < 50000 ; i ++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800021c:	4293      	cmp	r3, r2
 800021e:	d9f7      	bls.n	8000210 <delay+0xc>
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <main>:

/*****MAIN*******/
int main(void)
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0

/*1.Enable Clock for GPIOA-LED and GPIOC-Button*/
RCC->AHB1ENR |=(1<<0); //GPIOA_PCLK_EN
 8000232:	4b56      	ldr	r3, [pc, #344]	; (800038c <main+0x160>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000238:	4b54      	ldr	r3, [pc, #336]	; (800038c <main+0x160>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f042 0201 	orr.w	r2, r2, #1
 8000240:	631a      	str	r2, [r3, #48]	; 0x30
RCC->AHB1ENR |=(1<<2); //GPIOC_PCLK_EN
 8000242:	4b52      	ldr	r3, [pc, #328]	; (800038c <main+0x160>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000248:	4b50      	ldr	r3, [pc, #320]	; (800038c <main+0x160>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f042 0204 	orr.w	r2, r2, #4
 8000250:	631a      	str	r2, [r3, #48]	; 0x30
/*2. Configure the mode of GPIO pins*/

//Configure mode of GOPIO for LED

//Pin mode OUT
uint32_t temp=0; 		//temp. register
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
temp=GPIO_MODE_OUT<<(2*GPIO_PIN_NO_5);
 8000256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025a:	60fb      	str	r3, [r7, #12]
GPIOA_RegDef->MODER &=~(0x3<<(2*GPIO_PIN_NO_5));		//clear 2 bit
 800025c:	4b4c      	ldr	r3, [pc, #304]	; (8000390 <main+0x164>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b4b      	ldr	r3, [pc, #300]	; (8000390 <main+0x164>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800026a:	601a      	str	r2, [r3, #0]
GPIOA_RegDef->MODER |=temp;	//
 800026c:	4b48      	ldr	r3, [pc, #288]	; (8000390 <main+0x164>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	6819      	ldr	r1, [r3, #0]
 8000272:	4b47      	ldr	r3, [pc, #284]	; (8000390 <main+0x164>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	430a      	orrs	r2, r1
 800027a:	601a      	str	r2, [r3, #0]
temp=0;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]

//Pin mode Push-Pul
temp=GPIO_OP_TYPE_PP<<GPIO_PIN_NO_5;		//0 сдвинул 5 раз :))
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
GPIOA_RegDef->OTYPER &=~(0x1<<GPIO_PIN_NO_5);		//clear 2 bit
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <main+0x164>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	685a      	ldr	r2, [r3, #4]
 800028a:	4b41      	ldr	r3, [pc, #260]	; (8000390 <main+0x164>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f022 0220 	bic.w	r2, r2, #32
 8000292:	605a      	str	r2, [r3, #4]
GPIOA_RegDef->OTYPER |=temp;
 8000294:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <main+0x164>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6859      	ldr	r1, [r3, #4]
 800029a:	4b3d      	ldr	r3, [pc, #244]	; (8000390 <main+0x164>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	430a      	orrs	r2, r1
 80002a2:	605a      	str	r2, [r3, #4]
temp=0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]

//Configure mode of GOPIOС for Button

//interrupt mode
//3.configure the pudp setting
temp=GPIO_PIN_PU<<(2*GPIO_PIN_NO_13);
 80002a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002ac:	60fb      	str	r3, [r7, #12]
GPIOC_RegDef->PUPDR &=~(0x3<<GPIO_PIN_NO_13);
 80002ae:	4b39      	ldr	r3, [pc, #228]	; (8000394 <main+0x168>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	68da      	ldr	r2, [r3, #12]
 80002b4:	4b37      	ldr	r3, [pc, #220]	; (8000394 <main+0x168>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80002bc:	60da      	str	r2, [r3, #12]
GPIOC_RegDef->PUPDR |=temp;
 80002be:	4b35      	ldr	r3, [pc, #212]	; (8000394 <main+0x168>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68d9      	ldr	r1, [r3, #12]
 80002c4:	4b33      	ldr	r3, [pc, #204]	; (8000394 <main+0x168>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	430a      	orrs	r2, r1
 80002cc:	60da      	str	r2, [r3, #12]
temp=0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]

//1.configure the FTSR
//10.3.4 Falling trigger selection register (EXTI_FTSR)
EXTI->FTSR |=(1<<GPIO_PIN_NO_13);
 80002d2:	4b31      	ldr	r3, [pc, #196]	; (8000398 <main+0x16c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <main+0x16c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80002e0:	60da      	str	r2, [r3, #12]
//Clear the corresponding RTSR bit
EXTI->RTSR &=~(1<<GPIO_PIN_NO_13);
 80002e2:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <main+0x16c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	689a      	ldr	r2, [r3, #8]
 80002e8:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <main+0x16c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80002f0:	609a      	str	r2, [r3, #8]
//Включение внешнего прерывания от 13 пина.
//Будем расчитывать позицию EXTIx в регистрах
/*Всего 4 регистра SYSCFG_EXTICR2 из каждого регистра используются первые 16 бит. Каждый регистр отвечает за 4 линии EXTI
* К каждой линии EXTI можно подключить путем записи 4 битного числа только один пин порта под номером соответствующему номеру линии EXTI
*Пример: к линии EXTI5 можно подключить PA5 либо PB5 либо... PE5*/
uint8_t	temp1=GPIO_PIN_NO_13/4;
 80002f2:	2303      	movs	r3, #3
 80002f4:	72fb      	strb	r3, [r7, #11]
uint8_t	temp2=GPIO_PIN_NO_13%4;
 80002f6:	2301      	movs	r3, #1
 80002f8:	72bb      	strb	r3, [r7, #10]
uint8_t portcode=2;		//GPIOA=0; GPIOC=2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	727b      	strb	r3, [r7, #9]
RCC->APB2ENR |= (1 << 14);
 80002fe:	4b23      	ldr	r3, [pc, #140]	; (800038c <main+0x160>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <main+0x160>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800030c:	645a      	str	r2, [r3, #68]	; 0x44
SYSCFG->EXTICR[temp1]=portcode <<(temp2*4);		// Нам нужно попасть на 4 регистр (SYSCFG_EXTICR4)
 800030e:	7a7a      	ldrb	r2, [r7, #9]
 8000310:	7abb      	ldrb	r3, [r7, #10]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	fa02 f103 	lsl.w	r1, r2, r3
 8000318:	4a20      	ldr	r2, [pc, #128]	; (800039c <main+0x170>)
 800031a:	7afb      	ldrb	r3, [r7, #11]
 800031c:	3302      	adds	r3, #2
 800031e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

//3. enable the exti interrupt delivery using IMR
EXTI->IMR |=(1<<GPIO_PIN_NO_13);
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <main+0x16c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <main+0x16c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000330:	601a      	str	r2, [r3, #0]
//4. Включаем клок на систем контроллер
//RCC->APB2ENR |= (1 << 14);		//SYSCFG_PCLK_EN(); нужно выяснить почему он клок включает до : SYSCFG->EXTICR[temp1]=portcode <<(temp2*4);

//Сбрасываем бит (гасим светодиод если он был включен)
//фактически определяем его состояние в момент включения.
GPIOA_RegDef->ODR &= ~( 1 << GPIO_PIN_NO_5);
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <main+0x164>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	695a      	ldr	r2, [r3, #20]
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <main+0x164>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f022 0220 	bic.w	r2, r2, #32
 8000340:	615a      	str	r2, [r3, #20]

//5. IRQ configurations
//	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10,NVIC_IRQ_PRI15);
//1. first lets find out the ipr register
uint8_t iprx=IRQ_NO_EXTI15_10/4;				//выесняем какой регистр IPRX
 8000342:	230a      	movs	r3, #10
 8000344:	723b      	strb	r3, [r7, #8]
uint8_t iprx_section=IRQ_NO_EXTI15_10 %4;		//выесняем какиая из 4 секций
 8000346:	2300      	movs	r3, #0
 8000348:	71fb      	strb	r3, [r7, #7]
uint8_t shift_ammount=(8*iprx_section)+(8-NO_PR_BITS_IMPLEMENTED);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	00db      	lsls	r3, r3, #3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	3304      	adds	r3, #4
 8000352:	71bb      	strb	r3, [r7, #6]
*(NVIC_PR_BASE_ADDR +iprx) |= (NVIC_IRQ_PRI15 <<shift_ammount);	/*(8*iprx_section)	 не умножаем на 4 так как арифметика указателей
 8000354:	7a3b      	ldrb	r3, [r7, #8]
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800035c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	210f      	movs	r1, #15
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	4619      	mov	r1, r3
 800036c:	7a3b      	ldrb	r3, [r7, #8]
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000374:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000378:	430a      	orrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]
не работает так как мы задумали на 4 потому что следуюший адрес регистра находится через 4 адреса */


//	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10,ENABLE);
//program ISER0 resgister
*NVIC_ISER1 |=(1<<(IRQ_NO_EXTI15_10 %32));
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <main+0x174>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a07      	ldr	r2, [pc, #28]	; (80003a0 <main+0x174>)
 8000382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000386:	6013      	str	r3, [r2, #0]


/* Loop forever */
	for(;;);
 8000388:	e7fe      	b.n	8000388 <main+0x15c>
 800038a:	bf00      	nop
 800038c:	20000008 	.word	0x20000008
 8000390:	20000000 	.word	0x20000000
 8000394:	20000004 	.word	0x20000004
 8000398:	2000000c 	.word	0x2000000c
 800039c:	40013800 	.word	0x40013800
 80003a0:	e000e104 	.word	0xe000e104

080003a4 <EXTI15_10_IRQHandler>:
}//END MAIN

void EXTI15_10_IRQHandler(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
   /// delay(); //200ms . wait till button de-bouncing gets over
	GPIO_IRQHandling(GPIO_PIN_NO_13); //clear the pending event from exti line
 80003a8:	200d      	movs	r0, #13
 80003aa:	f000 f80d 	bl	80003c8 <GPIO_IRQHandling>
	GPIO_ToggleOutPin(GPIOA_RegDef,GPIO_PIN_NO_5);
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <EXTI15_10_IRQHandler+0x20>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2105      	movs	r1, #5
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f829 	bl	800040c <GPIO_ToggleOutPin>
	delay();
 80003ba:	f7ff ff23 	bl	8000204 <delay>
}//EXTI15_10_IRQHandler         			/* EXTI Line[15:10] interrupts
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000000 	.word	0x20000000

080003c8 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if (EXTI->PR &(1<<PinNumber)){
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <GPIO_IRQHandling+0x40>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	79fa      	ldrb	r2, [r7, #7]
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	4013      	ands	r3, r2
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d00b      	beq.n	80003fe <GPIO_IRQHandling+0x36>
		//clear the pending register bit
		EXTI->PR |=(1<<PinNumber);
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <GPIO_IRQHandling+0x40>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <GPIO_IRQHandling+0x40>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	430a      	orrs	r2, r1
 80003fc:	615a      	str	r2, [r3, #20]
	}
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	2000000c 	.word	0x2000000c

0800040c <GPIO_ToggleOutPin>:

void GPIO_ToggleOutPin(GPIO_RegDef_t *GPIOA_RegDef, uint8_t PinNumber)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	70fb      	strb	r3, [r7, #3]
	GPIOA_RegDef->ODR  ^= ( 1 << PinNumber);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	78fa      	ldrb	r2, [r7, #3]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	405a      	eors	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	615a      	str	r2, [r3, #20]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000438:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 f811 	bl	8000488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff fee1 	bl	800022c <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000478:	080004f0 	.word	0x080004f0
  ldr r2, =_sbss
 800047c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000480:	2000002c 	.word	0x2000002c

08000484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <__libc_init_array>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	4d0d      	ldr	r5, [pc, #52]	; (80004c0 <__libc_init_array+0x38>)
 800048c:	4c0d      	ldr	r4, [pc, #52]	; (80004c4 <__libc_init_array+0x3c>)
 800048e:	1b64      	subs	r4, r4, r5
 8000490:	10a4      	asrs	r4, r4, #2
 8000492:	2600      	movs	r6, #0
 8000494:	42a6      	cmp	r6, r4
 8000496:	d109      	bne.n	80004ac <__libc_init_array+0x24>
 8000498:	4d0b      	ldr	r5, [pc, #44]	; (80004c8 <__libc_init_array+0x40>)
 800049a:	4c0c      	ldr	r4, [pc, #48]	; (80004cc <__libc_init_array+0x44>)
 800049c:	f000 f818 	bl	80004d0 <_init>
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	10a4      	asrs	r4, r4, #2
 80004a4:	2600      	movs	r6, #0
 80004a6:	42a6      	cmp	r6, r4
 80004a8:	d105      	bne.n	80004b6 <__libc_init_array+0x2e>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b0:	4798      	blx	r3
 80004b2:	3601      	adds	r6, #1
 80004b4:	e7ee      	b.n	8000494 <__libc_init_array+0xc>
 80004b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ba:	4798      	blx	r3
 80004bc:	3601      	adds	r6, #1
 80004be:	e7f2      	b.n	80004a6 <__libc_init_array+0x1e>
 80004c0:	080004e8 	.word	0x080004e8
 80004c4:	080004e8 	.word	0x080004e8
 80004c8:	080004e8 	.word	0x080004e8
 80004cc:	080004ec 	.word	0x080004ec

080004d0 <_init>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr

080004dc <_fini>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr
