
021_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f2c  08000f2c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f2c  08000f2c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000f2c  08000f2c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f2c  08000f2c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f2c  08000f2c  00010f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000018  08000f4c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000f4c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000189f  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000586  00000000  00000000  000218e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00021e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00022038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000291b  00000000  00000000  000221d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ead  00000000  00000000  00024aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a71f  00000000  00000000  00026998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000310b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ec  00000000  00000000  00031108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f14 	.word	0x08000f14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08000f14 	.word	0x08000f14

08000204 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x34

void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	0003d08f 	.word	0x0003d08f

08000230 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <I2C1_GPIOInits+0x40>)
 8000238:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800023a:	2302      	movs	r3, #2
 800023c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800023e:	2301      	movs	r3, #1
 8000240:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000242:	2301      	movs	r3, #1
 8000244:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000246:	2304      	movs	r3, #4
 8000248:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;	//GPOI_SPEED_HIGH
 800024a:	2302      	movs	r3, #2
 800024c:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800024e:	2306      	movs	r3, #6
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f989 	bl	800056c <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800025a:	2309      	movs	r3, #9
 800025c:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f983 	bl	800056c <GPIO_Init>
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020400 	.word	0x40020400

08000274 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <I2C1_Inits+0x2c>)
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <I2C1_Inits+0x30>)
 800027c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;		//I2C_ACK_ENABLE	//I2C_ACK_DISABLE
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <I2C1_Inits+0x2c>)
 8000280:	2201      	movs	r2, #1
 8000282:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <I2C1_Inits+0x2c>)
 8000286:	2261      	movs	r2, #97	; 0x61
 8000288:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <I2C1_Inits+0x2c>)
 800028c:	2200      	movs	r2, #0
 800028e:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <I2C1_Inits+0x2c>)
 8000292:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <I2C1_Inits+0x34>)
 8000294:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000296:	4802      	ldr	r0, [pc, #8]	; (80002a0 <I2C1_Inits+0x2c>)
 8000298:	f000 fc42 	bl	8000b20 <I2C_Init>

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000034 	.word	0x20000034
 80002a4:	40005400 	.word	0x40005400
 80002a8:	000186a0 	.word	0x000186a0

080002ac <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <GPIO_ButtonInit+0x2c>)
 80002b4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002b6:	230d      	movs	r3, #13
 80002b8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ba:	2300      	movs	r3, #0
 80002bc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002be:	2302      	movs	r3, #2
 80002c0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c2:	2300      	movs	r3, #0
 80002c4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f94f 	bl	800056c <GPIO_Init>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40020800 	.word	0x40020800

080002dc <main>:

int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af02      	add	r7, sp, #8

	//initialise_monitor_handles();

	//printf("Application is running\n");

	GPIO_ButtonInit();
 80002e2:	f7ff ffe3 	bl	80002ac <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002e6:	f7ff ffa3 	bl	8000230 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002ea:	f7ff ffc3 	bl	8000274 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002ee:	2101      	movs	r1, #1
 80002f0:	481d      	ldr	r0, [pc, #116]	; (8000368 <main+0x8c>)
 80002f2:	f000 fb67 	bl	80009c4 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80002f6:	2101      	movs	r1, #1
 80002f8:	481b      	ldr	r0, [pc, #108]	; (8000368 <main+0x8c>)
 80002fa:	f000 fdcb 	bl	8000e94 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 80002fe:	bf00      	nop
 8000300:	210d      	movs	r1, #13
 8000302:	481a      	ldr	r0, [pc, #104]	; (800036c <main+0x90>)
 8000304:	f000 faca 	bl	800089c <GPIO_ReadFromInputPin>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f8      	bne.n	8000300 <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800030e:	f7ff ff79 	bl	8000204 <delay>

		commandcode = 0x51;
 8000312:	2351      	movs	r3, #81	; 0x51
 8000314:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 8000316:	1df9      	adds	r1, r7, #7
 8000318:	2301      	movs	r3, #1
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2334      	movs	r3, #52	; 0x34
 800031e:	2201      	movs	r2, #1
 8000320:	4813      	ldr	r0, [pc, #76]	; (8000370 <main+0x94>)
 8000322:	f000 fcc6 	bl	8000cb2 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 8000326:	1db9      	adds	r1, r7, #6
 8000328:	2301      	movs	r3, #1
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	2334      	movs	r3, #52	; 0x34
 800032e:	2201      	movs	r2, #1
 8000330:	480f      	ldr	r0, [pc, #60]	; (8000370 <main+0x94>)
 8000332:	f000 fd21 	bl	8000d78 <I2C_MasterReceiveData>

		commandcode = 0x52;
 8000336:	2352      	movs	r3, #82	; 0x52
 8000338:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 800033a:	1df9      	adds	r1, r7, #7
 800033c:	2301      	movs	r3, #1
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2334      	movs	r3, #52	; 0x34
 8000342:	2201      	movs	r2, #1
 8000344:	480a      	ldr	r0, [pc, #40]	; (8000370 <main+0x94>)
 8000346:	f000 fcb4 	bl	8000cb2 <I2C_MasterSendData>


		I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	2300      	movs	r3, #0
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2334      	movs	r3, #52	; 0x34
 8000352:	4908      	ldr	r1, [pc, #32]	; (8000374 <main+0x98>)
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <main+0x94>)
 8000356:	f000 fd0f 	bl	8000d78 <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	3301      	adds	r3, #1
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <main+0x98>)
 8000360:	2100      	movs	r1, #0
 8000362:	54d1      	strb	r1, [r2, r3]
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000364:	e7cb      	b.n	80002fe <main+0x22>
 8000366:	bf00      	nop
 8000368:	40005400 	.word	0x40005400
 800036c:	40020800 	.word	0x40020800
 8000370:	20000034 	.word	0x20000034
 8000374:	2000005c 	.word	0x2000005c

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 fd91 	bl	8000ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff97 	bl	80002dc <main>

080003ae <LoopForever>:

LoopForever:
    b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80003bc:	08000f34 	.word	0x08000f34
  ldr r2, =_sbss
 80003c0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003c4:	2000007c 	.word	0x2000007c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <GPIO_PeriClockControl>:
 *@Note					- none
 *
 * */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDI)	//
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
	if (EnorDI==ENABLE)
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d157      	bne.n	800048e <GPIO_PeriClockControl+0xc2>
	{
		if		(pGPIOx==GPIOA){
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a59      	ldr	r2, [pc, #356]	; (8000548 <GPIO_PeriClockControl+0x17c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003e6:	4b59      	ldr	r3, [pc, #356]	; (800054c <GPIO_PeriClockControl+0x180>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a58      	ldr	r2, [pc, #352]	; (800054c <GPIO_PeriClockControl+0x180>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
					GPIOG_PCLK_DI();
				}else if(pGPIOx==GPIOH){
					GPIOH_PCLK_DI();
				}
	}
}//END GPIO_PeriClockControl
 80003f2:	e0a3      	b.n	800053c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOB){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a56      	ldr	r2, [pc, #344]	; (8000550 <GPIO_PeriClockControl+0x184>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003fc:	4b53      	ldr	r3, [pc, #332]	; (800054c <GPIO_PeriClockControl+0x180>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a52      	ldr	r2, [pc, #328]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000408:	e098      	b.n	800053c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOC){
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a51      	ldr	r2, [pc, #324]	; (8000554 <GPIO_PeriClockControl+0x188>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000412:	4b4e      	ldr	r3, [pc, #312]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a4d      	ldr	r2, [pc, #308]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800041e:	e08d      	b.n	800053c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOD){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a4d      	ldr	r2, [pc, #308]	; (8000558 <GPIO_PeriClockControl+0x18c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000428:	4b48      	ldr	r3, [pc, #288]	; (800054c <GPIO_PeriClockControl+0x180>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a47      	ldr	r2, [pc, #284]	; (800054c <GPIO_PeriClockControl+0x180>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000434:	e082      	b.n	800053c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOE){
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a48      	ldr	r2, [pc, #288]	; (800055c <GPIO_PeriClockControl+0x190>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800043e:	4b43      	ldr	r3, [pc, #268]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a42      	ldr	r2, [pc, #264]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000444:	f043 0310 	orr.w	r3, r3, #16
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800044a:	e077      	b.n	800053c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOF){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a44      	ldr	r2, [pc, #272]	; (8000560 <GPIO_PeriClockControl+0x194>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000454:	4b3d      	ldr	r3, [pc, #244]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a3c      	ldr	r2, [pc, #240]	; (800054c <GPIO_PeriClockControl+0x180>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000460:	e06c      	b.n	800053c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOG){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a3f      	ldr	r2, [pc, #252]	; (8000564 <GPIO_PeriClockControl+0x198>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800046a:	4b38      	ldr	r3, [pc, #224]	; (800054c <GPIO_PeriClockControl+0x180>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a37      	ldr	r2, [pc, #220]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000476:	e061      	b.n	800053c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOH){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a3b      	ldr	r2, [pc, #236]	; (8000568 <GPIO_PeriClockControl+0x19c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d15d      	bne.n	800053c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000480:	4b32      	ldr	r3, [pc, #200]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a31      	ldr	r2, [pc, #196]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800048c:	e056      	b.n	800053c <GPIO_PeriClockControl+0x170>
		if		(pGPIOx==GPIOA){
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a2d      	ldr	r2, [pc, #180]	; (8000548 <GPIO_PeriClockControl+0x17c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000496:	4b2d      	ldr	r3, [pc, #180]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a2c      	ldr	r2, [pc, #176]	; (800054c <GPIO_PeriClockControl+0x180>)
 800049c:	f023 0301 	bic.w	r3, r3, #1
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004a2:	e04b      	b.n	800053c <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOB){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <GPIO_PeriClockControl+0x184>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a26      	ldr	r2, [pc, #152]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004b2:	f023 0302 	bic.w	r3, r3, #2
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004b8:	e040      	b.n	800053c <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOC){
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a25      	ldr	r2, [pc, #148]	; (8000554 <GPIO_PeriClockControl+0x188>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a21      	ldr	r2, [pc, #132]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004c8:	f023 0304 	bic.w	r3, r3, #4
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004ce:	e035      	b.n	800053c <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOD){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a21      	ldr	r2, [pc, #132]	; (8000558 <GPIO_PeriClockControl+0x18c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a1b      	ldr	r2, [pc, #108]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004de:	f023 0308 	bic.w	r3, r3, #8
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004e4:	e02a      	b.n	800053c <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOE){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a1c      	ldr	r2, [pc, #112]	; (800055c <GPIO_PeriClockControl+0x190>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <GPIO_PeriClockControl+0x180>)
 80004f4:	f023 0310 	bic.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004fa:	e01f      	b.n	800053c <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOF){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <GPIO_PeriClockControl+0x194>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a10      	ldr	r2, [pc, #64]	; (800054c <GPIO_PeriClockControl+0x180>)
 800050a:	f023 0320 	bic.w	r3, r3, #32
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000510:	e014      	b.n	800053c <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOG){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <GPIO_PeriClockControl+0x198>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <GPIO_PeriClockControl+0x180>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000526:	e009      	b.n	800053c <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOH){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <GPIO_PeriClockControl+0x19c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d105      	bne.n	800053c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <GPIO_PeriClockControl+0x180>)
 8000536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40020000 	.word	0x40020000
 800054c:	40023800 	.word	0x40023800
 8000550:	40020400 	.word	0x40020400
 8000554:	40020800 	.word	0x40020800
 8000558:	40020c00 	.word	0x40020c00
 800055c:	40021000 	.word	0x40021000
 8000560:	40021400 	.word	0x40021400
 8000564:	40021800 	.word	0x40021800
 8000568:	40021c00 	.word	0x40021c00

0800056c <GPIO_Init>:
 *@return				-
 *
 *@Note					-
 *
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; 		//temp. register
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ff24 	bl	80003cc <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d822      	bhi.n	80005d2 <GPIO_Init+0x66>
		//the non interrupt mode.
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &=~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		//clearing
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp;		//setting
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
		temp=0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	e0c1      	b.n	8000756 <GPIO_Init+0x1ea>
	}else{	//Interrupt mode. Выбираем по фроннту или по спаду будет зафиксировано прерывание
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_FT){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d817      	bhi.n	800060a <GPIO_Init+0x9e>
			//1.configure the FTSR
			EXTI->FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.4 Falling trigger selection register (EXTI_FTSR)
 80005da:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <GPIO_Init+0x18c>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	4611      	mov	r1, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	408a      	lsls	r2, r1
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a43      	ldr	r2, [pc, #268]	; (80006f8 <GPIO_Init+0x18c>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &=~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.3 Rising trigger selection register (EXTI_RTSR)
 80005f0:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <GPIO_Init+0x18c>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	7912      	ldrb	r2, [r2, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	2201      	movs	r2, #1
 80005fc:	408a      	lsls	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	4611      	mov	r1, r2
 8000602:	4a3d      	ldr	r2, [pc, #244]	; (80006f8 <GPIO_Init+0x18c>)
 8000604:	400b      	ands	r3, r1
 8000606:	6093      	str	r3, [r2, #8]
 8000608:	e035      	b.n	8000676 <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RT){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	795b      	ldrb	r3, [r3, #5]
 800060e:	2b05      	cmp	r3, #5
 8000610:	d817      	bhi.n	8000642 <GPIO_Init+0xd6>
			//1.configure the RTSR
			EXTI->RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <GPIO_Init+0x18c>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7912      	ldrb	r2, [r2, #4]
 800061a:	4611      	mov	r1, r2
 800061c:	2201      	movs	r2, #1
 800061e:	408a      	lsls	r2, r1
 8000620:	4611      	mov	r1, r2
 8000622:	4a35      	ldr	r2, [pc, #212]	; (80006f8 <GPIO_Init+0x18c>)
 8000624:	430b      	orrs	r3, r1
 8000626:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &=~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000628:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <GPIO_Init+0x18c>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4611      	mov	r1, r2
 8000632:	2201      	movs	r2, #1
 8000634:	408a      	lsls	r2, r1
 8000636:	43d2      	mvns	r2, r2
 8000638:	4611      	mov	r1, r2
 800063a:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <GPIO_Init+0x18c>)
 800063c:	400b      	ands	r3, r1
 800063e:	60d3      	str	r3, [r2, #12]
 8000640:	e019      	b.n	8000676 <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RFT){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	2b06      	cmp	r3, #6
 8000648:	d815      	bhi.n	8000676 <GPIO_Init+0x10a>
			//1.configure both FTSR and RTSR
			EXTI->RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <GPIO_Init+0x18c>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <GPIO_Init+0x18c>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <GPIO_Init+0x18c>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <GPIO_Init+0x18c>)
 8000672:	430b      	orrs	r3, r1
 8000674:	60d3      	str	r3, [r2, #12]
		//2. configure GPIO port selection in SYSCFG_EXTICR
		//Будем расчитывать позицию EXTIx в регистрах
		/*Всего 4 регистра SYSCFG_EXTICR2 из каждого регистра используются первые 16 бит. Каждый регистр отвечает за 4 линии EXTI
		 * К каждой линии EXTI можно подключить путем записи 4 битного числа только один пин порта под номером соответствующему номеру линии EXTI
		 *Пример: к линии EXTI5 можно подключить PA5 либо PB5 либо... PE5*/
		uint8_t	temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	74fb      	strb	r3, [r7, #19]
		uint8_t	temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode=GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <GPIO_Init+0x190>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d044      	beq.n	800071c <GPIO_Init+0x1b0>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <GPIO_Init+0x194>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d02b      	beq.n	80006f4 <GPIO_Init+0x188>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a18      	ldr	r2, [pc, #96]	; (8000704 <GPIO_Init+0x198>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d024      	beq.n	80006f0 <GPIO_Init+0x184>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <GPIO_Init+0x19c>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d01d      	beq.n	80006ec <GPIO_Init+0x180>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <GPIO_Init+0x1a0>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d016      	beq.n	80006e8 <GPIO_Init+0x17c>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <GPIO_Init+0x1a4>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d00f      	beq.n	80006e4 <GPIO_Init+0x178>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <GPIO_Init+0x1a8>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d008      	beq.n	80006e0 <GPIO_Init+0x174>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <GPIO_Init+0x1ac>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d101      	bne.n	80006dc <GPIO_Init+0x170>
 80006d8:	2307      	movs	r3, #7
 80006da:	e020      	b.n	800071e <GPIO_Init+0x1b2>
 80006dc:	2300      	movs	r3, #0
 80006de:	e01e      	b.n	800071e <GPIO_Init+0x1b2>
 80006e0:	2306      	movs	r3, #6
 80006e2:	e01c      	b.n	800071e <GPIO_Init+0x1b2>
 80006e4:	2305      	movs	r3, #5
 80006e6:	e01a      	b.n	800071e <GPIO_Init+0x1b2>
 80006e8:	2304      	movs	r3, #4
 80006ea:	e018      	b.n	800071e <GPIO_Init+0x1b2>
 80006ec:	2303      	movs	r3, #3
 80006ee:	e016      	b.n	800071e <GPIO_Init+0x1b2>
 80006f0:	2302      	movs	r3, #2
 80006f2:	e014      	b.n	800071e <GPIO_Init+0x1b2>
 80006f4:	2301      	movs	r3, #1
 80006f6:	e012      	b.n	800071e <GPIO_Init+0x1b2>
 80006f8:	40013c00 	.word	0x40013c00
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400
 8000704:	40020800 	.word	0x40020800
 8000708:	40020c00 	.word	0x40020c00
 800070c:	40021000 	.word	0x40021000
 8000710:	40021400 	.word	0x40021400
 8000714:	40021800 	.word	0x40021800
 8000718:	40021c00 	.word	0x40021c00
 800071c:	2300      	movs	r3, #0
 800071e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000720:	4b5b      	ldr	r3, [pc, #364]	; (8000890 <GPIO_Init+0x324>)
 8000722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000724:	4a5a      	ldr	r2, [pc, #360]	; (8000890 <GPIO_Init+0x324>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode <<(temp2*4);
 800072c:	7c7a      	ldrb	r2, [r7, #17]
 800072e:	7cbb      	ldrb	r3, [r7, #18]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	fa02 f103 	lsl.w	r1, r2, r3
 8000736:	4a57      	ldr	r2, [pc, #348]	; (8000894 <GPIO_Init+0x328>)
 8000738:	7cfb      	ldrb	r3, [r7, #19]
 800073a:	3302      	adds	r3, #2
 800073c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.1 Interrupt mask register (EXTI_IMR)
 8000740:	4b55      	ldr	r3, [pc, #340]	; (8000898 <GPIO_Init+0x32c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7912      	ldrb	r2, [r2, #4]
 8000748:	4611      	mov	r1, r2
 800074a:	2201      	movs	r2, #1
 800074c:	408a      	lsls	r2, r1
 800074e:	4611      	mov	r1, r2
 8000750:	4a51      	ldr	r2, [pc, #324]	; (8000898 <GPIO_Init+0x32c>)
 8000752:	430b      	orrs	r3, r1
 8000754:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

	//2.configure the speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	799b      	ldrb	r3, [r3, #6]
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	4619      	mov	r1, r3
 8000778:	2303      	movs	r3, #3
 800077a:	408b      	lsls	r3, r1
 800077c:	43db      	mvns	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	400a      	ands	r2, r1
 8000786:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6899      	ldr	r1, [r3, #8]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	430a      	orrs	r2, r1
 8000796:	609a      	str	r2, [r3, #8]
	temp=0;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

	//3.configure the pudp setting
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	79db      	ldrb	r3, [r3, #7]
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68da      	ldr	r2, [r3, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2303      	movs	r3, #3
 80007bc:	408b      	lsls	r3, r1
 80007be:	43db      	mvns	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	400a      	ands	r2, r1
 80007c8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68d9      	ldr	r1, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	60da      	str	r2, [r3, #12]
	temp=0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7a1b      	ldrb	r3, [r3, #8]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &=~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	4619      	mov	r1, r3
 80007fa:	2301      	movs	r3, #1
 80007fc:	408b      	lsls	r3, r1
 80007fe:	43db      	mvns	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	400a      	ands	r2, r1
 8000808:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6859      	ldr	r1, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	430a      	orrs	r2, r1
 8000818:	605a      	str	r2, [r3, #4]

	//5. configure the alt fuctionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d131      	bne.n	8000886 <GPIO_Init+0x31a>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	743b      	strb	r3, [r7, #16]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &=~(0xF<<(4*temp2));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	7c3a      	ldrb	r2, [r7, #16]
 800083a:	3208      	adds	r2, #8
 800083c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	220f      	movs	r2, #15
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	7c3a      	ldrb	r2, [r7, #16]
 8000854:	4001      	ands	r1, r0
 8000856:	3208      	adds	r2, #8
 8000858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	7c3a      	ldrb	r2, [r7, #16]
 8000862:	3208      	adds	r2, #8
 8000864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7a5b      	ldrb	r3, [r3, #9]
 800086c:	461a      	mov	r2, r3
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	7c3a      	ldrb	r2, [r7, #16]
 800087e:	4301      	orrs	r1, r0
 8000880:	3208      	adds	r2, #8
 8000882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40013800 	.word	0x40013800
 8000898:	40013c00 	.word	0x40013c00

0800089c <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -

 */
uint8_t  GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){	//возвращает булевое значение
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	691a      	ldr	r2, [r3, #16]
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	fa22 f303 	lsr.w	r3, r2, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]

	return value;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008fe:	78fa      	ldrb	r2, [r7, #3]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	611a      	str	r2, [r3, #16]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000928:	78fa      	ldrb	r2, [r7, #3]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	611a      	str	r2, [r3, #16]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d01f      	beq.n	800098e <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7f1b      	ldrb	r3, [r3, #28]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d112      	bne.n	800097c <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d11f      	bne.n	800099e <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fa95 	bl	8000e94 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800097a:	e010      	b.n	800099e <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	60fb      	str	r3, [r7, #12]
}
 800098c:	e007      	b.n	800099e <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	60fb      	str	r3, [r7, #12]
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d106      	bne.n	80009e4 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f043 0201 	orr.w	r2, r3, #1
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 80009e2:	e005      	b.n	80009f0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 0201 	bic.w	r2, r3, #1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
	...

080009fc <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d11f      	bne.n	8000a4e <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <I2C_PeriClockControl+0x5c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <I2C_PeriClockControl+0x60>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <I2C_PeriClockControl+0x60>)
 8000a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000a22:	e014      	b.n	8000a4e <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <I2C_PeriClockControl+0x64>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <I2C_PeriClockControl+0x60>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <I2C_PeriClockControl+0x60>)
 8000a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a38:	e009      	b.n	8000a4e <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <I2C_PeriClockControl+0x68>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d105      	bne.n	8000a4e <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <I2C_PeriClockControl+0x60>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <I2C_PeriClockControl+0x60>)
 8000a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40005800 	.word	0x40005800
 8000a64:	40005c00 	.word	0x40005c00

08000a68 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
	...

08000a78 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp,apb1p;

	clksrc=((RCC->CFGR>>2) &0x3);
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <RCC_GetPCLK1Value+0x98>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	727b      	strb	r3, [r7, #9]

	if (clksrc==0)
 8000a8c:	7a7b      	ldrb	r3, [r7, #9]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <RCC_GetPCLK1Value+0x20>
	{
	SystemClk=16000000;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <RCC_GetPCLK1Value+0x9c>)
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e008      	b.n	8000aaa <RCC_GetPCLK1Value+0x32>
	}else if(clksrc==1)
 8000a98:	7a7b      	ldrb	r3, [r7, #9]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d005      	beq.n	8000aaa <RCC_GetPCLK1Value+0x32>
	{
	SystemClk==8000000;
	}else if (clksrc==2)
 8000a9e:	7a7b      	ldrb	r3, [r7, #9]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d102      	bne.n	8000aaa <RCC_GetPCLK1Value+0x32>
	{
	SystemClk=RCC_GetPLLOutputClock();
 8000aa4:	f7ff ffe0 	bl	8000a68 <RCC_GetPLLOutputClock>
 8000aa8:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp=((RCC->CFGR>>4) &0xF);
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <RCC_GetPCLK1Value+0x98>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	723b      	strb	r3, [r7, #8]
	if (temp<8)
 8000ab8:	7a3b      	ldrb	r3, [r7, #8]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d802      	bhi.n	8000ac4 <RCC_GetPCLK1Value+0x4c>
	{
		ahbp=1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	72fb      	strb	r3, [r7, #11]
 8000ac2:	e005      	b.n	8000ad0 <RCC_GetPCLK1Value+0x58>
	}else
	{
		ahbp=AHB_Prescaler[temp-8];
 8000ac4:	7a3b      	ldrb	r3, [r7, #8]
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <RCC_GetPCLK1Value+0xa0>)
 8000aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ace:	72fb      	strb	r3, [r7, #11]
	}
	//for apb1
	temp=((RCC->CFGR>>10) &0x7);
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <RCC_GetPCLK1Value+0x98>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	0a9b      	lsrs	r3, r3, #10
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	723b      	strb	r3, [r7, #8]
		if (temp<4)
 8000ade:	7a3b      	ldrb	r3, [r7, #8]
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d802      	bhi.n	8000aea <RCC_GetPCLK1Value+0x72>
		{
			apb1p=1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	72bb      	strb	r3, [r7, #10]
 8000ae8:	e005      	b.n	8000af6 <RCC_GetPCLK1Value+0x7e>
		}else
		{
			ahbp=APB1_Prescaler[temp-4];
 8000aea:	7a3b      	ldrb	r3, [r7, #8]
 8000aec:	3b04      	subs	r3, #4
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <RCC_GetPCLK1Value+0xa4>)
 8000af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af4:	72fb      	strb	r3, [r7, #11]
		}

		pclk1=(SystemClk/ahbp) /apb1p;
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000b06:	687b      	ldr	r3, [r7, #4]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	00f42400 	.word	0x00f42400
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000010 	.word	0x20000010

08000b20 <I2C_Init>:
5.Configurte the rise time for I23C pins

toate aceste initializari trebuie facute cu perifiricul dezactivat
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff62 	bl	80009fc <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7a5b      	ldrb	r3, [r3, #9]
 8000b3c:	029b      	lsls	r3, r3, #10
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;						//aici intra in loop
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000b5a:	f7ff ff8d 	bl	8000a78 <RCC_GetPCLK1Value>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <I2C_Init+0x160>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b78:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7a1b      	ldrb	r3, [r3, #8]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	461a      	mov	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <I2C_Init+0x164>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d80f      	bhi.n	8000bce <I2C_Init+0xae>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bae:	f7ff ff63 	bl	8000a78 <RCC_GetPCLK1Value>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000bc0:	897b      	ldrh	r3, [r7, #10]
 8000bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	e02d      	b.n	8000c2a <I2C_Init+0x10a>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7a9b      	ldrb	r3, [r3, #10]
 8000bda:	039b      	lsls	r3, r3, #14
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7a9b      	ldrb	r3, [r3, #10]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10b      	bne.n	8000c04 <I2C_Init+0xe4>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bec:	f7ff ff44 	bl	8000a78 <RCC_GetPCLK1Value>
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c00:	817b      	strh	r3, [r7, #10]
 8000c02:	e00c      	b.n	8000c1e <I2C_Init+0xfe>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c04:	f7ff ff38 	bl	8000a78 <RCC_GetPCLK1Value>
 8000c08:	4601      	mov	r1, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	009a      	lsls	r2, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c1c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c1e:	897b      	ldrh	r3, [r7, #10]
 8000c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <I2C_Init+0x164>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d809      	bhi.n	8000c50 <I2C_Init+0x130>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000c3c:	f7ff ff1c 	bl	8000a78 <RCC_GetPCLK1Value>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <I2C_Init+0x160>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	0c9b      	lsrs	r3, r3, #18
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e00d      	b.n	8000c6c <I2C_Init+0x14c>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000c50:	f7ff ff12 	bl	8000a78 <RCC_GetPCLK1Value>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	0a5b      	lsrs	r3, r3, #9
 8000c60:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <I2C_Init+0x168>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	09db      	lsrs	r3, r3, #7
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c76:	621a      	str	r2, [r3, #32]

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	431bde83 	.word	0x431bde83
 8000c84:	000186a0 	.word	0x000186a0
 8000c88:	00044b83 	.word	0x00044b83

08000c8c <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fdfe 	bl	80008c6 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000cca:	bf00      	nop
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ffda 	bl	8000c8c <I2C_GetFlagStatus>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f6      	beq.n	8000ccc <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fdfc 	bl	80008e4 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000cec:	bf00      	nop
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffc9 	bl	8000c8c <I2C_GetFlagStatus>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f6      	beq.n	8000cee <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff fe19 	bl	8000938 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000d06:	e014      	b.n	8000d32 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000d08:	bf00      	nop
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ffbb 	bl	8000c8c <I2C_GetFlagStatus>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f6      	beq.n	8000d0a <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1e7      	bne.n	8000d08 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000d38:	bf00      	nop
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ffa3 	bl	8000c8c <I2C_GetFlagStatus>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f6      	beq.n	8000d3a <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000d4c:	bf00      	nop
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2104      	movs	r1, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff99 	bl	8000c8c <I2C_GetFlagStatus>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f6      	beq.n	8000d4e <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000d60:	7e3b      	ldrb	r3, [r7, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d104      	bne.n	8000d70 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fe1b 	bl	80009a6 <I2C_GenerateStopCondition>

}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	460b      	mov	r3, r1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fd97 	bl	80008c6 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000d98:	bf00      	nop
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff73 	bl	8000c8c <I2C_GetFlagStatus>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f6      	beq.n	8000d9a <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fdaa 	bl	800090e <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000dba:	bf00      	nop
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff62 	bl	8000c8c <I2C_GetFlagStatus>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f6      	beq.n	8000dbc <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d121      	bne.n	8000e18 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f85a 	bl	8000e94 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fda9 	bl	8000938 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000de6:	bf00      	nop
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff4c 	bl	8000c8c <I2C_GetFlagStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f6      	beq.n	8000de8 <I2C_MasterReceiveData+0x70>

		//generate STOP condition		//se poate si dupa Acking
		if(Sr == I2C_DISABLE_SR )
 8000dfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d104      	bne.n	8000e0c <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fdcd 	bl	80009a6 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d92c      	bls.n	8000e78 <I2C_MasterReceiveData+0x100>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff fd8a 	bl	8000938 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e023      	b.n	8000e72 <I2C_MasterReceiveData+0xfa>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000e2a:	bf00      	nop
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2140      	movs	r1, #64	; 0x40
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff2a 	bl	8000c8c <I2C_GetFlagStatus>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f6      	beq.n	8000e2c <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d10a      	bne.n	8000e5a <I2C_MasterReceiveData+0xe2>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f822 	bl	8000e94 <I2C_ManageAcking>

				//generate STOP condition
		//		if(Sr == I2C_DISABLE_SR )			//in video nui asta
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fda6 	bl	80009a6 <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1d8      	bne.n	8000e2a <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	7a5b      	ldrb	r3, [r3, #9]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <I2C_MasterReceiveData+0x114>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f804 	bl	8000e94 <I2C_ManageAcking>
	}

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d106      	bne.n	8000eb4 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000eb2:	e005      	b.n	8000ec0 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <__libc_init_array>:
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	4d0d      	ldr	r5, [pc, #52]	; (8000f04 <__libc_init_array+0x38>)
 8000ed0:	4c0d      	ldr	r4, [pc, #52]	; (8000f08 <__libc_init_array+0x3c>)
 8000ed2:	1b64      	subs	r4, r4, r5
 8000ed4:	10a4      	asrs	r4, r4, #2
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	42a6      	cmp	r6, r4
 8000eda:	d109      	bne.n	8000ef0 <__libc_init_array+0x24>
 8000edc:	4d0b      	ldr	r5, [pc, #44]	; (8000f0c <__libc_init_array+0x40>)
 8000ede:	4c0c      	ldr	r4, [pc, #48]	; (8000f10 <__libc_init_array+0x44>)
 8000ee0:	f000 f818 	bl	8000f14 <_init>
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	10a4      	asrs	r4, r4, #2
 8000ee8:	2600      	movs	r6, #0
 8000eea:	42a6      	cmp	r6, r4
 8000eec:	d105      	bne.n	8000efa <__libc_init_array+0x2e>
 8000eee:	bd70      	pop	{r4, r5, r6, pc}
 8000ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef4:	4798      	blx	r3
 8000ef6:	3601      	adds	r6, #1
 8000ef8:	e7ee      	b.n	8000ed8 <__libc_init_array+0xc>
 8000efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000efe:	4798      	blx	r3
 8000f00:	3601      	adds	r6, #1
 8000f02:	e7f2      	b.n	8000eea <__libc_init_array+0x1e>
 8000f04:	08000f2c 	.word	0x08000f2c
 8000f08:	08000f2c 	.word	0x08000f2c
 8000f0c:	08000f2c 	.word	0x08000f2c
 8000f10:	08000f30 	.word	0x08000f30

08000f14 <_init>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	bf00      	nop
 8000f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1a:	bc08      	pop	{r3}
 8000f1c:	469e      	mov	lr, r3
 8000f1e:	4770      	bx	lr

08000f20 <_fini>:
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	bf00      	nop
 8000f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f26:	bc08      	pop	{r3}
 8000f28:	469e      	mov	lr, r3
 8000f2a:	4770      	bx	lr
