
021_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aa8  08000aa8  00010ab0  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa8  08000aa8  00010ab0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa8  08000ab0  00010ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ab0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ab0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010ab0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001159  00000000  00000000  00010ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003e5  00000000  00000000  00011c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00012018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00012130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020d4  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015a3  00000000  00000000  000142e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008b74  00000000  00000000  00015887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001e3fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000038c  00000000  00000000  0001e44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a84 	.word	0x08000a84

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000a84 	.word	0x08000a84

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <SPI2_GPIOInits>:
 * */
#include <string.h>
#include "stm32f446xx.h"

void SPI2_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx=GPIOB;
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <SPI2_GPIOInits+0x4c>)
 800021c:	607b      	str	r3, [r7, #4]

	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode=5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//SCK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 8000232:	230d      	movs	r3, #13
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f94f 	bl	80004dc <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_15;
 800023e:	230f      	movs	r3, #15
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f949 	bl	80004dc <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_12;
 800024a:	230c      	movs	r3, #12
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f943 	bl	80004dc <GPIO_Init>

}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40020400 	.word	0x40020400

08000264 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx=SPI2;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <SPI2_Inits+0x38>)
 800026c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig=SPI_BUS_CONFIG_FD;
 800026e:	2301      	movs	r3, #1
 8000270:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode=SPI_DEVICE_MODE_MASTER;
 8000272:	2301      	movs	r3, #1
 8000274:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed=SPI_SCLK_SPEED_DIV2;		//generates SCLK of 8MHz
 8000276:	2300      	movs	r3, #0
 8000278:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF=SPI_DFF_8BITS;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL=SPI_CPOL_LOW;
 800027e:	2301      	movs	r3, #1
 8000280:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA=SPI_CPHA_LOW;
 8000282:	2300      	movs	r3, #0
 8000284:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM=SPI_SSM_EN;		//software slave management enable for NSS pin
 8000286:	2301      	movs	r3, #1
 8000288:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fb05 	bl	800089c <SPI_Init>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40003800 	.word	0x40003800

080002a0 <main>:

int main (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	char user_data[]="Hello worls";
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <main+0x40>)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//initialize the GPIO pins te behave as SPI2 pins
	SPI2_GPIOInits();
 80002b0:	f7ff ffb0 	bl	8000214 <SPI2_GPIOInits>

	//initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002b4:	f7ff ffd6 	bl	8000264 <SPI2_Inits>

	//this make NSS signal internaly high and
	SPI_SSIConfig(SPI2, ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	480a      	ldr	r0, [pc, #40]	; (80002e4 <main+0x44>)
 80002bc:	f000 fba3 	bl	8000a06 <SPI_SSIConfig>

	//enable the SPI peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <main+0x44>)
 80002c4:	f000 fb84 	bl	80009d0 <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2,(uint8_t*)user_data, strlen(user_data));
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff9a 	bl	8000204 <strlen>
 80002d0:	4602      	mov	r2, r0
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	4803      	ldr	r0, [pc, #12]	; (80002e4 <main+0x44>)
 80002d8:	f000 fb47 	bl	800096a <SPI_SendData>

	while(1);
 80002dc:	e7fe      	b.n	80002dc <main+0x3c>
 80002de:	bf00      	nop
 80002e0:	08000a9c 	.word	0x08000a9c
 80002e4:	40003800 	.word	0x40003800

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 fb91 	bl	8000a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ffc1 	bl	80002a0 <main>

0800031e <LoopForever>:

LoopForever:
    b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800032c:	08000ab0 	.word	0x08000ab0
  ldr r2, =_sbss
 8000330:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000334:	2000001c 	.word	0x2000001c

08000338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <GPIO_PeriClockControl>:
 *@Note					- none
 *
 * */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDI)	//
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
	if (EnorDI==ENABLE)
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d157      	bne.n	80003fe <GPIO_PeriClockControl+0xc2>
	{
		if		(pGPIOx==GPIOA){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a59      	ldr	r2, [pc, #356]	; (80004b8 <GPIO_PeriClockControl+0x17c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000356:	4b59      	ldr	r3, [pc, #356]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a58      	ldr	r2, [pc, #352]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
					GPIOG_PCLK_DI();
				}else if(pGPIOx==GPIOH){
					GPIOH_PCLK_DI();
				}
	}
}//END GPIO_PeriClockControl
 8000362:	e0a3      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOB){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a56      	ldr	r2, [pc, #344]	; (80004c0 <GPIO_PeriClockControl+0x184>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800036c:	4b53      	ldr	r3, [pc, #332]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a52      	ldr	r2, [pc, #328]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000378:	e098      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOC){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a51      	ldr	r2, [pc, #324]	; (80004c4 <GPIO_PeriClockControl+0x188>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000382:	4b4e      	ldr	r3, [pc, #312]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a4d      	ldr	r2, [pc, #308]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800038e:	e08d      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOD){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a4d      	ldr	r2, [pc, #308]	; (80004c8 <GPIO_PeriClockControl+0x18c>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000398:	4b48      	ldr	r3, [pc, #288]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a47      	ldr	r2, [pc, #284]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80003a4:	e082      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOE){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a48      	ldr	r2, [pc, #288]	; (80004cc <GPIO_PeriClockControl+0x190>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ae:	4b43      	ldr	r3, [pc, #268]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a42      	ldr	r2, [pc, #264]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003b4:	f043 0310 	orr.w	r3, r3, #16
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80003ba:	e077      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOF){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a44      	ldr	r2, [pc, #272]	; (80004d0 <GPIO_PeriClockControl+0x194>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003c4:	4b3d      	ldr	r3, [pc, #244]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a3c      	ldr	r2, [pc, #240]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80003d0:	e06c      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOG){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a3f      	ldr	r2, [pc, #252]	; (80004d4 <GPIO_PeriClockControl+0x198>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a37      	ldr	r2, [pc, #220]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80003e6:	e061      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOH){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a3b      	ldr	r2, [pc, #236]	; (80004d8 <GPIO_PeriClockControl+0x19c>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d15d      	bne.n	80004ac <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80003f0:	4b32      	ldr	r3, [pc, #200]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a31      	ldr	r2, [pc, #196]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80003f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80003fc:	e056      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		if		(pGPIOx==GPIOA){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a2d      	ldr	r2, [pc, #180]	; (80004b8 <GPIO_PeriClockControl+0x17c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000406:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a2c      	ldr	r2, [pc, #176]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800040c:	f023 0301 	bic.w	r3, r3, #1
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000412:	e04b      	b.n	80004ac <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOB){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a2a      	ldr	r2, [pc, #168]	; (80004c0 <GPIO_PeriClockControl+0x184>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a26      	ldr	r2, [pc, #152]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000422:	f023 0302 	bic.w	r3, r3, #2
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000428:	e040      	b.n	80004ac <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOC){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a25      	ldr	r2, [pc, #148]	; (80004c4 <GPIO_PeriClockControl+0x188>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000438:	f023 0304 	bic.w	r3, r3, #4
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800043e:	e035      	b.n	80004ac <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOD){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a21      	ldr	r2, [pc, #132]	; (80004c8 <GPIO_PeriClockControl+0x18c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800044e:	f023 0308 	bic.w	r3, r3, #8
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000454:	e02a      	b.n	80004ac <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOE){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <GPIO_PeriClockControl+0x190>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a16      	ldr	r2, [pc, #88]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000464:	f023 0310 	bic.w	r3, r3, #16
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800046a:	e01f      	b.n	80004ac <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOF){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <GPIO_PeriClockControl+0x194>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800047a:	f023 0320 	bic.w	r3, r3, #32
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000480:	e014      	b.n	80004ac <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOG){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <GPIO_PeriClockControl+0x198>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <GPIO_PeriClockControl+0x180>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <GPIO_PeriClockControl+0x180>)
 8000490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000496:	e009      	b.n	80004ac <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOH){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <GPIO_PeriClockControl+0x19c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d105      	bne.n	80004ac <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <GPIO_PeriClockControl+0x180>)
 80004a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40020c00 	.word	0x40020c00
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40021400 	.word	0x40021400
 80004d4:	40021800 	.word	0x40021800
 80004d8:	40021c00 	.word	0x40021c00

080004dc <GPIO_Init>:
 *@return				-
 *
 *@Note					-
 *
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; 		//temp. register
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff24 	bl	800033c <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d822      	bhi.n	8000542 <GPIO_Init+0x66>
		//the non interrupt mode.
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &=~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		//clearing
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2103      	movs	r1, #3
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	400a      	ands	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp;		//setting
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6819      	ldr	r1, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
		temp=0;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	e0c1      	b.n	80006c6 <GPIO_Init+0x1ea>
	}else{	//Interrupt mode. Выбираем по фроннту или по спаду будет зафиксировано прерывание
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_FT){
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d817      	bhi.n	800057a <GPIO_Init+0x9e>
			//1.configure the FTSR
			EXTI->FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.4 Falling trigger selection register (EXTI_FTSR)
 800054a:	4b47      	ldr	r3, [pc, #284]	; (8000668 <GPIO_Init+0x18c>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	4611      	mov	r1, r2
 800055a:	4a43      	ldr	r2, [pc, #268]	; (8000668 <GPIO_Init+0x18c>)
 800055c:	430b      	orrs	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &=~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.3 Rising trigger selection register (EXTI_RTSR)
 8000560:	4b41      	ldr	r3, [pc, #260]	; (8000668 <GPIO_Init+0x18c>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	43d2      	mvns	r2, r2
 8000570:	4611      	mov	r1, r2
 8000572:	4a3d      	ldr	r2, [pc, #244]	; (8000668 <GPIO_Init+0x18c>)
 8000574:	400b      	ands	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
 8000578:	e035      	b.n	80005e6 <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RT){
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	795b      	ldrb	r3, [r3, #5]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d817      	bhi.n	80005b2 <GPIO_Init+0xd6>
			//1.configure the RTSR
			EXTI->RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b39      	ldr	r3, [pc, #228]	; (8000668 <GPIO_Init+0x18c>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	4611      	mov	r1, r2
 8000592:	4a35      	ldr	r2, [pc, #212]	; (8000668 <GPIO_Init+0x18c>)
 8000594:	430b      	orrs	r3, r1
 8000596:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &=~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <GPIO_Init+0x18c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <GPIO_Init+0x18c>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
 80005b0:	e019      	b.n	80005e6 <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RFT){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	795b      	ldrb	r3, [r3, #5]
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d815      	bhi.n	80005e6 <GPIO_Init+0x10a>
			//1.configure both FTSR and RTSR
			EXTI->RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <GPIO_Init+0x18c>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <GPIO_Init+0x18c>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <GPIO_Init+0x18c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <GPIO_Init+0x18c>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	60d3      	str	r3, [r2, #12]
		//2. configure GPIO port selection in SYSCFG_EXTICR
		//Будем расчитывать позицию EXTIx в регистрах
		/*Всего 4 регистра SYSCFG_EXTICR2 из каждого регистра используются первые 16 бит. Каждый регистр отвечает за 4 линии EXTI
		 * К каждой линии EXTI можно подключить путем записи 4 битного числа только один пин порта под номером соответствующему номеру линии EXTI
		 *Пример: к линии EXTI5 можно подключить PA5 либо PB5 либо... PE5*/
		uint8_t	temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	74fb      	strb	r3, [r7, #19]
		uint8_t	temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	f003 0303 	and.w	r3, r3, #3
 80005f6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode=GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <GPIO_Init+0x190>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d044      	beq.n	800068c <GPIO_Init+0x1b0>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <GPIO_Init+0x194>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d02b      	beq.n	8000664 <GPIO_Init+0x188>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <GPIO_Init+0x198>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d024      	beq.n	8000660 <GPIO_Init+0x184>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <GPIO_Init+0x19c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d01d      	beq.n	800065c <GPIO_Init+0x180>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <GPIO_Init+0x1a0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d016      	beq.n	8000658 <GPIO_Init+0x17c>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <GPIO_Init+0x1a4>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d00f      	beq.n	8000654 <GPIO_Init+0x178>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <GPIO_Init+0x1a8>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d008      	beq.n	8000650 <GPIO_Init+0x174>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a11      	ldr	r2, [pc, #68]	; (8000688 <GPIO_Init+0x1ac>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d101      	bne.n	800064c <GPIO_Init+0x170>
 8000648:	2307      	movs	r3, #7
 800064a:	e020      	b.n	800068e <GPIO_Init+0x1b2>
 800064c:	2300      	movs	r3, #0
 800064e:	e01e      	b.n	800068e <GPIO_Init+0x1b2>
 8000650:	2306      	movs	r3, #6
 8000652:	e01c      	b.n	800068e <GPIO_Init+0x1b2>
 8000654:	2305      	movs	r3, #5
 8000656:	e01a      	b.n	800068e <GPIO_Init+0x1b2>
 8000658:	2304      	movs	r3, #4
 800065a:	e018      	b.n	800068e <GPIO_Init+0x1b2>
 800065c:	2303      	movs	r3, #3
 800065e:	e016      	b.n	800068e <GPIO_Init+0x1b2>
 8000660:	2302      	movs	r3, #2
 8000662:	e014      	b.n	800068e <GPIO_Init+0x1b2>
 8000664:	2301      	movs	r3, #1
 8000666:	e012      	b.n	800068e <GPIO_Init+0x1b2>
 8000668:	40013c00 	.word	0x40013c00
 800066c:	40020000 	.word	0x40020000
 8000670:	40020400 	.word	0x40020400
 8000674:	40020800 	.word	0x40020800
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40021000 	.word	0x40021000
 8000680:	40021400 	.word	0x40021400
 8000684:	40021800 	.word	0x40021800
 8000688:	40021c00 	.word	0x40021c00
 800068c:	2300      	movs	r3, #0
 800068e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000690:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <GPIO_Init+0x32c>)
 8000692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000694:	4a5c      	ldr	r2, [pc, #368]	; (8000808 <GPIO_Init+0x32c>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode <<(temp2*4);
 800069c:	7c7a      	ldrb	r2, [r7, #17]
 800069e:	7cbb      	ldrb	r3, [r7, #18]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	fa02 f103 	lsl.w	r1, r2, r3
 80006a6:	4a59      	ldr	r2, [pc, #356]	; (800080c <GPIO_Init+0x330>)
 80006a8:	7cfb      	ldrb	r3, [r7, #19]
 80006aa:	3302      	adds	r3, #2
 80006ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.1 Interrupt mask register (EXTI_IMR)
 80006b0:	4b57      	ldr	r3, [pc, #348]	; (8000810 <GPIO_Init+0x334>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	7912      	ldrb	r2, [r2, #4]
 80006b8:	4611      	mov	r1, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	408a      	lsls	r2, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	4a53      	ldr	r2, [pc, #332]	; (8000810 <GPIO_Init+0x334>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]

	//2.configure the speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4619      	mov	r1, r3
 80006e8:	2303      	movs	r3, #3
 80006ea:	408b      	lsls	r3, r1
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	400a      	ands	r2, r1
 80006f6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6899      	ldr	r1, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	430a      	orrs	r2, r1
 8000706:	609a      	str	r2, [r3, #8]
	temp=0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

	//3.configure the pudp setting
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	79db      	ldrb	r3, [r3, #7]
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	4619      	mov	r1, r3
 800072a:	2303      	movs	r3, #3
 800072c:	408b      	lsls	r3, r1
 800072e:	43db      	mvns	r3, r3
 8000730:	4619      	mov	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	400a      	ands	r2, r1
 8000738:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68d9      	ldr	r1, [r3, #12]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	697a      	ldr	r2, [r7, #20]
 8000746:	430a      	orrs	r2, r1
 8000748:	60da      	str	r2, [r3, #12]
	temp=0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7a1b      	ldrb	r3, [r3, #8]
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &=~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	4619      	mov	r1, r3
 800076a:	2301      	movs	r3, #1
 800076c:	408b      	lsls	r3, r1
 800076e:	43db      	mvns	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	400a      	ands	r2, r1
 8000778:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6859      	ldr	r1, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	430a      	orrs	r2, r1
 8000788:	605a      	str	r2, [r3, #4]

	//5. configure the alt fuctionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN){
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	795b      	ldrb	r3, [r3, #5]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d135      	bne.n	80007fe <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	743b      	strb	r3, [r7, #16]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &=~(0xF<<(4*temp2));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	7c3b      	ldrb	r3, [r7, #16]
 80007aa:	3306      	adds	r3, #6
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	210f      	movs	r1, #15
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	43db      	mvns	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6819      	ldr	r1, [r3, #0]
 80007c4:	7c3b      	ldrb	r3, [r7, #16]
 80007c6:	4002      	ands	r2, r0
 80007c8:	3306      	adds	r3, #6
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFR[temp1] |=(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	7c3b      	ldrb	r3, [r7, #16]
 80007d6:	3306      	adds	r3, #6
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7a5b      	ldrb	r3, [r3, #9]
 80007e2:	4619      	mov	r1, r3
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	7c3b      	ldrb	r3, [r7, #16]
 80007f4:	4302      	orrs	r2, r0
 80007f6:	3306      	adds	r3, #6
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	440b      	add	r3, r1
 80007fc:	605a      	str	r2, [r3, #4]
	}
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40013800 	.word	0x40013800
 8000810:	40013c00 	.word	0x40013c00

08000814 <SPI_PeriClockControl>:
 *
 *@Note					-
 *
 * */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d12a      	bne.n	800087c <SPI_PeriClockControl+0x68>
		{
			if	(pSPIx==SPI1){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <SPI_PeriClockControl+0x74>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <SPI_PeriClockControl+0x78>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <SPI_PeriClockControl+0x78>)
 8000834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
				SPI3_PCLK_EDI();
			}else if(pSPIx==SPI4){
				SPI4_PCLK_DI();
			}
		*/}
}
 800083a:	e01f      	b.n	800087c <SPI_PeriClockControl+0x68>
			}else if(pSPIx==SPI2){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <SPI_PeriClockControl+0x7c>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d106      	bne.n	8000852 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <SPI_PeriClockControl+0x78>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a10      	ldr	r2, [pc, #64]	; (800088c <SPI_PeriClockControl+0x78>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000850:	e014      	b.n	800087c <SPI_PeriClockControl+0x68>
			}else if(pSPIx==SPI3){
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <SPI_PeriClockControl+0x80>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <SPI_PeriClockControl+0x78>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <SPI_PeriClockControl+0x78>)
 8000860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000866:	e009      	b.n	800087c <SPI_PeriClockControl+0x68>
			}else if(pSPIx==SPI4){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <SPI_PeriClockControl+0x84>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d105      	bne.n	800087c <SPI_PeriClockControl+0x68>
				SPI4_PCLK_EN();
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <SPI_PeriClockControl+0x78>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <SPI_PeriClockControl+0x78>)
 8000876:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800087a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40013000 	.word	0x40013000
 800088c:	40023800 	.word	0x40023800
 8000890:	40003800 	.word	0x40003800
 8000894:	40003c00 	.word	0x40003c00
 8000898:	40013400 	.word	0x40013400

0800089c <SPI_Init>:
 *
 *@Note					-
 *
 * */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	//peripheral clock control enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffb2 	bl	8000814 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register
	uint32_t tempreg=0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
	//1. configure the device mode
	tempreg|=pSPIHandle->SPIConfig.SPI_DeviceMode<<SPI_CR1_MSTR;		//Bit 2 MSTR: Master selection
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]

	//2.configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_FD)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d104      	bne.n	80008d4 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &=~(1<<15);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e014      	b.n	80008fe <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_HD)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d104      	bne.n	80008e6 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |=(1<<15);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e00b      	b.n	80008fe <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	795b      	ldrb	r3, [r3, #5]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d107      	bne.n	80008fe <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &=~(1<<15);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008f4:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |=(1<<10);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fc:	60fb      	str	r3, [r7, #12]
	}
	//3.Configure the SOI serial clock speed (baud rate)
	tempreg|=pSPIHandle->SPIConfig.SPI_SclkSpeed<<3;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	461a      	mov	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4313      	orrs	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

	//4.configure the DFF
	tempreg|=pSPIHandle->SPIConfig.SPI_DFF<<11;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	79db      	ldrb	r3, [r3, #7]
 8000910:	02db      	lsls	r3, r3, #11
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4313      	orrs	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]

	//5.configure the CPOL
	tempreg|=pSPIHandle->SPIConfig.SPI_CPOL<<1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7a1b      	ldrb	r3, [r3, #8]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	461a      	mov	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

	//configurte the CPHA
	tempreg|=pSPIHandle->SPIConfig.SPI_CPHA<<SPI_CR1_CPHA;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7a5b      	ldrb	r3, [r3, #9]
 800092c:	461a      	mov	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1=tempreg;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <SPI_GetFlagStatus>:
{
	//TODO
}

SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	4013      	ands	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <SPI_SendData>:
 *
 *@Note					- This in blocking call
 *
 * */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
	while(Len>0)
 8000976:	e023      	b.n	80009c0 <SPI_SendData+0x56>
	{
		//1.wait until TXE is set
		//while(!(pSPIx-SR&(1<<1)));
		SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)==FLAG_RESET;
 8000978:	2102      	movs	r1, #2
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff ffe2 	bl	8000944 <SPI_GetFlagStatus>
		//2.checkthe DFF bit in CR1
		if((pSPIx->CR1&(1<<SPI_CR1_DFF)))
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00e      	beq.n	80009aa <SPI_SendData+0x40>
		{
			//16 bit DFF
			//1.Load the data in to trhe DR
			pSPIx->DR=*((uint16_t*)pTxBuffer);
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	60da      	str	r2, [r3, #12]
			Len--;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3b01      	subs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
			Len--;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	e00a      	b.n	80009c0 <SPI_SendData+0x56>
		}else
		{
			//8bit DFF
			pSPIx->DR=*pTxBuffer;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	60da      	str	r2, [r3, #12]
			Len--;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	3301      	adds	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
	while(Len>0)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1d8      	bne.n	8000978 <SPI_SendData+0xe>
		}
	}
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d106      	bne.n	80009f0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80009ee:	e005      	b.n	80009fc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SPI_SSIConfig>:
 *
 * @Note              -

 */
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d106      	bne.n	8000a26 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}


}
 8000a24:	e005      	b.n	8000a32 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <__libc_init_array>:
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	4d0d      	ldr	r5, [pc, #52]	; (8000a74 <__libc_init_array+0x38>)
 8000a40:	4c0d      	ldr	r4, [pc, #52]	; (8000a78 <__libc_init_array+0x3c>)
 8000a42:	1b64      	subs	r4, r4, r5
 8000a44:	10a4      	asrs	r4, r4, #2
 8000a46:	2600      	movs	r6, #0
 8000a48:	42a6      	cmp	r6, r4
 8000a4a:	d109      	bne.n	8000a60 <__libc_init_array+0x24>
 8000a4c:	4d0b      	ldr	r5, [pc, #44]	; (8000a7c <__libc_init_array+0x40>)
 8000a4e:	4c0c      	ldr	r4, [pc, #48]	; (8000a80 <__libc_init_array+0x44>)
 8000a50:	f000 f818 	bl	8000a84 <_init>
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	10a4      	asrs	r4, r4, #2
 8000a58:	2600      	movs	r6, #0
 8000a5a:	42a6      	cmp	r6, r4
 8000a5c:	d105      	bne.n	8000a6a <__libc_init_array+0x2e>
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a64:	4798      	blx	r3
 8000a66:	3601      	adds	r6, #1
 8000a68:	e7ee      	b.n	8000a48 <__libc_init_array+0xc>
 8000a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6e:	4798      	blx	r3
 8000a70:	3601      	adds	r6, #1
 8000a72:	e7f2      	b.n	8000a5a <__libc_init_array+0x1e>
 8000a74:	08000aa8 	.word	0x08000aa8
 8000a78:	08000aa8 	.word	0x08000aa8
 8000a7c:	08000aa8 	.word	0x08000aa8
 8000a80:	08000aac 	.word	0x08000aac

08000a84 <_init>:
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	bf00      	nop
 8000a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8a:	bc08      	pop	{r3}
 8000a8c:	469e      	mov	lr, r3
 8000a8e:	4770      	bx	lr

08000a90 <_fini>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr
