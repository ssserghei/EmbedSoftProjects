
021_stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000db0  08000db0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000db0  08000db0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000db0  08000db0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000db0  08000db0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000db0  08000db0  00010db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000db4  08000db4  00010db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000002c  08000de4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000de4  00020070  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000186c  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000058b  00000000  00000000  000218c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00021e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000291b  00000000  00000000  000221b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e9d  00000000  00000000  00024ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a6fe  00000000  00000000  00026970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003106e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ec  00000000  00000000  000310c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d98 	.word	0x08000d98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	08000d98 	.word	0x08000d98

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x34

void delay(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <delay+0x28>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	0003d08f 	.word	0x0003d08f

08000240 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <I2C1_GPIOInits+0x40>)
 8000248:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800024a:	2302      	movs	r3, #2
 800024c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800024e:	2301      	movs	r3, #1
 8000250:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000252:	2301      	movs	r3, #1
 8000254:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000256:	2304      	movs	r3, #4
 8000258:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;	//GPOI_SPEED_HIGH
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800025e:	2306      	movs	r3, #6
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f967 	bl	8000538 <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800026a:	2307      	movs	r3, #7
 800026c:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f961 	bl	8000538 <GPIO_Init>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40020400 	.word	0x40020400

08000284 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <I2C1_Inits+0x2c>)
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <I2C1_Inits+0x30>)
 800028c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;		//I2C_ACK_ENABLE	//I2C_ACK_DISABLE
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <I2C1_Inits+0x2c>)
 8000290:	2201      	movs	r2, #1
 8000292:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <I2C1_Inits+0x2c>)
 8000296:	2261      	movs	r2, #97	; 0x61
 8000298:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <I2C1_Inits+0x2c>)
 800029c:	2200      	movs	r2, #0
 800029e:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <I2C1_Inits+0x2c>)
 80002a2:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <I2C1_Inits+0x34>)
 80002a4:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80002a6:	4802      	ldr	r0, [pc, #8]	; (80002b0 <I2C1_Inits+0x2c>)
 80002a8:	f000 fc0a 	bl	8000ac0 <I2C_Init>

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000048 	.word	0x20000048
 80002b4:	40005400 	.word	0x40005400
 80002b8:	000186a0 	.word	0x000186a0

080002bc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <GPIO_ButtonInit+0x2c>)
 80002c4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002c6:	230d      	movs	r3, #13
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ca:	2300      	movs	r3, #0
 80002cc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ce:	2302      	movs	r3, #2
 80002d0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002d2:	2300      	movs	r3, #0
 80002d4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f92d 	bl	8000538 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020800 	.word	0x40020800

080002ec <main>:


int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 80002f2:	f7ff ffe3 	bl	80002bc <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002f6:	f7ff ffa3 	bl	8000240 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002fa:	f7ff ffc3 	bl	8000284 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002fe:	2101      	movs	r1, #1
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <main+0x48>)
 8000302:	f000 fb30 	bl	8000966 <I2C_PeripheralControl>


	while(1)
	{
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000306:	bf00      	nop
 8000308:	210d      	movs	r1, #13
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <main+0x4c>)
 800030c:	f000 faac 	bl	8000868 <GPIO_ReadFromInputPin>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1f8      	bne.n	8000308 <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000316:	f7ff ff7d 	bl	8000214 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
 800031a:	4808      	ldr	r0, [pc, #32]	; (800033c <main+0x50>)
 800031c:	f7ff ff72 	bl	8000204 <strlen>
 8000320:	4602      	mov	r2, r0
 8000322:	2300      	movs	r3, #0
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2334      	movs	r3, #52	; 0x34
 8000328:	4904      	ldr	r1, [pc, #16]	; (800033c <main+0x50>)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <main+0x54>)
 800032c:	f000 fc91 	bl	8000c52 <I2C_MasterSendData>
		while(GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000330:	e7e9      	b.n	8000306 <main+0x1a>
 8000332:	bf00      	nop
 8000334:	40005400 	.word	0x40005400
 8000338:	40020800 	.word	0x40020800
 800033c:	20000000 	.word	0x20000000
 8000340:	20000048 	.word	0x20000048

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 fced 	bl	8000d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ffb9 	bl	80002ec <main>

0800037a <LoopForever>:

LoopForever:
    b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000388:	08000db8 	.word	0x08000db8
  ldr r2, =_sbss
 800038c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000390:	20000070 	.word	0x20000070

08000394 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC_IRQHandler>
	...

08000398 <GPIO_PeriClockControl>:
 *@Note					- none
 *
 * */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDI)	//
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
	if (EnorDI==ENABLE)
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d157      	bne.n	800045a <GPIO_PeriClockControl+0xc2>
	{
		if		(pGPIOx==GPIOA){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a59      	ldr	r2, [pc, #356]	; (8000514 <GPIO_PeriClockControl+0x17c>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003b2:	4b59      	ldr	r3, [pc, #356]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a58      	ldr	r2, [pc, #352]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
					GPIOG_PCLK_DI();
				}else if(pGPIOx==GPIOH){
					GPIOH_PCLK_DI();
				}
	}
}//END GPIO_PeriClockControl
 80003be:	e0a3      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOB){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a56      	ldr	r2, [pc, #344]	; (800051c <GPIO_PeriClockControl+0x184>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003c8:	4b53      	ldr	r3, [pc, #332]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a52      	ldr	r2, [pc, #328]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003ce:	f043 0302 	orr.w	r3, r3, #2
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80003d4:	e098      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOC){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a51      	ldr	r2, [pc, #324]	; (8000520 <GPIO_PeriClockControl+0x188>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003de:	4b4e      	ldr	r3, [pc, #312]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a4d      	ldr	r2, [pc, #308]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80003ea:	e08d      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOD){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a4d      	ldr	r2, [pc, #308]	; (8000524 <GPIO_PeriClockControl+0x18c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003f4:	4b48      	ldr	r3, [pc, #288]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a47      	ldr	r2, [pc, #284]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000400:	e082      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOE){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a48      	ldr	r2, [pc, #288]	; (8000528 <GPIO_PeriClockControl+0x190>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800040a:	4b43      	ldr	r3, [pc, #268]	; (8000518 <GPIO_PeriClockControl+0x180>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a42      	ldr	r2, [pc, #264]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000410:	f043 0310 	orr.w	r3, r3, #16
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000416:	e077      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOF){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a44      	ldr	r2, [pc, #272]	; (800052c <GPIO_PeriClockControl+0x194>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000420:	4b3d      	ldr	r3, [pc, #244]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a3c      	ldr	r2, [pc, #240]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800042c:	e06c      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOG){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a3f      	ldr	r2, [pc, #252]	; (8000530 <GPIO_PeriClockControl+0x198>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000436:	4b38      	ldr	r3, [pc, #224]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a37      	ldr	r2, [pc, #220]	; (8000518 <GPIO_PeriClockControl+0x180>)
 800043c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000442:	e061      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx==GPIOH){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a3b      	ldr	r2, [pc, #236]	; (8000534 <GPIO_PeriClockControl+0x19c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d15d      	bne.n	8000508 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800044c:	4b32      	ldr	r3, [pc, #200]	; (8000518 <GPIO_PeriClockControl+0x180>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a31      	ldr	r2, [pc, #196]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000458:	e056      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		if		(pGPIOx==GPIOA){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a2d      	ldr	r2, [pc, #180]	; (8000514 <GPIO_PeriClockControl+0x17c>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000462:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a2c      	ldr	r2, [pc, #176]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800046e:	e04b      	b.n	8000508 <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOB){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a2a      	ldr	r2, [pc, #168]	; (800051c <GPIO_PeriClockControl+0x184>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 8000478:	4b27      	ldr	r3, [pc, #156]	; (8000518 <GPIO_PeriClockControl+0x180>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a26      	ldr	r2, [pc, #152]	; (8000518 <GPIO_PeriClockControl+0x180>)
 800047e:	f023 0302 	bic.w	r3, r3, #2
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000484:	e040      	b.n	8000508 <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOC){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a25      	ldr	r2, [pc, #148]	; (8000520 <GPIO_PeriClockControl+0x188>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 800048e:	4b22      	ldr	r3, [pc, #136]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a21      	ldr	r2, [pc, #132]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000494:	f023 0304 	bic.w	r3, r3, #4
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 800049a:	e035      	b.n	8000508 <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOD){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a21      	ldr	r2, [pc, #132]	; (8000524 <GPIO_PeriClockControl+0x18c>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80004a4:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004aa:	f023 0308 	bic.w	r3, r3, #8
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004b0:	e02a      	b.n	8000508 <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOE){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <GPIO_PeriClockControl+0x190>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004c0:	f023 0310 	bic.w	r3, r3, #16
 80004c4:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004c6:	e01f      	b.n	8000508 <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOF){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a18      	ldr	r2, [pc, #96]	; (800052c <GPIO_PeriClockControl+0x194>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d106      	bne.n	80004de <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004d6:	f023 0320 	bic.w	r3, r3, #32
 80004da:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004dc:	e014      	b.n	8000508 <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOG){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <GPIO_PeriClockControl+0x198>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 80004f2:	e009      	b.n	8000508 <GPIO_PeriClockControl+0x170>
				}else if(pGPIOx==GPIOH){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <GPIO_PeriClockControl+0x19c>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d105      	bne.n	8000508 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <GPIO_PeriClockControl+0x180>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <GPIO_PeriClockControl+0x180>)
 8000502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000506:	6313      	str	r3, [r2, #48]	; 0x30
}//END GPIO_PeriClockControl
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000
 8000518:	40023800 	.word	0x40023800
 800051c:	40020400 	.word	0x40020400
 8000520:	40020800 	.word	0x40020800
 8000524:	40020c00 	.word	0x40020c00
 8000528:	40021000 	.word	0x40021000
 800052c:	40021400 	.word	0x40021400
 8000530:	40021800 	.word	0x40021800
 8000534:	40021c00 	.word	0x40021c00

08000538 <GPIO_Init>:
 *@return				-
 *
 *@Note					-
 *
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; 		//temp. register
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ff24 	bl	8000398 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d822      	bhi.n	800059e <GPIO_Init+0x66>
		//the non interrupt mode.
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	461a      	mov	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &=~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		//clearing
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	4619      	mov	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	400a      	ands	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp;		//setting
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	430a      	orrs	r2, r1
 8000596:	601a      	str	r2, [r3, #0]
		temp=0;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	e0c1      	b.n	8000722 <GPIO_Init+0x1ea>
	}else{	//Interrupt mode. Выбираем по фроннту или по спаду будет зафиксировано прерывание
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_FT){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	795b      	ldrb	r3, [r3, #5]
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d817      	bhi.n	80005d6 <GPIO_Init+0x9e>
			//1.configure the FTSR
			EXTI->FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.4 Falling trigger selection register (EXTI_FTSR)
 80005a6:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <GPIO_Init+0x18c>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a43      	ldr	r2, [pc, #268]	; (80006c4 <GPIO_Init+0x18c>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &=~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.3 Rising trigger selection register (EXTI_RTSR)
 80005bc:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <GPIO_Init+0x18c>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	43d2      	mvns	r2, r2
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a3d      	ldr	r2, [pc, #244]	; (80006c4 <GPIO_Init+0x18c>)
 80005d0:	400b      	ands	r3, r1
 80005d2:	6093      	str	r3, [r2, #8]
 80005d4:	e035      	b.n	8000642 <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RT){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	795b      	ldrb	r3, [r3, #5]
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d817      	bhi.n	800060e <GPIO_Init+0xd6>
			//1.configure the RTSR
			EXTI->RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005de:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <GPIO_Init+0x18c>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7912      	ldrb	r2, [r2, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a35      	ldr	r2, [pc, #212]	; (80006c4 <GPIO_Init+0x18c>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &=~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <GPIO_Init+0x18c>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7912      	ldrb	r2, [r2, #4]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	43d2      	mvns	r2, r2
 8000604:	4611      	mov	r1, r2
 8000606:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <GPIO_Init+0x18c>)
 8000608:	400b      	ands	r3, r1
 800060a:	60d3      	str	r3, [r2, #12]
 800060c:	e019      	b.n	8000642 <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_IT_RFT){
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	2b06      	cmp	r3, #6
 8000614:	d815      	bhi.n	8000642 <GPIO_Init+0x10a>
			//1.configure both FTSR and RTSR
			EXTI->RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <GPIO_Init+0x18c>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7912      	ldrb	r2, [r2, #4]
 800061e:	4611      	mov	r1, r2
 8000620:	2201      	movs	r2, #1
 8000622:	408a      	lsls	r2, r1
 8000624:	4611      	mov	r1, r2
 8000626:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <GPIO_Init+0x18c>)
 8000628:	430b      	orrs	r3, r1
 800062a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <GPIO_Init+0x18c>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <GPIO_Init+0x18c>)
 800063e:	430b      	orrs	r3, r1
 8000640:	60d3      	str	r3, [r2, #12]
		//2. configure GPIO port selection in SYSCFG_EXTICR
		//Будем расчитывать позицию EXTIx в регистрах
		/*Всего 4 регистра SYSCFG_EXTICR2 из каждого регистра используются первые 16 бит. Каждый регистр отвечает за 4 линии EXTI
		 * К каждой линии EXTI можно подключить путем записи 4 битного числа только один пин порта под номером соответствующему номеру линии EXTI
		 *Пример: к линии EXTI5 можно подключить PA5 либо PB5 либо... PE5*/
		uint8_t	temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	089b      	lsrs	r3, r3, #2
 8000648:	74fb      	strb	r3, [r7, #19]
		uint8_t	temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode=GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <GPIO_Init+0x190>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d044      	beq.n	80006e8 <GPIO_Init+0x1b0>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <GPIO_Init+0x194>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d02b      	beq.n	80006c0 <GPIO_Init+0x188>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <GPIO_Init+0x198>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d024      	beq.n	80006bc <GPIO_Init+0x184>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <GPIO_Init+0x19c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d01d      	beq.n	80006b8 <GPIO_Init+0x180>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <GPIO_Init+0x1a0>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d016      	beq.n	80006b4 <GPIO_Init+0x17c>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <GPIO_Init+0x1a4>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d00f      	beq.n	80006b0 <GPIO_Init+0x178>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <GPIO_Init+0x1a8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d008      	beq.n	80006ac <GPIO_Init+0x174>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <GPIO_Init+0x1ac>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d101      	bne.n	80006a8 <GPIO_Init+0x170>
 80006a4:	2307      	movs	r3, #7
 80006a6:	e020      	b.n	80006ea <GPIO_Init+0x1b2>
 80006a8:	2300      	movs	r3, #0
 80006aa:	e01e      	b.n	80006ea <GPIO_Init+0x1b2>
 80006ac:	2306      	movs	r3, #6
 80006ae:	e01c      	b.n	80006ea <GPIO_Init+0x1b2>
 80006b0:	2305      	movs	r3, #5
 80006b2:	e01a      	b.n	80006ea <GPIO_Init+0x1b2>
 80006b4:	2304      	movs	r3, #4
 80006b6:	e018      	b.n	80006ea <GPIO_Init+0x1b2>
 80006b8:	2303      	movs	r3, #3
 80006ba:	e016      	b.n	80006ea <GPIO_Init+0x1b2>
 80006bc:	2302      	movs	r3, #2
 80006be:	e014      	b.n	80006ea <GPIO_Init+0x1b2>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e012      	b.n	80006ea <GPIO_Init+0x1b2>
 80006c4:	40013c00 	.word	0x40013c00
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020c00 	.word	0x40020c00
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40021400 	.word	0x40021400
 80006e0:	40021800 	.word	0x40021800
 80006e4:	40021c00 	.word	0x40021c00
 80006e8:	2300      	movs	r3, #0
 80006ea:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006ec:	4b5b      	ldr	r3, [pc, #364]	; (800085c <GPIO_Init+0x324>)
 80006ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f0:	4a5a      	ldr	r2, [pc, #360]	; (800085c <GPIO_Init+0x324>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]=portcode <<(temp2*4);
 80006f8:	7c7a      	ldrb	r2, [r7, #17]
 80006fa:	7cbb      	ldrb	r3, [r7, #18]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	fa02 f103 	lsl.w	r1, r2, r3
 8000702:	4a57      	ldr	r2, [pc, #348]	; (8000860 <GPIO_Init+0x328>)
 8000704:	7cfb      	ldrb	r3, [r7, #19]
 8000706:	3302      	adds	r3, #2
 8000708:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//10.3.1 Interrupt mask register (EXTI_IMR)
 800070c:	4b55      	ldr	r3, [pc, #340]	; (8000864 <GPIO_Init+0x32c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	7912      	ldrb	r2, [r2, #4]
 8000714:	4611      	mov	r1, r2
 8000716:	2201      	movs	r2, #1
 8000718:	408a      	lsls	r2, r1
 800071a:	4611      	mov	r1, r2
 800071c:	4a51      	ldr	r2, [pc, #324]	; (8000864 <GPIO_Init+0x32c>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

	//2.configure the speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	4619      	mov	r1, r3
 8000744:	2303      	movs	r3, #3
 8000746:	408b      	lsls	r3, r1
 8000748:	43db      	mvns	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	400a      	ands	r2, r1
 8000752:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6899      	ldr	r1, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	430a      	orrs	r2, r1
 8000762:	609a      	str	r2, [r3, #8]
	temp=0;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

	//3.configure the pudp setting
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	461a      	mov	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	4619      	mov	r1, r3
 8000786:	2303      	movs	r3, #3
 8000788:	408b      	lsls	r3, r1
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68d9      	ldr	r1, [r3, #12]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
	temp=0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	7a1b      	ldrb	r3, [r3, #8]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &=~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2301      	movs	r3, #1
 80007c8:	408b      	lsls	r3, r1
 80007ca:	43db      	mvns	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	400a      	ands	r2, r1
 80007d4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6859      	ldr	r1, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	605a      	str	r2, [r3, #4]

	//5. configure the alt fuctionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	795b      	ldrb	r3, [r3, #5]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d131      	bne.n	8000852 <GPIO_Init+0x31a>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	08db      	lsrs	r3, r3, #3
 80007f4:	743b      	strb	r3, [r7, #16]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &=~(0xF<<(4*temp2));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	7c3a      	ldrb	r2, [r7, #16]
 8000806:	3208      	adds	r2, #8
 8000808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	220f      	movs	r2, #15
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	7c3a      	ldrb	r2, [r7, #16]
 8000820:	4001      	ands	r1, r0
 8000822:	3208      	adds	r2, #8
 8000824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	7c3a      	ldrb	r2, [r7, #16]
 800082e:	3208      	adds	r2, #8
 8000830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7a5b      	ldrb	r3, [r3, #9]
 8000838:	461a      	mov	r2, r3
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	7c3a      	ldrb	r2, [r7, #16]
 800084a:	4301      	orrs	r1, r0
 800084c:	3208      	adds	r2, #8
 800084e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40013800 	.word	0x40013800
 8000864:	40013c00 	.word	0x40013c00

08000868 <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -

 */
uint8_t  GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){	//возвращает булевое значение
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691a      	ldr	r2, [r3, #16]
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	fa22 f303 	lsr.w	r3, r2, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]

	return value;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	f023 0301 	bic.w	r3, r3, #1
 80008c8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008ca:	78fa      	ldrb	r2, [r7, #3]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	611a      	str	r2, [r3, #16]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01f      	beq.n	8000930 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7f1b      	ldrb	r3, [r3, #28]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d112      	bne.n	800091e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d11f      	bne.n	8000940 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fa06 	bl	8000d18 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800091c:	e010      	b.n	8000940 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	60fb      	str	r3, [r7, #12]
}
 800092e:	e007      	b.n	8000940 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	60fb      	str	r3, [r7, #12]
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d106      	bne.n	8000986 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f043 0201 	orr.w	r2, r3, #1
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000984:	e005      	b.n	8000992 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f023 0201 	bic.w	r2, r3, #1
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d11f      	bne.n	80009ee <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <I2C_PeriClockControl+0x5c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <I2C_PeriClockControl+0x60>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <I2C_PeriClockControl+0x60>)
 80009bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 80009c2:	e014      	b.n	80009ee <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <I2C_PeriClockControl+0x64>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d106      	bne.n	80009da <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <I2C_PeriClockControl+0x60>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <I2C_PeriClockControl+0x60>)
 80009d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d8:	e009      	b.n	80009ee <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <I2C_PeriClockControl+0x68>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d105      	bne.n	80009ee <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <I2C_PeriClockControl+0x60>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <I2C_PeriClockControl+0x60>)
 80009e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40005400 	.word	0x40005400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40005800 	.word	0x40005800
 8000a04:	40005c00 	.word	0x40005c00

08000a08 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp,apb1p;

	clksrc=((RCC->CFGR>>2) &0x3);
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <RCC_GetPCLK1Value+0x98>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	727b      	strb	r3, [r7, #9]

	if (clksrc==0)
 8000a2c:	7a7b      	ldrb	r3, [r7, #9]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d102      	bne.n	8000a38 <RCC_GetPCLK1Value+0x20>
	{
	SystemClk=16000000;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <RCC_GetPCLK1Value+0x9c>)
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e008      	b.n	8000a4a <RCC_GetPCLK1Value+0x32>
	}else if(clksrc==1)
 8000a38:	7a7b      	ldrb	r3, [r7, #9]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d005      	beq.n	8000a4a <RCC_GetPCLK1Value+0x32>
	{
	SystemClk==8000000;
	}else if (clksrc==2)
 8000a3e:	7a7b      	ldrb	r3, [r7, #9]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d102      	bne.n	8000a4a <RCC_GetPCLK1Value+0x32>
	{
	SystemClk=RCC_GetPLLOutputClock();
 8000a44:	f7ff ffe0 	bl	8000a08 <RCC_GetPLLOutputClock>
 8000a48:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp=((RCC->CFGR>>4) &0xF);
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <RCC_GetPCLK1Value+0x98>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	723b      	strb	r3, [r7, #8]
	if (temp<8)
 8000a58:	7a3b      	ldrb	r3, [r7, #8]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d802      	bhi.n	8000a64 <RCC_GetPCLK1Value+0x4c>
	{
		ahbp=1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	72fb      	strb	r3, [r7, #11]
 8000a62:	e005      	b.n	8000a70 <RCC_GetPCLK1Value+0x58>
	}else
	{
		ahbp=AHB_Prescaler[temp-8];
 8000a64:	7a3b      	ldrb	r3, [r7, #8]
 8000a66:	3b08      	subs	r3, #8
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <RCC_GetPCLK1Value+0xa0>)
 8000a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6e:	72fb      	strb	r3, [r7, #11]
	}
	//for apb1
	temp=((RCC->CFGR>>10) &0x7);
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <RCC_GetPCLK1Value+0x98>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	0a9b      	lsrs	r3, r3, #10
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	723b      	strb	r3, [r7, #8]
		if (temp<4)
 8000a7e:	7a3b      	ldrb	r3, [r7, #8]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d802      	bhi.n	8000a8a <RCC_GetPCLK1Value+0x72>
		{
			apb1p=1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	72bb      	strb	r3, [r7, #10]
 8000a88:	e005      	b.n	8000a96 <RCC_GetPCLK1Value+0x7e>
		}else
		{
			ahbp=APB1_Prescaler[temp-4];
 8000a8a:	7a3b      	ldrb	r3, [r7, #8]
 8000a8c:	3b04      	subs	r3, #4
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <RCC_GetPCLK1Value+0xa4>)
 8000a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a94:	72fb      	strb	r3, [r7, #11]
		}

		pclk1=(SystemClk/ahbp) /apb1p;
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a9e:	7abb      	ldrb	r3, [r7, #10]
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000aa6:	687b      	ldr	r3, [r7, #4]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	00f42400 	.word	0x00f42400
 8000ab8:	20000014 	.word	0x20000014
 8000abc:	20000024 	.word	0x20000024

08000ac0 <I2C_Init>:
5.Configurte the rise time for I23C pins

toate aceste initializari trebuie facute cu perifiricul dezactivat
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff62 	bl	800099c <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7a5b      	ldrb	r3, [r3, #9]
 8000adc:	029b      	lsls	r3, r3, #10
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;						//aici intra in loop
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000afa:	f7ff ff8d 	bl	8000a18 <RCC_GetPCLK1Value>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a47      	ldr	r2, [pc, #284]	; (8000c20 <I2C_Init+0x160>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b18:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7a1b      	ldrb	r3, [r3, #8]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	461a      	mov	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4a36      	ldr	r2, [pc, #216]	; (8000c24 <I2C_Init+0x164>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d80f      	bhi.n	8000b6e <I2C_Init+0xae>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b4e:	f7ff ff63 	bl	8000a18 <RCC_GetPCLK1Value>
 8000b52:	4602      	mov	r2, r0
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000b60:	897b      	ldrh	r3, [r7, #10]
 8000b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	e02d      	b.n	8000bca <I2C_Init+0x10a>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b74:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7a9b      	ldrb	r3, [r3, #10]
 8000b7a:	039b      	lsls	r3, r3, #14
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7a9b      	ldrb	r3, [r3, #10]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10b      	bne.n	8000ba4 <I2C_Init+0xe4>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b8c:	f7ff ff44 	bl	8000a18 <RCC_GetPCLK1Value>
 8000b90:	4601      	mov	r1, r0
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba0:	817b      	strh	r3, [r7, #10]
 8000ba2:	e00c      	b.n	8000bbe <I2C_Init+0xfe>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000ba4:	f7ff ff38 	bl	8000a18 <RCC_GetPCLK1Value>
 8000ba8:	4601      	mov	r1, r0
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009a      	lsls	r2, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bbc:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000bbe:	897b      	ldrh	r3, [r7, #10]
 8000bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <I2C_Init+0x164>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d809      	bhi.n	8000bf0 <I2C_Init+0x130>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000bdc:	f7ff ff1c 	bl	8000a18 <RCC_GetPCLK1Value>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <I2C_Init+0x160>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	0c9b      	lsrs	r3, r3, #18
 8000bea:	3301      	adds	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e00d      	b.n	8000c0c <I2C_Init+0x14c>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000bf0:	f7ff ff12 	bl	8000a18 <RCC_GetPCLK1Value>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	0a5b      	lsrs	r3, r3, #9
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <I2C_Init+0x168>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	09db      	lsrs	r3, r3, #7
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c16:	621a      	str	r2, [r3, #32]

}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	431bde83 	.word	0x431bde83
 8000c24:	000186a0 	.word	0x000186a0
 8000c28:	00044b83 	.word	0x00044b83

08000c2c <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe14 	bl	8000892 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000c6a:	bf00      	nop
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffda 	bl	8000c2c <I2C_GetFlagStatus>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f6      	beq.n	8000c6c <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fe12 	bl	80008b0 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000c8c:	bf00      	nop
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2102      	movs	r1, #2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffc9 	bl	8000c2c <I2C_GetFlagStatus>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f6      	beq.n	8000c8e <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f7ff fe1a 	bl	80008da <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000ca6:	e014      	b.n	8000cd2 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000ca8:	bf00      	nop
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffbb 	bl	8000c2c <I2C_GetFlagStatus>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f6      	beq.n	8000caa <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
		Len--;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1e7      	bne.n	8000ca8 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000cd8:	bf00      	nop
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffa3 	bl	8000c2c <I2C_GetFlagStatus>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f6      	beq.n	8000cda <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000cec:	bf00      	nop
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff99 	bl	8000c2c <I2C_GetFlagStatus>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f6      	beq.n	8000cee <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000d00:	7e3b      	ldrb	r3, [r7, #24]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe1c 	bl	8000948 <I2C_GenerateStopCondition>

}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d106      	bne.n	8000d38 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000d36:	e005      	b.n	8000d44 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
	...

08000d50 <__libc_init_array>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	4d0d      	ldr	r5, [pc, #52]	; (8000d88 <__libc_init_array+0x38>)
 8000d54:	4c0d      	ldr	r4, [pc, #52]	; (8000d8c <__libc_init_array+0x3c>)
 8000d56:	1b64      	subs	r4, r4, r5
 8000d58:	10a4      	asrs	r4, r4, #2
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	42a6      	cmp	r6, r4
 8000d5e:	d109      	bne.n	8000d74 <__libc_init_array+0x24>
 8000d60:	4d0b      	ldr	r5, [pc, #44]	; (8000d90 <__libc_init_array+0x40>)
 8000d62:	4c0c      	ldr	r4, [pc, #48]	; (8000d94 <__libc_init_array+0x44>)
 8000d64:	f000 f818 	bl	8000d98 <_init>
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	10a4      	asrs	r4, r4, #2
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	42a6      	cmp	r6, r4
 8000d70:	d105      	bne.n	8000d7e <__libc_init_array+0x2e>
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d78:	4798      	blx	r3
 8000d7a:	3601      	adds	r6, #1
 8000d7c:	e7ee      	b.n	8000d5c <__libc_init_array+0xc>
 8000d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d82:	4798      	blx	r3
 8000d84:	3601      	adds	r6, #1
 8000d86:	e7f2      	b.n	8000d6e <__libc_init_array+0x1e>
 8000d88:	08000db0 	.word	0x08000db0
 8000d8c:	08000db0 	.word	0x08000db0
 8000d90:	08000db0 	.word	0x08000db0
 8000d94:	08000db4 	.word	0x08000db4

08000d98 <_init>:
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9a:	bf00      	nop
 8000d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9e:	bc08      	pop	{r3}
 8000da0:	469e      	mov	lr, r3
 8000da2:	4770      	bx	lr

08000da4 <_fini>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr
