
040_Nuc446RE_HSE_SYSCLK_8Mhz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018a8  080018a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080018a8  080018a8  000118a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018b0  080018b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018b4  080018b4  000118b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  080018c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080018c4  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008084  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000138d  00000000  00000000  000280c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00029450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00029a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209f8  00000000  00000000  0002a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087cd  00000000  00000000  0004aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6f1a  00000000  00000000  000531ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001844  00000000  00000000  0011a158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001888 	.word	0x08001888

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001888 	.word	0x08001888

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SysTick_Handler>:

#include "main.h"



void SysTick_Handler (void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800050c:	f000 f92a 	bl	8000764 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000510:	f000 fa59 	bl	80009c6 <HAL_SYSTICK_IRQHandler>

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <main>:
void Error_handler(void);

UART_HandleTypeDef huart2;

/*************************MAIN************************************/
int main (void){
 8000518:	b580      	push	{r7, lr}
 800051a:	b092      	sub	sp, #72	; 0x48
 800051c:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;


	HAL_Init();
 800051e:	f000 f8c7 	bl	80006b0 <HAL_Init>
	UART2_Init();
 8000522:	f000 f817 	bl	8000554 <UART2_Init>

	memset (&osc_init, 0, sizeof(osc_init));
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 f9a2 	bl	8001878 <memset>

	osc_init.OscillatorType=RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
	osc_init.HSEState=RCC_HSE_BYPASS;
 8000538:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800053c:	61bb      	str	r3, [r7, #24]
	if (HAL_RCC_OscConfig(&osc_init) !=HAL_OK)
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fc14 	bl	8000d70 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <main+0x3a>
	{
		Error_handler();
 800054e:	f000 f827 	bl	80005a0 <Error_handler>
	}

	while(1);
 8000552:	e7fe      	b.n	8000552 <main+0x3a>

08000554 <UART2_Init>:
	return 0;
}//END MAIN



void UART2_Init(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	huart2.Instance=USART2;						//
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <UART2_Init+0x44>)
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <UART2_Init+0x48>)
 800055c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate=115200;				//
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <UART2_Init+0x44>)
 8000560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000564:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength=UART_WORDLENGTH_8B;	//
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <UART2_Init+0x44>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits=UART_STOPBITS_1;		//
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <UART2_Init+0x44>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity=UART_PARITY_NONE;		//
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <UART2_Init+0x44>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl=UART_HWCONTROL_NONE;	//
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <UART2_Init+0x44>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode=UART_MODE_TX_RX;			//
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <UART2_Init+0x44>)
 8000580:	220c      	movs	r2, #12
 8000582:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart2) !=HAL_OK){
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <UART2_Init+0x44>)
 8000586:	f000 fe91 	bl	80012ac <HAL_UART_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 8000590:	f000 f806 	bl	80005a0 <Error_handler>
	}
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	40004400 	.word	0x40004400

080005a0 <Error_handler>:


void Error_handler(void){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	while(1);
 80005a4:	e7fe      	b.n	80005a4 <Error_handler+0x4>
	...

080005a8 <HAL_UART_MspInit>:
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);

}


void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <HAL_UART_MspInit+0x88>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <HAL_UART_MspInit+0x88>)
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_UART_MspInit+0x88>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_UART_MspInit+0x88>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a16      	ldr	r2, [pc, #88]	; (8000630 <HAL_UART_MspInit+0x88>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_UART_MspInit+0x88>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configurations
	gpio_uart.Pin=GPIO_PIN_2;
 80005e8:	2304      	movs	r3, #4
 80005ea:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode=GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull=GPIO_PULLUP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed=GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate=GPIO_AF7_USART2;	//UART2_TX
 80005f8:	2307      	movs	r3, #7
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA,&gpio_uart);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <HAL_UART_MspInit+0x8c>)
 8000604:	f000 f9ec 	bl	80009e0 <HAL_GPIO_Init>

	//nu trebuie de scrie restul setarilor dearece ele sint fixate in structura
	gpio_uart.Pin=GPIO_PIN_3;		//UART2_RX
 8000608:	2308      	movs	r3, #8
 800060a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA,&gpio_uart);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <HAL_UART_MspInit+0x8c>)
 8000614:	f000 f9e4 	bl	80009e0 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000618:	2026      	movs	r0, #38	; 0x26
 800061a:	f000 f9ba 	bl	8000992 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	210f      	movs	r1, #15
 8000622:	2026      	movs	r0, #38	; 0x26
 8000624:	f000 f999 	bl	800095a <HAL_NVIC_SetPriority>

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000

08000638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <SystemInit+0x20>)
 800063e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000642:	4a05      	ldr	r2, [pc, #20]	; (8000658 <SystemInit+0x20>)
 8000644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800065c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000662:	490e      	ldr	r1, [pc, #56]	; (800069c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000678:	4c0b      	ldr	r4, [pc, #44]	; (80006a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000686:	f7ff ffd7 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800068a:	f001 f8d1 	bl	8001830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800068e:	f7ff ff43 	bl	8000518 <main>
  bx  lr    
 8000692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a0:	080018b8 	.word	0x080018b8
  ldr r2, =_sbss
 80006a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a8:	20000070 	.word	0x20000070

080006ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_Init+0x40>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <HAL_Init+0x40>)
 80006ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <HAL_Init+0x40>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_Init+0x40>)
 80006c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x40>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x40>)
 80006d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f933 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f810 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f000 f806 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023c00 	.word	0x40023c00

080006f4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_InitTick+0x54>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x58>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	fbb3 f3f1 	udiv	r3, r3, r1
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f943 	bl	80009ae <HAL_SYSTICK_Config>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e00e      	b.n	8000750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	d80a      	bhi.n	800074e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000738:	2200      	movs	r2, #0
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f000 f90b 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <HAL_InitTick+0x5c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	e000      	b.n	8000750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	20000008 	.word	0x20000008
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_IncTick+0x20>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x24>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_IncTick+0x24>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008
 8000788:	2000006c 	.word	0x2000006c

0800078c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <HAL_GetTick+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	2000006c 	.word	0x2000006c

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db0b      	blt.n	8000832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 021f 	and.w	r2, r3, #31
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <__NVIC_EnableIRQ+0x38>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100

08000844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
         );
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f7ff ff8e 	bl	8000844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff29 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff3e 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff8e 	bl	8000898 <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5d 	bl	8000844 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff31 	bl	8000808 <__NVIC_EnableIRQ>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ffa2 	bl	8000900 <SysTick_Config>
 80009bc:	4603      	mov	r3, r0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009ca:	f000 f802 	bl	80009d2 <HAL_SYSTICK_Callback>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	e165      	b.n	8000cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009fc:	2201      	movs	r2, #1
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	f040 8154 	bne.w	8000cc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d005      	beq.n	8000a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d130      	bne.n	8000a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a68:	2201      	movs	r2, #1
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	091b      	lsrs	r3, r3, #4
 8000a7e:	f003 0201 	and.w	r2, r3, #1
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d017      	beq.n	8000ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d123      	bne.n	8000b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	08da      	lsrs	r2, r3, #3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3208      	adds	r2, #8
 8000ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	220f      	movs	r2, #15
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	691a      	ldr	r2, [r3, #16]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	69b9      	ldr	r1, [r7, #24]
 8000b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0203 	and.w	r2, r3, #3
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 80ae 	beq.w	8000cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ce0 <HAL_GPIO_Init+0x300>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a5c      	ldr	r2, [pc, #368]	; (8000ce0 <HAL_GPIO_Init+0x300>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b5a      	ldr	r3, [pc, #360]	; (8000ce0 <HAL_GPIO_Init+0x300>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b82:	4a58      	ldr	r2, [pc, #352]	; (8000ce4 <HAL_GPIO_Init+0x304>)
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	220f      	movs	r2, #15
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4f      	ldr	r2, [pc, #316]	; (8000ce8 <HAL_GPIO_Init+0x308>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d025      	beq.n	8000bfa <HAL_GPIO_Init+0x21a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4e      	ldr	r2, [pc, #312]	; (8000cec <HAL_GPIO_Init+0x30c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d01f      	beq.n	8000bf6 <HAL_GPIO_Init+0x216>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4d      	ldr	r2, [pc, #308]	; (8000cf0 <HAL_GPIO_Init+0x310>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d019      	beq.n	8000bf2 <HAL_GPIO_Init+0x212>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <HAL_GPIO_Init+0x314>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d013      	beq.n	8000bee <HAL_GPIO_Init+0x20e>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <HAL_GPIO_Init+0x318>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d00d      	beq.n	8000bea <HAL_GPIO_Init+0x20a>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4a      	ldr	r2, [pc, #296]	; (8000cfc <HAL_GPIO_Init+0x31c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d007      	beq.n	8000be6 <HAL_GPIO_Init+0x206>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a49      	ldr	r2, [pc, #292]	; (8000d00 <HAL_GPIO_Init+0x320>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_GPIO_Init+0x202>
 8000bde:	2306      	movs	r3, #6
 8000be0:	e00c      	b.n	8000bfc <HAL_GPIO_Init+0x21c>
 8000be2:	2307      	movs	r3, #7
 8000be4:	e00a      	b.n	8000bfc <HAL_GPIO_Init+0x21c>
 8000be6:	2305      	movs	r3, #5
 8000be8:	e008      	b.n	8000bfc <HAL_GPIO_Init+0x21c>
 8000bea:	2304      	movs	r3, #4
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x21c>
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x21c>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x21c>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x21c>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	69fa      	ldr	r2, [r7, #28]
 8000bfe:	f002 0203 	and.w	r2, r2, #3
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	4093      	lsls	r3, r2
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c0c:	4935      	ldr	r1, [pc, #212]	; (8000ce4 <HAL_GPIO_Init+0x304>)
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c1a:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c3e:	4a31      	ldr	r2, [pc, #196]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c44:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c68:	4a26      	ldr	r2, [pc, #152]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	f67f ae96 	bls.w	80009fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40021400 	.word	0x40021400
 8000d00:	40021800 	.word	0x40021800
 8000d04:	40013c00 	.word	0x40013c00

08000d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000

08000d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d24:	f7ff fff0 	bl	8000d08 <HAL_RCC_GetHCLKFreq>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	0a9b      	lsrs	r3, r3, #10
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	4903      	ldr	r1, [pc, #12]	; (8000d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d36:	5ccb      	ldrb	r3, [r1, r3]
 8000d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	080018a0 	.word	0x080018a0

08000d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d4c:	f7ff ffdc 	bl	8000d08 <HAL_RCC_GetHCLKFreq>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	0b5b      	lsrs	r3, r3, #13
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	4903      	ldr	r1, [pc, #12]	; (8000d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	080018a0 	.word	0x080018a0

08000d70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e28d      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8083 	beq.w	8000e96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d90:	4b94      	ldr	r3, [pc, #592]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d019      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d9c:	4b91      	ldr	r3, [pc, #580]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d106      	bne.n	8000db6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000da8:	4b8e      	ldr	r3, [pc, #568]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000db4:	d00c      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db6:	4b8b      	ldr	r3, [pc, #556]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d112      	bne.n	8000de8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dc2:	4b88      	ldr	r3, [pc, #544]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dce:	d10b      	bne.n	8000de8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd0:	4b84      	ldr	r3, [pc, #528]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d05b      	beq.n	8000e94 <HAL_RCC_OscConfig+0x124>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d157      	bne.n	8000e94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e25a      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df0:	d106      	bne.n	8000e00 <HAL_RCC_OscConfig+0x90>
 8000df2:	4b7c      	ldr	r3, [pc, #496]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a7b      	ldr	r2, [pc, #492]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e01d      	b.n	8000e3c <HAL_RCC_OscConfig+0xcc>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0xb4>
 8000e0a:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a75      	ldr	r2, [pc, #468]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a72      	ldr	r2, [pc, #456]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0xcc>
 8000e24:	4b6f      	ldr	r3, [pc, #444]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a6e      	ldr	r2, [pc, #440]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b6c      	ldr	r3, [pc, #432]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a6b      	ldr	r2, [pc, #428]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e44:	f7ff fca2 	bl	800078c <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fc9e 	bl	800078c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	; 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e21f      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	4b61      	ldr	r3, [pc, #388]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f0      	beq.n	8000e4c <HAL_RCC_OscConfig+0xdc>
 8000e6a:	e014      	b.n	8000e96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fc8e 	bl	800078c <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fc8a 	bl	800078c <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e20b      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x104>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d06f      	beq.n	8000f82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000ea2:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d017      	beq.n	8000ede <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000eae:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d105      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000eba:	4b4a      	ldr	r3, [pc, #296]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ec6:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000ece:	2b0c      	cmp	r3, #12
 8000ed0:	d11c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ed2:	4b44      	ldr	r3, [pc, #272]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d116      	bne.n	8000f0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x186>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d001      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e1d3      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4937      	ldr	r1, [pc, #220]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	e03a      	b.n	8000f82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d020      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f14:	4b34      	ldr	r3, [pc, #208]	; (8000fe8 <HAL_RCC_OscConfig+0x278>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fc37 	bl	800078c <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff fc33 	bl	800078c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e1b4      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4925      	ldr	r1, [pc, #148]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
 8000f54:	e015      	b.n	8000f82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_RCC_OscConfig+0x278>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fc16 	bl	800078c <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fc12 	bl	800078c <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e193      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d036      	beq.n	8000ffc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d016      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_RCC_OscConfig+0x27c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fbf6 	bl	800078c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fbf2 	bl	800078c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e173      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x234>
 8000fc2:	e01b      	b.n	8000ffc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_RCC_OscConfig+0x27c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fca:	f7ff fbdf 	bl	800078c <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	e00e      	b.n	8000ff0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fbdb 	bl	800078c <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d907      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e15c      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	42470000 	.word	0x42470000
 8000fec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff0:	4b8a      	ldr	r3, [pc, #552]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8000ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ea      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 8097 	beq.w	8001138 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100e:	4b83      	ldr	r3, [pc, #524]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10f      	bne.n	800103a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a7e      	ldr	r2, [pc, #504]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b7c      	ldr	r3, [pc, #496]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001036:	2301      	movs	r3, #1
 8001038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103a:	4b79      	ldr	r3, [pc, #484]	; (8001220 <HAL_RCC_OscConfig+0x4b0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	2b00      	cmp	r3, #0
 8001044:	d118      	bne.n	8001078 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <HAL_RCC_OscConfig+0x4b0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a75      	ldr	r2, [pc, #468]	; (8001220 <HAL_RCC_OscConfig+0x4b0>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001052:	f7ff fb9b 	bl	800078c <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105a:	f7ff fb97 	bl	800078c <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e118      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106c:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <HAL_RCC_OscConfig+0x4b0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x31e>
 8001080:	4b66      	ldr	r3, [pc, #408]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001084:	4a65      	ldr	r2, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6713      	str	r3, [r2, #112]	; 0x70
 800108c:	e01c      	b.n	80010c8 <HAL_RCC_OscConfig+0x358>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b05      	cmp	r3, #5
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x340>
 8001096:	4b61      	ldr	r3, [pc, #388]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800109a:	4a60      	ldr	r2, [pc, #384]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6713      	str	r3, [r2, #112]	; 0x70
 80010a2:	4b5e      	ldr	r3, [pc, #376]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80010a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a6:	4a5d      	ldr	r2, [pc, #372]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6713      	str	r3, [r2, #112]	; 0x70
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0x358>
 80010b0:	4b5a      	ldr	r3, [pc, #360]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80010b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b4:	4a59      	ldr	r2, [pc, #356]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	6713      	str	r3, [r2, #112]	; 0x70
 80010bc:	4b57      	ldr	r3, [pc, #348]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80010be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c0:	4a56      	ldr	r2, [pc, #344]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80010c2:	f023 0304 	bic.w	r3, r3, #4
 80010c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d015      	beq.n	80010fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fb5c 	bl	800078c <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d6:	e00a      	b.n	80010ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d8:	f7ff fb58 	bl	800078c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e0d7      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ee:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80010f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0ee      	beq.n	80010d8 <HAL_RCC_OscConfig+0x368>
 80010fa:	e014      	b.n	8001126 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff fb46 	bl	800078c <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001102:	e00a      	b.n	800111a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001104:	f7ff fb42 	bl	800078c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001112:	4293      	cmp	r3, r2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e0c1      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 800111c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1ee      	bne.n	8001104 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d105      	bne.n	8001138 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a3a      	ldr	r2, [pc, #232]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80ad 	beq.w	800129c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b08      	cmp	r3, #8
 800114c:	d060      	beq.n	8001210 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d145      	bne.n	80011e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <HAL_RCC_OscConfig+0x4b4>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fb16 	bl	800078c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fb12 	bl	800078c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e093      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69da      	ldr	r2, [r3, #28]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	3b01      	subs	r3, #1
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	061b      	lsls	r3, r3, #24
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	071b      	lsls	r3, r3, #28
 80011ae:	491b      	ldr	r1, [pc, #108]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_RCC_OscConfig+0x4b4>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fae7 	bl	800078c <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fae3 	bl	800078c <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e064      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x452>
 80011e0:	e05c      	b.n	800129c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_RCC_OscConfig+0x4b4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fad0 	bl	800078c <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff facc 	bl	800078c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e04d      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_RCC_OscConfig+0x4ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x480>
 800120e:	e045      	b.n	800129c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d107      	bne.n	8001228 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e040      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000
 8001224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_RCC_OscConfig+0x538>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d030      	beq.n	8001298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001240:	429a      	cmp	r2, r3
 8001242:	d129      	bne.n	8001298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d122      	bne.n	8001298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001258:	4013      	ands	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800125e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001260:	4293      	cmp	r3, r2
 8001262:	d119      	bne.n	8001298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	3b01      	subs	r3, #1
 8001272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001274:	429a      	cmp	r2, r3
 8001276:	d10f      	bne.n	8001298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001284:	429a      	cmp	r2, r3
 8001286:	d107      	bne.n	8001298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e03f      	b.n	800133e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff f968 	bl	80005a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f829 	bl	8001348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800134c:	b0c0      	sub	sp, #256	; 0x100
 800134e:	af00      	add	r7, sp, #0
 8001350:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001364:	68d9      	ldr	r1, [r3, #12]
 8001366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	ea40 0301 	orr.w	r3, r0, r1
 8001370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	431a      	orrs	r2, r3
 8001380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	431a      	orrs	r2, r3
 8001388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4313      	orrs	r3, r2
 8001390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80013a0:	f021 010c 	bic.w	r1, r1, #12
 80013a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80013ae:	430b      	orrs	r3, r1
 80013b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80013be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013c2:	6999      	ldr	r1, [r3, #24]
 80013c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	ea40 0301 	orr.w	r3, r0, r1
 80013ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b8f      	ldr	r3, [pc, #572]	; (8001614 <UART_SetConfig+0x2cc>)
 80013d8:	429a      	cmp	r2, r3
 80013da:	d005      	beq.n	80013e8 <UART_SetConfig+0xa0>
 80013dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b8d      	ldr	r3, [pc, #564]	; (8001618 <UART_SetConfig+0x2d0>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d104      	bne.n	80013f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80013e8:	f7ff fcae 	bl	8000d48 <HAL_RCC_GetPCLK2Freq>
 80013ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80013f0:	e003      	b.n	80013fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80013f2:	f7ff fc95 	bl	8000d20 <HAL_RCC_GetPCLK1Freq>
 80013f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001404:	f040 810c 	bne.w	8001620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800140c:	2200      	movs	r2, #0
 800140e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800141a:	4622      	mov	r2, r4
 800141c:	462b      	mov	r3, r5
 800141e:	1891      	adds	r1, r2, r2
 8001420:	65b9      	str	r1, [r7, #88]	; 0x58
 8001422:	415b      	adcs	r3, r3
 8001424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800142a:	4621      	mov	r1, r4
 800142c:	eb12 0801 	adds.w	r8, r2, r1
 8001430:	4629      	mov	r1, r5
 8001432:	eb43 0901 	adc.w	r9, r3, r1
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800144a:	4690      	mov	r8, r2
 800144c:	4699      	mov	r9, r3
 800144e:	4623      	mov	r3, r4
 8001450:	eb18 0303 	adds.w	r3, r8, r3
 8001454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001458:	462b      	mov	r3, r5
 800145a:	eb49 0303 	adc.w	r3, r9, r3
 800145e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800146e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001476:	460b      	mov	r3, r1
 8001478:	18db      	adds	r3, r3, r3
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
 800147c:	4613      	mov	r3, r2
 800147e:	eb42 0303 	adc.w	r3, r2, r3
 8001482:	657b      	str	r3, [r7, #84]	; 0x54
 8001484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800148c:	f7fe feba 	bl	8000204 <__aeabi_uldivmod>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <UART_SetConfig+0x2d4>)
 8001496:	fba3 2302 	umull	r2, r3, r3, r2
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	011c      	lsls	r4, r3, #4
 800149e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80014a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80014ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80014b0:	4642      	mov	r2, r8
 80014b2:	464b      	mov	r3, r9
 80014b4:	1891      	adds	r1, r2, r2
 80014b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80014b8:	415b      	adcs	r3, r3
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014c0:	4641      	mov	r1, r8
 80014c2:	eb12 0a01 	adds.w	sl, r2, r1
 80014c6:	4649      	mov	r1, r9
 80014c8:	eb43 0b01 	adc.w	fp, r3, r1
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014e0:	4692      	mov	sl, r2
 80014e2:	469b      	mov	fp, r3
 80014e4:	4643      	mov	r3, r8
 80014e6:	eb1a 0303 	adds.w	r3, sl, r3
 80014ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80014ee:	464b      	mov	r3, r9
 80014f0:	eb4b 0303 	adc.w	r3, fp, r3
 80014f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80014f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800150c:	460b      	mov	r3, r1
 800150e:	18db      	adds	r3, r3, r3
 8001510:	643b      	str	r3, [r7, #64]	; 0x40
 8001512:	4613      	mov	r3, r2
 8001514:	eb42 0303 	adc.w	r3, r2, r3
 8001518:	647b      	str	r3, [r7, #68]	; 0x44
 800151a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800151e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001522:	f7fe fe6f 	bl	8000204 <__aeabi_uldivmod>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4611      	mov	r1, r2
 800152c:	4b3b      	ldr	r3, [pc, #236]	; (800161c <UART_SetConfig+0x2d4>)
 800152e:	fba3 2301 	umull	r2, r3, r3, r1
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2264      	movs	r2, #100	; 0x64
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	1acb      	subs	r3, r1, r3
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001542:	4b36      	ldr	r3, [pc, #216]	; (800161c <UART_SetConfig+0x2d4>)
 8001544:	fba3 2302 	umull	r2, r3, r3, r2
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001550:	441c      	add	r4, r3
 8001552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001556:	2200      	movs	r2, #0
 8001558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800155c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001564:	4642      	mov	r2, r8
 8001566:	464b      	mov	r3, r9
 8001568:	1891      	adds	r1, r2, r2
 800156a:	63b9      	str	r1, [r7, #56]	; 0x38
 800156c:	415b      	adcs	r3, r3
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001574:	4641      	mov	r1, r8
 8001576:	1851      	adds	r1, r2, r1
 8001578:	6339      	str	r1, [r7, #48]	; 0x30
 800157a:	4649      	mov	r1, r9
 800157c:	414b      	adcs	r3, r1
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800158c:	4659      	mov	r1, fp
 800158e:	00cb      	lsls	r3, r1, #3
 8001590:	4651      	mov	r1, sl
 8001592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001596:	4651      	mov	r1, sl
 8001598:	00ca      	lsls	r2, r1, #3
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	4642      	mov	r2, r8
 80015a2:	189b      	adds	r3, r3, r2
 80015a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015a8:	464b      	mov	r3, r9
 80015aa:	460a      	mov	r2, r1
 80015ac:	eb42 0303 	adc.w	r3, r2, r3
 80015b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80015c8:	460b      	mov	r3, r1
 80015ca:	18db      	adds	r3, r3, r3
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ce:	4613      	mov	r3, r2
 80015d0:	eb42 0303 	adc.w	r3, r2, r3
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80015de:	f7fe fe11 	bl	8000204 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <UART_SetConfig+0x2d4>)
 80015e8:	fba3 1302 	umull	r1, r3, r3, r2
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	2164      	movs	r1, #100	; 0x64
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	3332      	adds	r3, #50	; 0x32
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <UART_SetConfig+0x2d4>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	f003 0207 	and.w	r2, r3, #7
 8001606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4422      	add	r2, r4
 800160e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001610:	e105      	b.n	800181e <UART_SetConfig+0x4d6>
 8001612:	bf00      	nop
 8001614:	40011000 	.word	0x40011000
 8001618:	40011400 	.word	0x40011400
 800161c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001624:	2200      	movs	r2, #0
 8001626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800162a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800162e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001632:	4642      	mov	r2, r8
 8001634:	464b      	mov	r3, r9
 8001636:	1891      	adds	r1, r2, r2
 8001638:	6239      	str	r1, [r7, #32]
 800163a:	415b      	adcs	r3, r3
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001642:	4641      	mov	r1, r8
 8001644:	1854      	adds	r4, r2, r1
 8001646:	4649      	mov	r1, r9
 8001648:	eb43 0501 	adc.w	r5, r3, r1
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	00eb      	lsls	r3, r5, #3
 8001656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165a:	00e2      	lsls	r2, r4, #3
 800165c:	4614      	mov	r4, r2
 800165e:	461d      	mov	r5, r3
 8001660:	4643      	mov	r3, r8
 8001662:	18e3      	adds	r3, r4, r3
 8001664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001668:	464b      	mov	r3, r9
 800166a:	eb45 0303 	adc.w	r3, r5, r3
 800166e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800167e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800168e:	4629      	mov	r1, r5
 8001690:	008b      	lsls	r3, r1, #2
 8001692:	4621      	mov	r1, r4
 8001694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001698:	4621      	mov	r1, r4
 800169a:	008a      	lsls	r2, r1, #2
 800169c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80016a0:	f7fe fdb0 	bl	8000204 <__aeabi_uldivmod>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4b60      	ldr	r3, [pc, #384]	; (800182c <UART_SetConfig+0x4e4>)
 80016aa:	fba3 2302 	umull	r2, r3, r3, r2
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	011c      	lsls	r4, r3, #4
 80016b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016c4:	4642      	mov	r2, r8
 80016c6:	464b      	mov	r3, r9
 80016c8:	1891      	adds	r1, r2, r2
 80016ca:	61b9      	str	r1, [r7, #24]
 80016cc:	415b      	adcs	r3, r3
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016d4:	4641      	mov	r1, r8
 80016d6:	1851      	adds	r1, r2, r1
 80016d8:	6139      	str	r1, [r7, #16]
 80016da:	4649      	mov	r1, r9
 80016dc:	414b      	adcs	r3, r1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016ec:	4659      	mov	r1, fp
 80016ee:	00cb      	lsls	r3, r1, #3
 80016f0:	4651      	mov	r1, sl
 80016f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016f6:	4651      	mov	r1, sl
 80016f8:	00ca      	lsls	r2, r1, #3
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	4642      	mov	r2, r8
 8001702:	189b      	adds	r3, r3, r2
 8001704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001708:	464b      	mov	r3, r9
 800170a:	460a      	mov	r2, r1
 800170c:	eb42 0303 	adc.w	r3, r2, r3
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	67bb      	str	r3, [r7, #120]	; 0x78
 800171e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800172c:	4649      	mov	r1, r9
 800172e:	008b      	lsls	r3, r1, #2
 8001730:	4641      	mov	r1, r8
 8001732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001736:	4641      	mov	r1, r8
 8001738:	008a      	lsls	r2, r1, #2
 800173a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800173e:	f7fe fd61 	bl	8000204 <__aeabi_uldivmod>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <UART_SetConfig+0x4e4>)
 8001748:	fba3 1302 	umull	r1, r3, r3, r2
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	2164      	movs	r1, #100	; 0x64
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	3332      	adds	r3, #50	; 0x32
 800175a:	4a34      	ldr	r2, [pc, #208]	; (800182c <UART_SetConfig+0x4e4>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	095b      	lsrs	r3, r3, #5
 8001762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001766:	441c      	add	r4, r3
 8001768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800176c:	2200      	movs	r2, #0
 800176e:	673b      	str	r3, [r7, #112]	; 0x70
 8001770:	677a      	str	r2, [r7, #116]	; 0x74
 8001772:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001776:	4642      	mov	r2, r8
 8001778:	464b      	mov	r3, r9
 800177a:	1891      	adds	r1, r2, r2
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	415b      	adcs	r3, r3
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001786:	4641      	mov	r1, r8
 8001788:	1851      	adds	r1, r2, r1
 800178a:	6039      	str	r1, [r7, #0]
 800178c:	4649      	mov	r1, r9
 800178e:	414b      	adcs	r3, r1
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800179e:	4659      	mov	r1, fp
 80017a0:	00cb      	lsls	r3, r1, #3
 80017a2:	4651      	mov	r1, sl
 80017a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017a8:	4651      	mov	r1, sl
 80017aa:	00ca      	lsls	r2, r1, #3
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	4642      	mov	r2, r8
 80017b4:	189b      	adds	r3, r3, r2
 80017b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80017b8:	464b      	mov	r3, r9
 80017ba:	460a      	mov	r2, r1
 80017bc:	eb42 0303 	adc.w	r3, r2, r3
 80017c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	663b      	str	r3, [r7, #96]	; 0x60
 80017cc:	667a      	str	r2, [r7, #100]	; 0x64
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80017da:	4649      	mov	r1, r9
 80017dc:	008b      	lsls	r3, r1, #2
 80017de:	4641      	mov	r1, r8
 80017e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017e4:	4641      	mov	r1, r8
 80017e6:	008a      	lsls	r2, r1, #2
 80017e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80017ec:	f7fe fd0a 	bl	8000204 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <UART_SetConfig+0x4e4>)
 80017f6:	fba3 1302 	umull	r1, r3, r3, r2
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2164      	movs	r1, #100	; 0x64
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	3332      	adds	r3, #50	; 0x32
 8001808:	4a08      	ldr	r2, [pc, #32]	; (800182c <UART_SetConfig+0x4e4>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	f003 020f 	and.w	r2, r3, #15
 8001814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4422      	add	r2, r4
 800181c:	609a      	str	r2, [r3, #8]
}
 800181e:	bf00      	nop
 8001820:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001824:	46bd      	mov	sp, r7
 8001826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800182a:	bf00      	nop
 800182c:	51eb851f 	.word	0x51eb851f

08001830 <__libc_init_array>:
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	4d0d      	ldr	r5, [pc, #52]	; (8001868 <__libc_init_array+0x38>)
 8001834:	4c0d      	ldr	r4, [pc, #52]	; (800186c <__libc_init_array+0x3c>)
 8001836:	1b64      	subs	r4, r4, r5
 8001838:	10a4      	asrs	r4, r4, #2
 800183a:	2600      	movs	r6, #0
 800183c:	42a6      	cmp	r6, r4
 800183e:	d109      	bne.n	8001854 <__libc_init_array+0x24>
 8001840:	4d0b      	ldr	r5, [pc, #44]	; (8001870 <__libc_init_array+0x40>)
 8001842:	4c0c      	ldr	r4, [pc, #48]	; (8001874 <__libc_init_array+0x44>)
 8001844:	f000 f820 	bl	8001888 <_init>
 8001848:	1b64      	subs	r4, r4, r5
 800184a:	10a4      	asrs	r4, r4, #2
 800184c:	2600      	movs	r6, #0
 800184e:	42a6      	cmp	r6, r4
 8001850:	d105      	bne.n	800185e <__libc_init_array+0x2e>
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	f855 3b04 	ldr.w	r3, [r5], #4
 8001858:	4798      	blx	r3
 800185a:	3601      	adds	r6, #1
 800185c:	e7ee      	b.n	800183c <__libc_init_array+0xc>
 800185e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001862:	4798      	blx	r3
 8001864:	3601      	adds	r6, #1
 8001866:	e7f2      	b.n	800184e <__libc_init_array+0x1e>
 8001868:	080018b0 	.word	0x080018b0
 800186c:	080018b0 	.word	0x080018b0
 8001870:	080018b0 	.word	0x080018b0
 8001874:	080018b4 	.word	0x080018b4

08001878 <memset>:
 8001878:	4402      	add	r2, r0
 800187a:	4603      	mov	r3, r0
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <memset+0xa>
 8001880:	4770      	bx	lr
 8001882:	f803 1b01 	strb.w	r1, [r3], #1
 8001886:	e7f9      	b.n	800187c <memset+0x4>

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr
